(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{157:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return f}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=i.a.createContext({}),b=function(e){var t=i.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=b(e.components);return i.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=b(n),u=a,f=p["".concat(o,".").concat(u)]||p[u]||d[u]||r;return n?i.a.createElement(f,c(c({ref:t},s),{},{components:n})):i.a.createElement(f,c({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var s=2;s<r;s++)o[s]=n[s];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},158:function(e,t,n){"use strict";var a=n(0),i=n(20);t.a=function(){var e=Object(a.useContext)(i.a);if(null===e)throw new Error("Docusaurus context not provided");return e}},159:function(e,t,n){"use strict";function a(e){var t,n,i="";if("string"==typeof e||"number"==typeof e)i+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(i&&(i+=" "),i+=n);else for(t in e)e[t]&&(i&&(i+=" "),i+=t);return i}t.a=function(){for(var e,t,n=0,i="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(i&&(i+=" "),i+=t);return i}},160:function(e,t,n){"use strict";n.d(t,"b",(function(){return r})),n.d(t,"a",(function(){return o}));var a=n(158),i=n(161);function r(){var e=Object(a.a)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,n=void 0===t?"/":t,r=e.url;return{withBaseUrl:function(e,t){return function(e,t,n,a){var r=void 0===a?{}:a,o=r.forcePrependBaseUrl,c=void 0!==o&&o,l=r.absolute,s=void 0!==l&&l;if(!n)return n;if(n.startsWith("#"))return n;if(Object(i.b)(n))return n;if(c)return t+n;var b=!n.startsWith(t)?t+n.replace(/^\//,""):n;return s?e+b:b}(r,n,e,t)}}}function o(e,t){return void 0===t&&(t={}),(0,r().withBaseUrl)(e,t)}},161:function(e,t,n){"use strict";function a(e){return!0===/^(\w*:|\/\/)/.test(e)}function i(e){return void 0!==e&&!a(e)}n.d(t,"b",(function(){return a})),n.d(t,"a",(function(){return i}))},162:function(e,t,n){"use strict";var a=n(0),i=Object(a.createContext)(void 0);t.a=i},163:function(e,t,n){"use strict";var a=n(0),i=n(162);t.a=function(){var e=Object(a.useContext)(i.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},164:function(e,t,n){"use strict";var a=n(0),i=n.n(a),r=n(163),o=n(159),c=n(48),l=n.n(c),s=37,b=39;t.a=function(e){var t=e.block,n=e.children,c=e.defaultValue,p=e.values,d=e.groupId,u=Object(r.a)(),f=u.tabGroupChoices,m=u.setTabGroupChoices,O=Object(a.useState)(c),j=O[0],h=O[1],g=Object(a.useState)(!1),y=g[0],v=g[1];if(null!=d){var N=f[d];null!=N&&N!==j&&p.some((function(e){return e.value===N}))&&h(N)}var C=function(e){h(e),null!=d&&m(d,e)},w=[],D=function(e){e.metaKey||e.altKey||e.ctrlKey||v(!0)},S=function(){v(!1)};return Object(a.useEffect)((function(){window.addEventListener("keydown",D),window.addEventListener("mousedown",S)}),[]),i.a.createElement("div",null,i.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(o.a)("tabs",{"tabs--block":t})},p.map((function(e){var t=e.value,n=e.label;return i.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":j===t,className:Object(o.a)("tabs__item",l.a.tabItem,{"tabs__item--active":j===t}),style:y?{}:{outline:"none"},key:t,ref:function(e){return w.push(e)},onKeyDown:function(e){!function(e,t,n){switch(n.keyCode){case b:!function(e,t){var n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()}(e,t);break;case s:!function(e,t){var n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()}(e,t)}}(w,e.target,e),D(e)},onFocus:function(){return C(t)},onClick:function(){C(t),v(!1)},onPointerDown:function(){return v(!1)}},n)}))),i.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},a.Children.toArray(n).filter((function(e){return e.props.value===j}))[0]))}},165:function(e,t,n){"use strict";var a=n(0),i=n.n(a);t.a=function(e){return i.a.createElement("div",null,e.children)}},95:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return b}));var a=n(2),i=n(6),r=(n(0),n(157)),o=(n(164),n(165),n(160),{title:"Configurations Overview",description:"Configurations - Overview",sidebar_label:"Overview"}),c={unversionedId:"configurations_overview",id:"configurations_overview",isDocsHomePage:!1,title:"Configurations Overview",description:"Configurations - Overview",source:"@site/docs/configurations_overview.md",permalink:"/docs/docs/configurations_overview",editUrl:"https://github.com/Leaf-Agriculture/docs/tree/master/docs/configurations_overview.md",sidebar_label:"Overview",sidebar:"docs",previous:{title:"General Setup Information",permalink:"/docs/docs/setup_information"},next:{title:"Configurations Endpoints",permalink:"/docs/docs/configurations_endpoints"}},l=[{value:"Configuration Levels",id:"configuration-levels",children:[]},{value:"Field Boundary Management",id:"field-boundary-management",children:[]},{value:"Machine File Conversion",id:"machine-file-conversion",children:[]},{value:"Field Operations",id:"field-operations",children:[]},{value:"Irrigation",id:"irrigation",children:[]},{value:"Data Synchronization",id:"data-synchronization",children:[]}],s={rightToc:l};function b(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Leaf's system can be heavily customized to pull and process data differently across APIs and Leaf Users. This customization is achieved using ",Object(r.b)("strong",{parentName:"p"},"Configurations")," \u2013 settings that control data ingestion, processing, and output formats."),Object(r.b)("p",null,"Configurations can be applied to multiple APIs, including field and field boundaries, machine files, and field operations. Some configurations, like ",Object(r.b)("inlineCode",{parentName:"p"},"organizationDataSync")," and ",Object(r.b)("inlineCode",{parentName:"p"},"customDataSync"),", affect all APIs."),Object(r.b)("div",{className:"admonition admonition-info alert alert--info"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Configuration changes are ",Object(r.b)("strong",{parentName:"p"},"not")," applied retroactively.  If you update a configuration and need to reprocess data, you can use the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/docs/operations_endpoints#reprocess-an-operation"}),"Reprocess Operation")," endpoint. "))),Object(r.b)("h3",{id:"configuration-levels"},"Configuration Levels"),Object(r.b)("p",null,"Configurations can be set at two levels:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("strong",{parentName:"li"},"API Owner Level:")," Every API Owner account starts with a default set of configurations (detailed below). These defaults can be changed, but they cannot be deleted or set to ",Object(r.b)("inlineCode",{parentName:"li"},"null"),"."),Object(r.b)("li",{parentName:"ol"},Object(r.b)("strong",{parentName:"li"},"Leaf User Level:")," You can set specific configurations for individual Leaf Users (representing growers, regions, etc.). This allows granular control over how a specific user's data is synchronized or processed.")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Inheritance:")," If a configuration is ",Object(r.b)("em",{parentName:"p"},"not")," explicitly set for a Leaf User, that user automatically inherits the configuration from the API Owner. However, once a configuration ",Object(r.b)("em",{parentName:"p"},"is")," set at the Leaf User level, it will ",Object(r.b)("strong",{parentName:"p"},"not")," change even if the API Owner's configuration is subsequently modified."),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Currently, configurations are available for the following APIs:")),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"API"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Available configurations"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#field-boundary-management"}),"Field Boundary Management")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#automaticfixboundary"}),"automaticFixBoundary"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#fieldsattachintersection"}),"fieldsAttachIntersection"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#fieldsautomerge"}),"fieldsAutoMerge"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#fieldsautosync"}),"fieldsAutoSync"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#fieldsmergeintersection"}),"fieldsMergeIntersection"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#machine-file-conversion"}),"Machine File Conversion ")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#cleanupstandardgeojson"}),"cleanupStandardGeojson"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#originaloperationdata"}),"originalOperationData"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#unitmeasurement"}),"unitMeasurement"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#enableoutsidefieldgeojson"}),"enableOutsideFieldGeojson"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#enablegeoparquetoutput"}),"enableGeoparquetOutput"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#field-operations"}),"Field Operations ")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#cleanupstandardgeojson"}),"cleanupStandardGeojson"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#fieldoperationcreation"}),"fieldOperationCreation"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#operationsautosync"}),"operationsAutoSync"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#operationsfilteredgeojson"}),"operationsFilteredGeojson"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#operationsimageasgeotiff"}),"operationsImageAsGeoTiff"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#operationsremoveoutliers"}),"operationsRemoveOutliers"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#operationsoutlierslimit"}),"operationsOutliersLimit"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#operationsmergerange"}),"operationsMergeRange"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#operationsmergerangeharvested"}),"operationsMergeRangeHarvested"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#operationsprocessingrange"}),"operationsProcessingRange"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#splitoperationsbyfield"}),"splitOperationsByField"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#splitoperationsbyprovider"}),"splitOperationsByProvider"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#splitoperationsbytilltype"}),"splitOperationsByTillType"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#summarizebyproductentry"}),"summarizeByProductEntry"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#unitmeasurement"}),"unitMeasurement"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#enableoutsidefieldgeojson"}),"enableOutsideFieldGeojson"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#enableoperationssession"}),"enableOperationsSession"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#operationsimageattributecreation"}),"operationsImageAttributeCreation"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#enablegeoparquetoutput"}),"enableGeoparquetOutput"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#irrigation"})," Irrigation ")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#irrigationprocessingrange"}),"irrigationProcessingRange"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#data-synchronization"})," Data Synchronization ")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#organizationdatasync"}),"organizationDataSync"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#customdatasync"}),"customDataSync"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#fieldsautosync"}),"fieldsAutoSync"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#operationsautosync"}),"operationsAutoSync"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#implementsautosync"}),"implementsAutoSync"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#machinesautosync"}),"machinesAutoSync"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#operatorsautosync"}),"operatorsAutoSync"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#productsautosync"}),"productsAutoSync"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#zonesautosync"}),"zonesAutoSync"),", ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"#syncpartnerdata"}),"syncPartnerData"))))),Object(r.b)("h3",{id:"field-boundary-management"},"Field Boundary Management"),Object(r.b)("h4",{id:"automaticfixboundary"},"automaticFixBoundary"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"true")),Object(r.b)("p",null,"Enable this setting to have Leaf automatically attempt to correct invalid field boundary geometries received from providers. See ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/field_boundary_management_endpoints#automatic-geometry-fix"}),"Automatic Geometry Fix")," for more details."),Object(r.b)("h4",{id:"fieldsattachintersection"},"fieldsAttachIntersection"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"0.01")),Object(r.b)("p",null,"Set the minimum intersection percentage required to link an operation to a field. Leaf links the operation if the intersection area is greater than this value. Enter a value between 0 and 100 (e.g., ",Object(r.b)("inlineCode",{parentName:"p"},"1")," for 1%, ",Object(r.b)("inlineCode",{parentName:"p"},"0.01")," for 0.01%). ",Object(r.b)("inlineCode",{parentName:"p"},"0.01")," represents the smallest possible overlap."),Object(r.b)("h4",{id:"fieldsautomerge"},"fieldsAutoMerge"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"false")),Object(r.b)("p",null,"Enable this setting to have Leaf automatically merge fields that meet the intersection threshold defined by the ",Object(r.b)("inlineCode",{parentName:"p"},"fieldsMergeIntersection")," configuration."),Object(r.b)("h4",{id:"fieldsautosync"},"fieldsAutoSync"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"true")),Object(r.b)("p",null,"Enable this setting to have Leaf automatically synchronize field boundaries from your connected providers. If set to ",Object(r.b)("inlineCode",{parentName:"p"},"false"),", you must manually trigger synchronization using the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/field_boundary_management_endpoints#sync-fields-manually"}),"sync fields endpoint"),"."),Object(r.b)("h4",{id:"fieldsmergeintersection"},"fieldsMergeIntersection"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"0.01")),Object(r.b)("p",null,"Define the minimum intersection percentage required to merge two fields. When fields meet this threshold and ",Object(r.b)("inlineCode",{parentName:"p"},"fieldsAutoMerge")," is enabled, Leaf creates a new field of type ",Object(r.b)("inlineCode",{parentName:"p"},"MERGED")," representing the intersection. The original fields remain inactive for historical reference. Enter a value between 0 and 100 (",Object(r.b)("inlineCode",{parentName:"p"},"0.01")," is the minimum)."),Object(r.b)("h3",{id:"machine-file-conversion"},"Machine File Conversion"),Object(r.b)("h4",{id:"cleanupstandardgeojson"},"cleanupStandardGeojson"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"true")),Object(r.b)("p",null,"Enable this setting to have Leaf automatically remove points marked as invalid (see ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/docs/machine_file_conversion_sample_output#valid-points"}),"Valid Points"),") from the ",Object(r.b)("inlineCode",{parentName:"p"},"standardGeoJSON")," file output."),Object(r.b)("h4",{id:"originaloperationdata"},"originalOperationData"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"true")),Object(r.b)("p",null,"Enable this setting to include non-standard properties (like original farm name, field name, grower, and operation type provided by the source) in the File summary output. This does not affect the ",Object(r.b)("inlineCode",{parentName:"p"},"standardGeoJSON")," or Field Operation summary outputs."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'"originalOperationData": {\n    "originalOperationFarm": "Farm Green",\n    "originalOperationField": "Field A",\n    "originalOperationGrower": "Grower",\n    "originalOperationType": "SowingAndPlanting"\n}\n')),Object(r.b)("h4",{id:"unitmeasurement"},"unitMeasurement"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"[Your Preferred System]")),Object(r.b)("p",null,"Choose the unit system (Metric, Imperial, or Default) for summary, ",Object(r.b)("inlineCode",{parentName:"p"},"standardGeoJSON"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"filteredGeoJSON")," outputs in Machine Files and Field Operations. ",Object(r.b)("inlineCode",{parentName:"p"},"METRIC")," and ",Object(r.b)("inlineCode",{parentName:"p"},"IMPERIAL")," convert measurements accordingly. ",Object(r.b)("inlineCode",{parentName:"p"},"DEFAULT")," uses the units provided by the original data source. Using ",Object(r.b)("inlineCode",{parentName:"p"},"METRIC")," or ",Object(r.b)("inlineCode",{parentName:"p"},"IMPERIAL")," ensures consistency across your data. See the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/machine_file_conversion_units"}),"Units of Measurement page")," for specific unit conversions."),Object(r.b)("h4",{id:"enableoutsidefieldgeojson"},"enableOutsideFieldGeojson"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"false")),Object(r.b)("p",null,"Enable this setting to capture machine file points that fall outside defined field boundaries when ",Object(r.b)("inlineCode",{parentName:"p"},"splitOperationsByField")," is active. Normally, these points are discarded. When enabled, you can retrieve these points using the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/machine_file_conversion_endpoints#get-all-outsidefieldgeojson-files"}),"outsideFieldGeoJSON endpoint"),". This applies to both Machine File Conversion and Field Operations."),Object(r.b)("h4",{id:"enablegeoparquetoutput"},"enableGeoparquetOutput"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"false")),Object(r.b)("p",null,"Enable this setting to generate vector point file outputs (like ",Object(r.b)("inlineCode",{parentName:"p"},"standardGeoJSON"),") in GeoParquet format in addition to GeoJSON. GeoParquet offers faster processing and reduced storage. This setting applies to data processed after it's enabled (no historical conversion). This applies to both Machine File Conversion and Field Operations."),Object(r.b)("h3",{id:"field-operations"},"Field Operations"),Object(r.b)("p",null,"These configurations can be enabled with the use of Leaf Field Operations. Field Operations require an active boundary to be present so Leaf can merge the machine files with the field boundaries to create Field Operations."),Object(r.b)("h4",{id:"cleanupstandardgeojson-1"},"cleanupStandardGeojson"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"true")),Object(r.b)("p",null,"Enable this setting to have Leaf automatically remove points marked as invalid from the ",Object(r.b)("inlineCode",{parentName:"p"},"standardGeoJSON")," file output during Field Operation processing. ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#cleanupstandardgeojson"}),"See this section for more information")),Object(r.b)("h4",{id:"summarizebyproductentry"},"summarizeByProductEntry"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"true")),Object(r.b)("p",null,"Enable this setting to aggregate product application data in the Field Operation summary. Leaf groups entries with the same product name, summing ",Object(r.b)("inlineCode",{parentName:"p"},"area")," and ",Object(r.b)("inlineCode",{parentName:"p"},"totalApplied")," and averaging the ",Object(r.b)("inlineCode",{parentName:"p"},"rate"),". This applies only to application-type operations."),Object(r.b)("h4",{id:"fieldoperationcreation"},"fieldOperationCreation"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"true")),Object(r.b)("p",null,"Enable this setting to allow Leaf to automatically create ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/operations_overview"}),"Field Operations")," by merging relevant machine files associated with an active field boundary."),Object(r.b)("h4",{id:"operationsautosync"},"operationsAutoSync"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"true")),Object(r.b)("p",null,"Enable this setting to have Leaf automatically synchronize operation data from your connected providers."),Object(r.b)("h4",{id:"operationsfilteredgeojson"},"operationsFilteredGeojson"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"true")),Object(r.b)("p",null,"Enable this setting to allow filtering of ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/operations_overview"}),"Field Operations")," data based on various criteria (see ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/operations_sample_output#field-operations-filtered-geojson"}),"Filtered GeoJSON"),") as well as the generation of ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/operations_sample_output#field-operations-images-v2"}),"Operations Images"),"."),Object(r.b)("h4",{id:"operationsimageasgeotiff"},"operationsImageAsGeoTiff"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"false")),Object(r.b)("p",null,"Enable this setting to allow Leaf to generate the images of operations in GeoTIFF format. The data can be accessed in this ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/operations_endpoints#get-operations-geotiff-images"}),"endpoint"),". "),Object(r.b)("h4",{id:"operationsremoveoutliers"},"operationsRemoveOutliers"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"true")),Object(r.b)("p",null,"Enable this setting to remove outlier points from the ",Object(r.b)("inlineCode",{parentName:"p"},"filteredGeojson")," output for harvest operations. Leaf identifies outliers based on harvest volume values falling outside the standard deviation threshold set by ",Object(r.b)("inlineCode",{parentName:"p"},"operationsOutliersLimit"),". Requires ",Object(r.b)("inlineCode",{parentName:"p"},"operationsFilteredGeojson")," to be enabled. See ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/operations_sample_output#outliers"}),"Outliers")," for more details."),Object(r.b)("h4",{id:"operationsoutlierslimit"},"operationsOutliersLimit"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"3")),Object(r.b)("p",null,"Set the standard deviation threshold for identifying outliers when ",Object(r.b)("inlineCode",{parentName:"p"},"operationsRemoveOutliers")," is enabled. For example, the default value ",Object(r.b)("inlineCode",{parentName:"p"},"3")," removes points where the harvest volume is more than 3 standard deviations from the mean. See ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/operations_sample_output#outliers"}),"Outliers")," for more details."),Object(r.b)("h4",{id:"operationsmergerange"},"operationsMergeRange"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"5")," days"),Object(r.b)("p",null,"Define the time window (in days) used to group machine files into a single non-harvest Field Operation. Files within this range for the same field, crop, and operation type are merged."),Object(r.b)("h4",{id:"operationsmergerangeharvested"},"operationsMergeRangeHarvested"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"21")," days"),Object(r.b)("p",null,"Define the time window (in days) used to group machine files into a single harvest Field Operation. Files within this range for the same field and crop are merged."),Object(r.b)("h4",{id:"operationsprocessingrange"},"operationsProcessingRange"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"[Set as needed]")," (Typically 12 months)"),Object(r.b)("p",null,"Specify the lookback period (in months) for fetching and processing operations data from providers. Leaf will only process operations created or updated within this timeframe."),Object(r.b)("h4",{id:"splitoperationsbyfield"},"splitOperationsByField"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"true")),Object(r.b)("p",null,"Enable this setting to create separate Field Operations for each distinct Leaf Field Boundary that intersects with the machine data. If disabled, data intersecting multiple boundaries might be combined into a single operation."),Object(r.b)("h4",{id:"splitoperationsbyprovider"},"splitOperationsByProvider"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"true")),Object(r.b)("p",null,"Enable this setting to group machine files by provider ",Object(r.b)("em",{parentName:"p"},"in addition to")," field, operation type, crop, and date when creating Field Operations. If disabled (",Object(r.b)("inlineCode",{parentName:"p"},"false"),"), Leaf merges data from different providers into the same Field Operation if other criteria match."),Object(r.b)("h4",{id:"splitoperationsbytilltype"},"splitOperationsByTillType"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"false")),Object(r.b)("p",null,"Enable this setting to create separate Field Operations for each unique ",Object(r.b)("inlineCode",{parentName:"p"},"tillType")," found within tillage machine data. If disabled, different tillage types might be combined into a single operation."),Object(r.b)("h4",{id:"unitmeasurement-1"},"unitMeasurement"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"[Your Preferred System]")),Object(r.b)("p",null,Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#unitmeasurement"}),"See this section for more information")),Object(r.b)("h4",{id:"enableoutsidefieldgeojson-1"},"enableOutsideFieldGeojson"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"false")),Object(r.b)("p",null,Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#enableoutsidefieldgeojson"}),"See this section for more information")),Object(r.b)("h4",{id:"enableoperationssession"},"enableOperationsSession"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"false")),Object(r.b)("p",null,"Enables a new view of the field operation data, compiled by operator, implement and machines used in the operation. The information can be accessed in the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/operations_endpoints#get-the-operations-sessions"}),"field operation session endpoint"),"."),Object(r.b)("h4",{id:"enablegeoparquetoutput-1"},"enableGeoparquetOutput"),Object(r.b)("p",null,Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#enableGeoparquetOutput"}),"See this section for more information")),Object(r.b)("h3",{id:"irrigation"},"Irrigation"),Object(r.b)("h4",{id:"irrigationprocessingrange"},"irrigationProcessingRange"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"12")," months"),Object(r.b)("p",null,"Specify the lookback period (in months) for fetching and processing irrigation activities from providers. Leaf will only process irrigation data that occurred within this timeframe."),Object(r.b)("h3",{id:"data-synchronization"},"Data Synchronization"),Object(r.b)("h4",{id:"organizationdatasync"},"organizationDataSync"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"ALL")),Object(r.b)("p",null,"Control how Leaf syncs data across organizations within a provider account. Set to ",Object(r.b)("inlineCode",{parentName:"p"},"ALL")," to sync data from all organizations. Set to ",Object(r.b)("inlineCode",{parentName:"p"},"SELECTED_ONLY")," to sync only from organizations explicitly marked as ",Object(r.b)("inlineCode",{parentName:"p"},"SELECTED")," via the Organization Sync endpoints."),Object(r.b)("h4",{id:"syncpartnerdata"},"syncPartnerData"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"false")),Object(r.b)("p",null,"Enable (",Object(r.b)("inlineCode",{parentName:"p"},"true"),") this setting to fetch shared or partner data (e.g., from John Deere Operations Center partnerships or AgLeader shared accounts), provided the necessary permissions are granted. If disabled (",Object(r.b)("inlineCode",{parentName:"p"},"false"),"), Leaf only fetches data from the directly connected account, ignoring shared data even if permissions allow it."),Object(r.b)("h4",{id:"customdatasync"},"customDataSync"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"true")),Object(r.b)("p",null,"Enable this setting to initially fetch field boundaries in ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/field_boundary_management_endpoints#preview-mode"}),Object(r.b)("inlineCode",{parentName:"a"},"PREVIEW")," mode"),". This avoids fetching full data for all provider fields, allowing you to selectively ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/field_boundary_management_endpoints#enable-a-preview-field"}),"choose which fields")," to fetch completely later. For some providers, this also affects fetching associated operation files. When changing this from ",Object(r.b)("inlineCode",{parentName:"p"},"true")," to ",Object(r.b)("inlineCode",{parentName:"p"},"false"),", previously previewed fields can be fully processed using the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/field_boundary_management_endpoints#sync-fields-manually"}),"Manual Sync endpoint"),"."),Object(r.b)("h4",{id:"fieldsautosync-1"},"fieldsAutoSync"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"true")),Object(r.b)("p",null,"Enable this setting to have Leaf automatically synchronize field boundary data from your connected providers. If disabled (",Object(r.b)("inlineCode",{parentName:"p"},"false"),"), you must manually trigger synchronization via the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/field_boundary_management_endpoints#sync-fields-manually"}),"Manual Sync endpoint"),"."),Object(r.b)("h4",{id:"operationsautosync-1"},"operationsAutoSync"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"true")),Object(r.b)("p",null,"Enable this setting to have Leaf automatically synchronize operation data from your connected providers."),Object(r.b)("h4",{id:"implementsautosync"},"implementsAutoSync"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"false")),Object(r.b)("p",null,"Enable this setting to have Leaf automatically synchronize implement data from your connected providers."),Object(r.b)("h4",{id:"machinesautosync"},"machinesAutoSync"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"false")),Object(r.b)("p",null,"Enable this setting to have Leaf automatically synchronize machine data from your connected providers."),Object(r.b)("h4",{id:"operatorsautosync"},"operatorsAutoSync"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"false")),Object(r.b)("p",null,"Enable this setting to have Leaf automatically synchronize operator data from your connected providers."),Object(r.b)("h4",{id:"productsautosync"},"productsAutoSync"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"false")),Object(r.b)("p",null,"Enable this setting to have Leaf automatically fetch input/product data (currently applies to John Deere)."),Object(r.b)("h4",{id:"zonesautosync"},"zonesAutoSync"),Object(r.b)("p",null,"Default: ",Object(r.b)("inlineCode",{parentName:"p"},"false")),Object(r.b)("p",null,"Enable this setting to have Leaf automatically synchronize zone data from your connected providers."))}b.isMDXComponent=!0}}]);