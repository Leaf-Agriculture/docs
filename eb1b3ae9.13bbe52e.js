(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{141:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return u})),t.d(n,"metadata",(function(){return o})),t.d(n,"rightToc",(function(){return b})),t.d(n,"default",(function(){return m}));var a=t(2),l=t(6),i=(t(0),t(156)),r=t(163),s=t(164),u=(t(159),{title:"Weather Endpoints",description:"Weather - Endpoints",sidebar_label:"Endpoints"}),o={unversionedId:"weather_endpoints",id:"weather_endpoints",isDocsHomePage:!1,title:"Weather Endpoints",description:"Weather - Endpoints",source:"@site/docs/weather_endpoints.md",permalink:"/docs/docs/weather_endpoints",editUrl:"https://github.com/Leaf-Agriculture/docs/tree/master/docs/weather_endpoints.md",sidebar_label:"Endpoints",sidebar:"docs",previous:{title:"Weather Overview",permalink:"/docs/docs/weather_overview"},next:{title:"Irrigation Overview",permalink:"/docs/docs/irrigation_overview"}},b=[{value:"About",id:"about",children:[]},{value:"Endpoints",id:"endpoints",children:[{value:"Get Daily Forecast",id:"get-daily-forecast",children:[]},{value:"Get Hourly Forecast",id:"get-hourly-forecast",children:[]},{value:"Get Daily Forecast for lat/lon",id:"get-daily-forecast-for-latlon",children:[]},{value:"Get Hourly Forecast for lat/lon",id:"get-hourly-forecast-for-latlon",children:[]},{value:"Get Daily Historical",id:"get-daily-historical",children:[]},{value:"Get Hourly Historical",id:"get-hourly-historical",children:[]},{value:"Get Daily Historical for lat/lon",id:"get-daily-historical-for-latlon",children:[]},{value:"Get Hourly Historical for lat/lon",id:"get-hourly-historical-for-latlon",children:[]}]}],c={rightToc:b};function m(e){var n=e.components,t=Object(l.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"about"},"About"),Object(i.b)("p",null,"Here we list all the available endpoints from Leaf's Weather API. For an easy way to call them,\nwe recommend using ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Leaf-Agriculture/Leaf-API-Postman-Collection"}),"Leaf's Postman collection"),"."),Object(i.b)("p",null,"All HTTP methods should be prepended by this service's endpoint:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"https://api.withleaf.io/services/weather/api\n")),Object(i.b)("p",null,"This service has the following endpoints available:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Endpoints"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("a",Object(a.a)({parentName:"td"},{href:"#get-daily-forecast"}),"Get Daily Forecast")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("span",{class:"badge badge--success"},"GET")," ",Object(i.b)("inlineCode",{parentName:"td"},"/users/{leafUserId}/weather/forecast/field/{fieldId}/daily"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("a",Object(a.a)({parentName:"td"},{href:"#get-hourly-forecast"}),"Get Hourly Forecast")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("span",{class:"badge badge--success"},"GET")," ",Object(i.b)("inlineCode",{parentName:"td"},"/users/{leafUserId}/weather/forecast/field/{fieldId}/hourly"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("a",Object(a.a)({parentName:"td"},{href:"#get-daily-forecast-for-latlon"}),"Get Daily Forecast for lat/long")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("span",{class:"badge badge--success"},"GET")," ",Object(i.b)("inlineCode",{parentName:"td"},"/weather/forecast/daily/{lat},{lon}"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("a",Object(a.a)({parentName:"td"},{href:"#get-hourly-forecast-for-latlon"}),"Get Hourly Forecast for lat/long")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("span",{class:"badge badge--success"},"GET")," ",Object(i.b)("inlineCode",{parentName:"td"},"/weather/forecast/hourly/{lat},{lon}"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("a",Object(a.a)({parentName:"td"},{href:"#get-daily-historical"}),"Get Daily Historical")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("span",{class:"badge badge--success"},"GET")," ",Object(i.b)("inlineCode",{parentName:"td"},"/users/{leafUserId}/weather/historical/field/{fieldId}/daily"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("a",Object(a.a)({parentName:"td"},{href:"#get-hourly-historical"}),"Get Hourly Historical")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("span",{class:"badge badge--success"},"GET")," ",Object(i.b)("inlineCode",{parentName:"td"},"/users/{leafUserId}/weather/historical/field/{fieldId}/hourly"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("a",Object(a.a)({parentName:"td"},{href:"#get-daily-historical-for-latlon"}),"Get Daily Historical for lat/long")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("span",{class:"badge badge--success"},"GET")," ",Object(i.b)("inlineCode",{parentName:"td"},"/weather/historical/daily/{lat},{lon}"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("a",Object(a.a)({parentName:"td"},{href:"#get-hourly-historical-for-latlon"}),"Get Hourly Historical for lat/long")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("span",{class:"badge badge--success"},"GET")," ",Object(i.b)("inlineCode",{parentName:"td"},"/weather/historical/hourly/{lat},{lon}"))))),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"Note")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Daily data endpoints are limited to a request of one year (366 days), so ",Object(i.b)("inlineCode",{parentName:"p"},"endTime")," - ",Object(i.b)("inlineCode",{parentName:"p"},"startTime")," <= 366. Hourly data endpoints are limited to an interval of 30 days per request, so ",Object(i.b)("inlineCode",{parentName:"p"},"endTime")," - ",Object(i.b)("inlineCode",{parentName:"p"},"startTime")," <= 30."))),Object(i.b)("h2",{id:"endpoints"},"Endpoints"),Object(i.b)("h3",{id:"get-daily-forecast"},"Get Daily Forecast"),Object(i.b)("p",null,"\xa0",Object(i.b)("span",{class:"badge badge--success"},"GET")," ",Object(i.b)("inlineCode",{parentName:"p"},"/users/{leafUserId}/weather/forecast/field/{fieldId}/daily")),Object(i.b)("p",null,"Get daily forecasted weather data by leaf user and field. If dates are not set on the endpoint,\nthe response will return forecast data for the next seven days by default."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Parameter (to filter by)"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"values"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"endTime"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Local date. Returns operations until the endTime")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"startTime"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Local date. Returns operations from the startTime onward")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"model"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Weather model data: ",Object(i.b)("inlineCode",{parentName:"td"},"icon"),", ",Object(i.b)("inlineCode",{parentName:"td"},"gfs"),", ",Object(i.b)("inlineCode",{parentName:"td"},"ifs"),", ",Object(i.b)("inlineCode",{parentName:"td"},"jma"),", ",Object(i.b)("inlineCode",{parentName:"td"},"gem")," or ",Object(i.b)("inlineCode",{parentName:"td"},"arpegeArome"),". The default is ",Object(i.b)("inlineCode",{parentName:"td"},"gfs"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"units"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"System of units: ",Object(i.b)("inlineCode",{parentName:"td"},"imperial")," or ",Object(i.b)("inlineCode",{parentName:"td"},"metric"),". The default is ",Object(i.b)("inlineCode",{parentName:"td"},"metric"))))),Object(i.b)("h4",{id:"request-examples"},"Request examples"),Object(i.b)(r.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(i.b)(s.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint = 'https://api.withleaf.io/services/weather/api/users/{leafUserId}/weather/forecast/field/{fieldId}/daily'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(i.b)(s.a,{value:"py",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/weather/api/users/{leafUserId}/weather/forecast/field/{fieldId}/daily'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(i.b)(s.a,{value:"sh",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/weather/api/users/{leafUserId}/weather/forecast/field/{fieldId}/daily'\n")))),Object(i.b)("h4",{id:"response"},"Response"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "type": "Feature",\n  "properties": {\n    "maxTemperature": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 28.8\n        },\n        {\n          "time": "2023-07-22T00:00:00",\n          "value": 28.1\n        },\n        ....\n      ],\n      "unit": "\xbaC"\n    },\n    "meanSoilTemperature": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 25.3\n        },\n        {\n          "time": "2023-07-22T00:00:00",\n          "value": 25.1\n        },\n        ....\n      ],\n      "unit": "\xb0C"\n    },\n    "minSoilTemperature": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 18.7\n        },\n        {\n          "time": "2023-07-22T00:00:00",\n          "value": 17.2\n        },\n        ....\n      ],\n      "unit": "\xb0C"\n    },\n    "maxSoilTemperature": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 28.9\n        },\n        {\n          "time": "2023-07-22T00:00:00",\n          "value": 27.9\n        },\n        ....\n      ],\n      "unit": "\xb0C"\n    },\n    "sunrise": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": "2023-07-21T10:52"\n        },\n        {\n          "time": "2023-07-22T00:00:00",\n          "value": "2023-07-22T10:53"\n        },\n        ....\n      ],\n      "unit": "iso8601"\n    },\n    "snowfallSum": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 0.0\n        },\n        {\n          "time": "2023-07-22T00:00:00",\n          "value": 0.0\n        },\n        ....\n      ],\n      "unit": "cm"\n    },\n    "precipitationSum": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 0.0\n        },\n        {\n          "time": "2023-07-22T00:00:00",\n          "value": 0.0\n        },\n        ....\n      ],\n      "unit": "cm"\n    },\n    "maxWindspeed": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 15.2\n        },\n        {\n          "time": "2023-07-22T00:00:00",\n          "value": 19.9\n        },\n        ....\n      ],\n      "unit": "km/h"\n    },\n    "evapotranspiration": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 3.76\n        },\n        {\n          "time": "2023-07-22T00:00:00",\n          "value": 4.93\n        },\n        ....\n      ],\n      "unit": "mm"\n    },\n    "processedTime": "2023-07-21T13:01:11.662397",\n    "rainSum": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 0.0\n        },\n        {\n          "time": "2023-07-22T00:00:00",\n          "value": 0.0\n        },\n        ....\n      ],\n      "unit": "mm"\n    },\n    "maxWindgusts": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 27.0\n        },\n        {\n          "time": "2023-07-22T00:00:00",\n          "value": 24.1\n        },\n        ....\n      ],\n      "unit": "km/h"\n    },\n    "meanTemperature": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 25.0\n        },\n        {\n          "time": "2023-07-22T00:00:00",\n          "value": 23.6\n        },\n        ....\n      ],\n      "unit": "\xbaC"\n    },\n    "minTemperature": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 21.1\n        },\n        {\n          "time": "2023-07-22T00:00:00",\n          "value": 18.9\n        },\n        ....\n      ],\n      "unit": "\xbaC"\n    },\n    "sunset": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": "2023-07-22T01:11"\n        },\n        {\n          "time": "2023-07-22T00:00:00",\n          "value": "2023-07-23T01:10"\n        },\n        ....\n      ],\n      "unit": "iso8601"\n    },\n    "windDirection": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 350.0\n        },\n        {\n          "time": "2023-07-22T00:00:00",\n          "value": 332.0\n        },\n        ....\n      ],\n      "unit": "\xb0"\n    }\n  },\n  "geometry": {\n    "type": "Point",\n    "coordinates": [\n      -89.64355775454169,\n      39.802794365611476\n    ]\n  }\n}\n')),Object(i.b)("h3",{id:"get-hourly-forecast"},"Get Hourly Forecast"),Object(i.b)("p",null,"\xa0",Object(i.b)("span",{class:"badge badge--success"},"GET")," ",Object(i.b)("inlineCode",{parentName:"p"},"/users/{leafUserId}/weather/forecast/field/{fieldId}/hourly")),Object(i.b)("p",null,"Get hourly forecasted weather data by Leaf User and field. If dates are not set on the endpoint, the response\nwill return forecast data for the next seven days by default."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Parameter (to filter by)"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"values"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"endTime"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Local date. Returns operations until the endTime")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"startTime"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Local date. Returns operations from the startTime onward")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"model"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Weather model data: ",Object(i.b)("inlineCode",{parentName:"td"},"icon"),", ",Object(i.b)("inlineCode",{parentName:"td"},"gfs"),", ",Object(i.b)("inlineCode",{parentName:"td"},"ifs"),", ",Object(i.b)("inlineCode",{parentName:"td"},"jma"),", ",Object(i.b)("inlineCode",{parentName:"td"},"gem")," or ",Object(i.b)("inlineCode",{parentName:"td"},"arpegeArome"),". The default is ",Object(i.b)("inlineCode",{parentName:"td"},"gfs"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"units"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"System of units: ",Object(i.b)("inlineCode",{parentName:"td"},"imperial")," or ",Object(i.b)("inlineCode",{parentName:"td"},"metric"),". The default is ",Object(i.b)("inlineCode",{parentName:"td"},"metric"))))),Object(i.b)("h4",{id:"request-examples-1"},"Request examples"),Object(i.b)(r.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(i.b)(s.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint = 'https://api.withleaf.io/services/weather/api/users/{leafUserId}/weather/forecast/field/{fieldId}/hourly'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(i.b)(s.a,{value:"py",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/weather/api/users/{leafUserId}/weather/forecast/field/{fieldId}/hourly'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(i.b)(s.a,{value:"sh",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/weather/api/users/{leafUserId}/weather/forecast/field/{fieldId}/hourly'\n")))),Object(i.b)("h4",{id:"response-1"},"Response"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "type": "Feature",\n  "properties": {\n    "rain": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 0.0\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 0.0\n        },\n        ....\n      ],\n      "unit": "mm"\n    },\n    "soilTemperature": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 28.2\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 27.9\n        },\n        ....\n      ],\n      "unit": "\xb0C"\n    },\n    "soilMoisture 0-1": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 0.1\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 0.1\n        },\n        ....\n      ],\n      "unit": "m\xb3/m\xb3"\n    },\n    "soilMoisture 1-3": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 0.2\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 0.2\n        },\n        ....\n      ],\n      "unit": "m\xb3/m\xb3"\n    },\n    "soilMoisture 3-9": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 0.3\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 0.3\n        },\n        ....\n      ],\n      "unit": "m\xb3/m\xb3"\n    },\n    "soilMoisture 9-27": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 0.4\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 0.4\n        },\n        ....\n      ],\n      "unit": "m\xb3/m\xb3"\n    },\n    "soilMoisture 27-81": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 0.5\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 0.5\n        },\n        ....\n      ],\n      "unit": "m\xb3/m\xb3"\n    },\n    "longwaveRadiation": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 563.8\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 642.3\n        },\n        ....\n      ],\n      "unit": "W/m\xb2"\n    },\n    "dewpoint": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 22.6\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 22.6\n        },\n        ....\n      ],\n      "unit": "\xbaC"\n    },\n    "windgusts": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 9.4\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 5.8\n        },\n        ....\n      ],\n      "unit": "km/h"\n    },\n    "snowfall": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 0.0\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 0.0\n        },\n        ....\n      ],\n      "unit": "mm"\n    },\n    "evapotranspiration": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 0.11\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 0.04\n        },\n        ....\n      ],\n      "unit": "mm"\n    },\n    "shortwaveRadiation": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 146.0\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 2.0\n        },\n        ....\n      ],\n      "unit": "W/m\xb2"\n    },\n    "processedTime": "str",\n    "cloudcover": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 51.0\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 100.0\n        },\n        ....\n      ],\n      "unit": "%"\n    },\n    "precipitation": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 0.0\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 0.0\n        },\n        ....\n      ],\n      "unit": "mm"\n    },\n    "relativeHumidity": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 75.0\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 80.0\n        },\n        ....\n      ],\n      "unit": "%"\n    },\n    "temperature": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 27.4\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 26.3\n        },\n        ....\n      ],\n      "unit": "\xbaC"\n    },\n    "windspeed": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 3.1\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 5.7\n        },\n        ....\n      ],\n      "unit": "km/h"\n    },\n    "windDirection": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 234.0\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 72.0\n        },\n        ....\n      ],\n      "unit": "km/h"\n    }\n  },\n  "geometry": {\n    "type": "Point",\n    "coordinates": [\n      -89.64355775454169,\n      39.802794365611476\n    ]\n  }\n}\n')),Object(i.b)("h3",{id:"get-daily-forecast-for-latlon"},"Get Daily Forecast for lat/lon"),Object(i.b)("p",null,"\xa0",Object(i.b)("span",{class:"badge badge--success"},"GET")," ",Object(i.b)("inlineCode",{parentName:"p"},"/weather/forecast/daily/{lat},{lon}")),Object(i.b)("p",null,"Get daily forecasted weather data for lat/lon by leaf user and field. If dates are not set on the endpoint,\nthe response will return forecast data for the next seven days by default."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Parameter (to filter by)"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"values"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"endTime"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Local date. Returns operations until the endTime")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"startTime"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Local date. Returns operations from the startTime onward")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"model"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Weather model data: ",Object(i.b)("inlineCode",{parentName:"td"},"icon"),", ",Object(i.b)("inlineCode",{parentName:"td"},"gfs"),", ",Object(i.b)("inlineCode",{parentName:"td"},"ifs"),", ",Object(i.b)("inlineCode",{parentName:"td"},"jma"),", ",Object(i.b)("inlineCode",{parentName:"td"},"gem")," or ",Object(i.b)("inlineCode",{parentName:"td"},"arpegeArome"),". The default is ",Object(i.b)("inlineCode",{parentName:"td"},"gfs"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"units"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"System of units: ",Object(i.b)("inlineCode",{parentName:"td"},"imperial")," or ",Object(i.b)("inlineCode",{parentName:"td"},"metric"),". The default is ",Object(i.b)("inlineCode",{parentName:"td"},"metric"))))),Object(i.b)("h4",{id:"request-examples-2"},"Request examples"),Object(i.b)(r.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(i.b)(s.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint = 'https://api.withleaf.io/services/weather/api/weather/forecast/daily/{lat},{lon}'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(i.b)(s.a,{value:"py",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/weather/api/weather/forecast/daily/{lat},{lon}'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(i.b)(s.a,{value:"sh",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/weather/api/weather/forecast/daily/{lat},{lon}'\n")))),Object(i.b)("h4",{id:"response-2"},"Response"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "type": "Feature",\n  "properties": {\n    "maxTemperature": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 28.8\n        },\n        {\n          "time": "2023-07-22T00:00:00",\n          "value": 28.1\n        },\n        ....\n      ],\n      "unit": "\xbaC"\n    },\n    "meanSoilTemperature": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 25.3\n        },\n        {\n          "time": "2023-07-22T00:00:00",\n          "value": 25.1\n        },\n        ....\n      ],\n      "unit": "\xb0C"\n    },\n    "minSoilTemperature": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 18.7\n        },\n        {\n          "time": "2023-07-22T00:00:00",\n          "value": 17.2\n        },\n        ....\n      ],\n      "unit": "\xb0C"\n    },\n    "maxSoilTemperature": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 28.9\n        },\n        {\n          "time": "2023-07-22T00:00:00",\n          "value": 27.9\n        },\n        ....\n      ],\n      "unit": "\xb0C"\n    },\n    "sunrise": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": "2023-07-21T10:52"\n        },\n        {\n          "time": "2023-07-22T00:00:00",\n          "value": "2023-07-22T10:53"\n        },\n        ....\n      ],\n      "unit": "iso8601"\n    },\n    "snowfallSum": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 0.0\n        },\n        {\n          "time": "2023-07-22T00:00:00",\n          "value": 0.0\n        },\n        ....\n      ],\n      "unit": "cm"\n    },\n    "precipitationSum": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 0.0\n        },\n        {\n          "time": "2023-07-22T00:00:00",\n          "value": 0.0\n        },\n        ....\n      ],\n      "unit": "cm"\n    },\n    "maxWindspeed": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 15.2\n        },\n        {\n          "time": "2023-07-22T00:00:00",\n          "value": 19.9\n        },\n        ....\n      ],\n      "unit": "km/h"\n    },\n    "evapotranspiration": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 3.76\n        },\n        {\n          "time": "2023-07-22T00:00:00",\n          "value": 4.93\n        },\n        ....\n      ],\n      "unit": "mm"\n    },\n    "processedTime": "2023-07-21T13:01:11.662397",\n    "rainSum": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 0.0\n        },\n        {\n          "time": "2023-07-22T00:00:00",\n          "value": 0.0\n        },\n        ....\n      ],\n      "unit": "mm"\n    },\n    "maxWindgusts": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 27.0\n        },\n        {\n          "time": "2023-07-22T00:00:00",\n          "value": 24.1\n        },\n        ....\n      ],\n      "unit": "km/h"\n    },\n    "meanTemperature": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 25.0\n        },\n        {\n          "time": "2023-07-22T00:00:00",\n          "value": 23.6\n        },\n        ....\n      ],\n      "unit": "\xbaC"\n    },\n    "minTemperature": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 21.1\n        },\n        {\n          "time": "2023-07-22T00:00:00",\n          "value": 18.9\n        },\n        ....\n      ],\n      "unit": "\xbaC"\n    },\n    "sunset": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": "2023-07-22T01:11"\n        },\n        {\n          "time": "2023-07-22T00:00:00",\n          "value": "2023-07-23T01:10"\n        },\n        ....\n      ],\n      "unit": "iso8601"\n    },\n    "windDirection": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 350.0\n        },\n        {\n          "time": "2023-07-22T00:00:00",\n          "value": 332.0\n        },\n        ....\n      ],\n      "unit": "\xb0"\n    }\n  },\n  "geometry": {\n    "type": "Point",\n    "coordinates": [\n      -89.64355775454169,\n      39.802794365611476\n    ]\n  }\n}\n')),Object(i.b)("h3",{id:"get-hourly-forecast-for-latlon"},"Get Hourly Forecast for lat/lon"),Object(i.b)("p",null,"\xa0",Object(i.b)("span",{class:"badge badge--success"},"GET")," ",Object(i.b)("inlineCode",{parentName:"p"},"/weather/forecast/hourly/{lat},{lon}")),Object(i.b)("p",null,"Get hourly forecasted weather data for lat/lon by Leaf User and field. If dates are not set on the endpoint, the response\nwill return forecast data for the next seven days by default."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Parameter (to filter by)"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"values"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"endTime"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Local date. Returns operations until the endTime")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"startTime"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Local date. Returns operations from the startTime onward")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"model"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Weather model data: ",Object(i.b)("inlineCode",{parentName:"td"},"icon"),", ",Object(i.b)("inlineCode",{parentName:"td"},"gfs"),", ",Object(i.b)("inlineCode",{parentName:"td"},"ifs"),", ",Object(i.b)("inlineCode",{parentName:"td"},"jma"),", ",Object(i.b)("inlineCode",{parentName:"td"},"gem")," or ",Object(i.b)("inlineCode",{parentName:"td"},"arpegeArome"),". The default is ",Object(i.b)("inlineCode",{parentName:"td"},"gfs"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"units"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"System of units: ",Object(i.b)("inlineCode",{parentName:"td"},"imperial")," or ",Object(i.b)("inlineCode",{parentName:"td"},"metric"),". The default is ",Object(i.b)("inlineCode",{parentName:"td"},"metric"))))),Object(i.b)("h4",{id:"request-examples-3"},"Request examples"),Object(i.b)(r.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(i.b)(s.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint = 'https://api.withleaf.io/services/weather/api/weather/forecast/hourly/{lat},{lon}\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(i.b)(s.a,{value:"py",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/weather/api/weather/forecast/hourly/{lat},{lon}'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(i.b)(s.a,{value:"sh",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/weather/api/weather/forecast/hourly/{lat},{lon}'\n")))),Object(i.b)("h4",{id:"response-3"},"Response"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "type": "Feature",\n  "properties": {\n    "rain": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 0.0\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 0.0\n        },\n        ....\n      ],\n      "unit": "mm"\n    },\n    "soilTemperature": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 28.7\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 27.9\n        },\n        ....\n      ],\n      "unit": "\xb0C"\n    },\n    "soilMoisture 0-1": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 0.1\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 0.1\n        },\n        ....\n      ],\n      "unit": "m\xb3/m\xb3"\n    },\n    "soilMoisture 1-3": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 0.2\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 0.2\n        },\n        ....\n      ],\n      "unit": "m\xb3/m\xb3"\n    },\n    "soilMoisture 3-9": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 0.3\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 0.3\n        },\n        ....\n      ],\n      "unit": "m\xb3/m\xb3"\n    },\n    "soilMoisture 9-27": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 0.4\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 0.4\n        },\n        ....\n      ],\n      "unit": "m\xb3/m\xb3"\n    },\n    "soilMoisture 27-81": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 0.5\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 0.5\n        },\n        ....\n      ],\n      "unit": "m\xb3/m\xb3"\n    },\n    "longwaveRadiation": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 563.8\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 642.3\n        },\n        ....\n      ],\n      "unit": "W/m\xb2"\n    },\n    "dewpoint": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 22.6\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 22.6\n        },\n        ....\n      ],\n      "unit": "\xbaC"\n    },\n    "windgusts": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 9.4\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 5.8\n        },\n        ....\n      ],\n      "unit": "km/h"\n    },\n    "snowfall": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 0.0\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 0.0\n        },\n        ....\n      ],\n      "unit": "mm"\n    },\n    "evapotranspiration": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 0.11\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 0.04\n        },\n        ....\n      ],\n      "unit": "mm"\n    },\n    "shortwaveRadiation": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 146.0\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 2.0\n        },\n        ....\n      ],\n      "unit": "W/m\xb2"\n    },\n    "processedTime": "str",\n    "cloudcover": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 51.0\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 100.0\n        },\n        ....\n      ],\n      "unit": "%"\n    },\n    "precipitation": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 0.0\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 0.0\n        },\n        ....\n      ],\n      "unit": "mm"\n    },\n    "relativeHumidity": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 75.0\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 80.0\n        },\n        ....\n      ],\n      "unit": "%"\n    },\n    "temperature": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 27.4\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 26.3\n        },\n        ....\n      ],\n      "unit": "\xbaC"\n    },\n    "windspeed": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 3.1\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 5.7\n        },\n        ....\n      ],\n      "unit": "km/h"\n    },\n    "windDirection": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 234.0\n        },\n        {\n          "time": "2023-07-21T01:00:00",\n          "value": 72.0\n        },\n        ....\n      ],\n      "unit": "km/h"\n    }\n  },\n  "geometry": {\n    "type": "Point",\n    "coordinates": [\n      -89.64355775454169,\n      39.802794365611476\n    ]\n  }\n}\n')),Object(i.b)("h3",{id:"get-daily-historical"},"Get Daily Historical"),Object(i.b)("p",null,"\xa0",Object(i.b)("span",{class:"badge badge--success"},"GET")," ",Object(i.b)("inlineCode",{parentName:"p"},"/users/{leafUserId}/weather/historical/field/{fieldId}/daily")),Object(i.b)("p",null,"Get daily historical weather data by Leaf User and field. If the dates are not defined in the endpoint, the response\nwill return data from the last seven days by default."),Object(i.b)("p",null,"Please note, historical weather data from less than 5 days ago is unavailable. If you\u2019re wanting historical weather data within the last 5 days, you can use the forecast service to get this information. "),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Parameter (to filter by)"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"values"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"endTime"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Local date. Returns operations until the endTime")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"startTime"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Local date. Returns operations from the startTime onward")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"model"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Historical model data: ",Object(i.b)("inlineCode",{parentName:"td"},"era5")," or ",Object(i.b)("inlineCode",{parentName:"td"},"era5Land"),". The default is ",Object(i.b)("inlineCode",{parentName:"td"},"era5"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"units"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"System of units: ",Object(i.b)("inlineCode",{parentName:"td"},"imperial")," or ",Object(i.b)("inlineCode",{parentName:"td"},"metric"),". The default is ",Object(i.b)("inlineCode",{parentName:"td"},"metric"))))),Object(i.b)("h4",{id:"request-examples-4"},"Request examples"),Object(i.b)(r.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(i.b)(s.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint = 'https://api.withleaf.io/services/weather/api/users/{leafUserId}/weather/historical/field/{fieldId}/daily'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(i.b)(s.a,{value:"py",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/weather/api/users/{leafUserId}/weather/historical/field/{fieldId}/daily'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(i.b)(s.a,{value:"sh",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/weather/api/users/{leafUserId}/weather/historical/field/{fieldId}/daily'\n")))),Object(i.b)("h4",{id:"response-4"},"Response"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "type": "Feature",\n  "properties": {\n    "maxTemperature": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 31.9\n        },\n        {\n          "time": "2023-07-15T00:00:00",\n          "value": 32.0\n        },\n        ....\n      ],\n      "unit": "\xbaC"\n    },\n    "meanSoilTemperature": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 25.3\n        },\n        {\n          "time": "2023-07-22T00:00:00",\n          "value": 25.1\n        },\n        ....\n      ],\n      "unit": "\xb0C"\n    },\n    "minSoilTemperature": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 18.7\n        },\n        {\n          "time": "2023-07-22T00:00:00",\n          "value": 17.2\n        },\n        ....\n      ],\n      "unit": "\xb0C"\n    },\n    "maxSoilTemperature": {\n      "values": [\n        {\n          "time": "2023-07-21T00:00:00",\n          "value": 28.9\n        },\n        {\n          "time": "2023-07-22T00:00:00",\n          "value": 27.9\n        },\n        ....\n      ],\n      "unit": "\xb0C"\n    },\n    "sunrise": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": "2023-07-14T10:47"\n        },\n        {\n          "time": "2023-07-15T00:00:00",\n          "value": "2023-07-15T10:48"\n        },\n        ....\n      ],\n      "unit": "iso8601"\n    },\n    "snowfallSum": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 0.0\n        },\n        {\n          "time": "2023-07-15T00:00:00",\n          "value": 0.0\n        },\n        ....\n      ],\n      "unit": "cm"\n    },\n    "precipitationSum": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 0.3\n        },\n        {\n          "time": "2023-07-15T00:00:00",\n          "value": 0.2\n        },\n        ....\n      ],\n      "unit": "mm"\n    },\n    "maxWindspeed": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 14.1\n        },\n        {\n          "time": "2023-07-15T00:00:00",\n          "value": 13.5\n        },\n        ....\n      ],\n      "unit": "km/h"\n    },\n    "evapotranspiration": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 4.51\n        },\n        {\n          "time": "2023-07-15T00:00:00",\n          "value": 3.62\n        },\n        ....\n      ],\n      "unit": "mm"\n    },\n    "processedTime": "2023-07-21T16:50:17.965109",\n    "rainSum": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 0.3\n        },\n        {\n          "time": "2023-07-15T00:00:00",\n          "value": 0.2\n        },\n        ....\n      ],\n      "unit": "mm"\n    },\n    "maxWindgusts": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 26.3\n        },\n        {\n          "time": "2023-07-15T00:00:00",\n          "value": 25.8\n        },\n        ....\n      ],\n      "unit": "km/h"\n    },\n    "meanTemperature": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 28.1\n        },\n        {\n          "time": "2023-07-15T00:00:00",\n          "value": 26.8\n        },\n        ....\n      ],\n      "unit": "\xbaC"\n    },\n    "minTemperature": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 26.1\n        },\n        {\n          "time": "2023-07-15T00:00:00",\n          "value": 23.2\n        },\n        ....\n      ],\n      "unit": "\xbaC"\n    },\n    "sunset": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": "2023-07-15T01:15"\n        },\n        {\n          "time": "2023-07-15T00:00:00",\n          "value": "2023-07-16T01:14"\n        },\n        ....\n      ],\n      "unit": "iso8601"\n    },\n    "windDirection": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 206.0\n        },\n        {\n          "time": "2023-07-15T00:00:00",\n          "value": 209.0\n        },\n        ....\n      ],\n      "unit": "\xb0"\n    }\n  },\n  "geometry": {\n    "type": "Point",\n    "coordinates": [\n      -89.64355775454169,\n      39.802794365611476\n    ]\n  }\n}\n')),Object(i.b)("h3",{id:"get-hourly-historical"},"Get Hourly Historical"),Object(i.b)("p",null,"\xa0",Object(i.b)("span",{class:"badge badge--success"},"GET")," ",Object(i.b)("inlineCode",{parentName:"p"},"/users/{leafUserId}/weather/historical/field/{fieldId}/hourly")),Object(i.b)("p",null,"Get hourly historical weather data by Leaf User and field. If the dates are not defined in the endpoint, the response\nwill return data from the last seven days by default."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Parameter (to filter by)"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"values"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"endTime"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Local date. Returns operations until the endTime")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"startTime"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Local date. Returns operations from the startTime onward")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"model"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Historical model data: ",Object(i.b)("inlineCode",{parentName:"td"},"era5")," or ",Object(i.b)("inlineCode",{parentName:"td"},"era5Land"),". The default is ",Object(i.b)("inlineCode",{parentName:"td"},"era5"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"units"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"System of units: ",Object(i.b)("inlineCode",{parentName:"td"},"imperial")," or ",Object(i.b)("inlineCode",{parentName:"td"},"metric"),". The default is ",Object(i.b)("inlineCode",{parentName:"td"},"metric"))))),Object(i.b)("h4",{id:"request-examples-5"},"Request examples"),Object(i.b)(r.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(i.b)(s.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint = 'https://api.withleaf.io/services/weather/api/users/{leafUserId}/weather/historical/field/{fieldId}/hourly'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(i.b)(s.a,{value:"py",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/weather/api/users/{leafUserId}/weather/historical/field/{fieldId}/hourly'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(i.b)(s.a,{value:"sh",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/weather/api/users/{leafUserId}/weather/historical/field/{fieldId}/hourly'\n")))),Object(i.b)("h4",{id:"response-5"},"Response"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "type": "Feature",\n  "properties": {\n    "rain": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 0.0\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 0.0\n        },\n        ....\n      ],\n      "unit": "mm"\n    },\n    "soilMoisture 0-7": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 0.1\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 0.1\n        },\n        ....\n      ],\n      "unit": "m\xb3/m\xb3"\n    },\n    "soilMoisture 7-28": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 0.2\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 0.2\n        },\n        ....\n      ],\n      "unit": "m\xb3/m\xb3"\n    },\n    "soilMoisture 28-100": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 0.3\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 0.3\n        },\n        ....\n      ],\n      "unit": "m\xb3/m\xb3"\n    },\n    "soilMoisture 100-255": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 0.4\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 0.4\n        },\n        ....\n      ],\n      "unit": "m\xb3/m\xb3"\n    },\n    "longwaveRadiation": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 563.8\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 642.3\n        },\n        ....\n      ],\n      "unit": "W/m\xb2"\n    },\n    "dewpoint": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 23.4\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 23.3\n        },\n        ....\n      ],\n      "unit": "\xbaC"\n    },\n    "windgusts": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 17.6\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 19.1\n        },\n        ....\n      ],\n      "unit": "km/h"\n    },\n    "snowfall": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 0.0\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 0.0\n        },\n        ....\n      ],\n      "unit": "mm"\n    },\n    "evapotranspiration": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 0.18\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 0.08\n        },\n        ....\n      ],\n      "unit": "mm"\n    },\n    "shortwaveRadiation": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 176.0\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 40.0\n        },\n        ....\n      ],\n      "unit": "W/m\xb2"\n    },\n    "processedTime": "str",\n    "cloudcover": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 9.0\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 5.0\n        },\n        ....\n      ],\n      "unit": "%"\n    },\n    "precipitation": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 0.0\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 0.0\n        },\n        ....\n      ],\n      "unit": "mm"\n    },\n    "soilTemperature": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 30.2\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 29.8\n        },\n        ....\n      ],\n      "unit": "\xbaC"\n    },\n    "relativeHumidity": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 61.0\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 62.0\n        },\n        ....\n      ],\n      "unit": "%"\n    },\n    "temperature": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 31.9\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 31.4\n        },\n        ....\n      ],\n      "unit": "\xbaC"\n    },\n    "windspeed": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 7.7\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 6.4\n        },\n        ....\n      ],\n      "unit": "km/h"\n    },\n    "windDirection": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 233.0\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 223.0\n        },\n        ....\n      ],\n      "unit": "km/h"\n    }\n  },\n  "geometry": {\n    "type": "Point",\n    "coordinates": [\n      -89.64355775454169,\n      39.802794365611476\n    ]\n  }\n}\n')),Object(i.b)("h3",{id:"get-daily-historical-for-latlon"},"Get Daily Historical for lat/lon"),Object(i.b)("p",null,"\xa0",Object(i.b)("span",{class:"badge badge--success"},"GET")," ",Object(i.b)("inlineCode",{parentName:"p"},"/weather/historical/daily/{lat},{lon}")),Object(i.b)("p",null,"Get daily historical weather data for lat/lon by Leaf User and field. If the dates are not defined in the endpoint, the response\nwill return data from the last seven days by default."),Object(i.b)("p",null,"Please note, historical weather data from less than 5 days ago is unavailable. If you\u2019re wanting historical weather data within the last 5 days, you can use the forecast service to get this information. "),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Parameter (to filter by)"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"values"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"endTime"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Local date. Returns operations until the endTime")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"startTime"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Local date. Returns operations from the startTime onward")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"model"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Historical model data: ",Object(i.b)("inlineCode",{parentName:"td"},"era5")," or ",Object(i.b)("inlineCode",{parentName:"td"},"era5Land"),". The default is ",Object(i.b)("inlineCode",{parentName:"td"},"era5"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"units"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"System of units: ",Object(i.b)("inlineCode",{parentName:"td"},"imperial")," or ",Object(i.b)("inlineCode",{parentName:"td"},"metric"),". The default is ",Object(i.b)("inlineCode",{parentName:"td"},"metric"))))),Object(i.b)("h4",{id:"request-examples-6"},"Request examples"),Object(i.b)(r.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(i.b)(s.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint = 'https://api.withleaf.io/services/weather/api/weather/historical/daily/{lat},{lon}'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(i.b)(s.a,{value:"py",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/weather/api/weather/historical/daily/{lat},{lon}'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(i.b)(s.a,{value:"sh",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/weather/api/weather/historical/daily/{lat},{lon}'\n")))),Object(i.b)("h4",{id:"response-6"},"Response"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "type": "Feature",\n  "properties": {\n    "maxTemperature": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 31.9\n        },\n        {\n          "time": "2023-07-15T00:00:00",\n          "value": 32.0\n        },\n        ....\n      ],\n      "unit": "\xbaC"\n    },\n    "meanSoilTemperature": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 25.3\n        },\n        {\n          "time": "2023-07-15T00:00:00",\n          "value": 25.1\n        },\n        ....\n      ],\n      "unit": "\xb0C"\n    },\n    "minSoilTemperature": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 18.7\n        },\n        {\n          "time": "2023-07-15T00:00:00",\n          "value": 17.2\n        },\n        ....\n      ],\n      "unit": "\xb0C"\n    },\n    "maxSoilTemperature": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 28.6\n        },\n        {\n          "time": "2023-07-15T00:00:00",\n          "value": 27.9\n        },\n        ....\n      ],\n      "unit": "\xb0C"\n    },\n    "sunrise": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": "2023-07-14T10:47"\n        },\n        {\n          "time": "2023-07-15T00:00:00",\n          "value": "2023-07-15T10:48"\n        },\n        ....\n      ],\n      "unit": "iso8601"\n    },\n    "snowfallSum": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 0.0\n        },\n        {\n          "time": "2023-07-15T00:00:00",\n          "value": 0.0\n        },\n        ....\n      ],\n      "unit": "cm"\n    },\n    "precipitationSum": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 0.3\n        },\n        {\n          "time": "2023-07-15T00:00:00",\n          "value": 0.2\n        },\n        ....\n      ],\n      "unit": "mm"\n    },\n    "maxWindspeed": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 14.1\n        },\n        {\n          "time": "2023-07-15T00:00:00",\n          "value": 13.5\n        },\n        ....\n      ],\n      "unit": "km/h"\n    },\n    "evapotranspiration": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 4.51\n        },\n        {\n          "time": "2023-07-15T00:00:00",\n          "value": 3.62\n        },\n        ....\n      ],\n      "unit": "mm"\n    },\n    "processedTime": "2023-07-21T16:50:17.965109",\n    "rainSum": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 0.3\n        },\n        {\n          "time": "2023-07-15T00:00:00",\n          "value": 0.2\n        },\n        ....\n      ],\n      "unit": "mm"\n    },\n    "maxWindgusts": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 26.3\n        },\n        {\n          "time": "2023-07-15T00:00:00",\n          "value": 25.8\n        },\n        ....\n      ],\n      "unit": "km/h"\n    },\n    "meanTemperature": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 28.1\n        },\n        {\n          "time": "2023-07-15T00:00:00",\n          "value": 26.8\n        },\n        ....\n      ],\n      "unit": "\xbaC"\n    },\n    "minTemperature": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 26.1\n        },\n        {\n          "time": "2023-07-15T00:00:00",\n          "value": 23.2\n        },\n        ....\n      ],\n      "unit": "\xbaC"\n    },\n    "sunset": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": "2023-07-15T01:15"\n        },\n        {\n          "time": "2023-07-15T00:00:00",\n          "value": "2023-07-16T01:14"\n        },\n        ....\n      ],\n      "unit": "iso8601"\n    },\n    "windDirection": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 206.0\n        },\n        {\n          "time": "2023-07-15T00:00:00",\n          "value": 209.0\n        },\n        ....\n      ],\n      "unit": "\xb0"\n    }\n  },\n  "geometry": {\n    "type": "Point",\n    "coordinates": [\n      -89.64355775454169,\n      39.802794365611476\n    ]\n  }\n}\n')),Object(i.b)("h3",{id:"get-hourly-historical-for-latlon"},"Get Hourly Historical for lat/lon"),Object(i.b)("p",null,"\xa0",Object(i.b)("span",{class:"badge badge--success"},"GET")," ",Object(i.b)("inlineCode",{parentName:"p"},"/weather/historical/hourly/{lat},{lon}")),Object(i.b)("p",null,"Get hourly historical weather data for lat/lon by Leaf User and field. If the dates are not defined in the endpoint, the response\nwill return data from the last seven days by default."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Parameter (to filter by)"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"values"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"endTime"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Local date. Returns operations until the endTime")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"startTime"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Local date. Returns operations from the startTime onward")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"model"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Historical model data: ",Object(i.b)("inlineCode",{parentName:"td"},"era5")," or ",Object(i.b)("inlineCode",{parentName:"td"},"era5Land"),". The default is ",Object(i.b)("inlineCode",{parentName:"td"},"era5"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"units"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"System of units: ",Object(i.b)("inlineCode",{parentName:"td"},"imperial")," or ",Object(i.b)("inlineCode",{parentName:"td"},"metric"),". The default is ",Object(i.b)("inlineCode",{parentName:"td"},"metric"))))),Object(i.b)("h4",{id:"request-examples-7"},"Request examples"),Object(i.b)(r.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(i.b)(s.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint = 'https://api.withleaf.io/services/weather/api/weather/historical/hourly/{lat},{lon}'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(i.b)(s.a,{value:"py",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/weather/api/weather/historical/hourly/{lat},{lon}'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(i.b)(s.a,{value:"sh",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/weather/api/weather/historical/hourly/{lat},{lon}'\n")))),Object(i.b)("h4",{id:"response-7"},"Response"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "type": "Feature",\n  "properties": {\n    "rain": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 0.0\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 0.0\n        },\n        ....\n      ],\n      "unit": "mm"\n    },\n    "soilMoisture 0-7": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 0.1\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 0.1\n        },\n        ....\n      ],\n      "unit": "m\xb3/m\xb3"\n    },\n    "soilMoisture 7-28": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 0.2\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 0.2\n        },\n        ....\n      ],\n      "unit": "m\xb3/m\xb3"\n    },\n    "soilMoisture 28-100": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 0.3\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 0.3\n        },\n        ....\n      ],\n      "unit": "m\xb3/m\xb3"\n    },\n    "soilMoisture 100-255": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 0.4\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 0.4\n        },\n        ....\n      ],\n      "unit": "m\xb3/m\xb3"\n    },\n    "longwaveRadiation": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 563.8\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 642.3\n        },\n        ....\n      ],\n      "unit": "W/m\xb2"\n    },\n    "dewpoint": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 23.4\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 23.3\n        },\n        ....\n      ],\n      "unit": "\xbaC"\n    },\n    "windgusts": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 17.6\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 19.1\n        },\n        ....\n      ],\n      "unit": "km/h"\n    },\n    "snowfall": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 0.0\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 0.0\n        },\n        ....\n      ],\n      "unit": "mm"\n    },\n    "evapotranspiration": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 0.18\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 0.08\n        },\n        ....\n      ],\n      "unit": "mm"\n    },\n    "shortwaveRadiation": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 176.0\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 40.0\n        },\n        ....\n      ],\n      "unit": "W/m\xb2"\n    },\n    "processedTime": "str",\n    "cloudcover": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 9.0\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 5.0\n        },\n        ....\n      ],\n      "unit": "%"\n    },\n    "precipitation": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 0.0\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 0.0\n        },\n        ....\n      ],\n      "unit": "mm"\n    },\n    "soilTemperature": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 30.2\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 29.8\n        },\n        ....\n      ],\n      "unit": "\xbaC"\n    },\n    "relativeHumidity": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 61.0\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 62.0\n        },\n        ....\n      ],\n      "unit": "%"\n    },\n    "temperature": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 31.9\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 31.4\n        },\n        ....\n      ],\n      "unit": "\xbaC"\n    },\n    "windspeed": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 7.7\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 6.4\n        },\n        ....\n      ],\n      "unit": "km/h"\n    },\n    "windDirection": {\n      "values": [\n        {\n          "time": "2023-07-14T00:00:00",\n          "value": 233.0\n        },\n        {\n          "time": "2023-07-14T01:00:00",\n          "value": 223.0\n        },\n        ....\n      ],\n      "unit": "km/h"\n    }\n  },\n  "geometry": {\n    "type": "Point",\n    "coordinates": [\n      -89.64355775454169,\n      39.802794365611476\n    ]\n  }\n}\n')),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"Warning")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"If there is no data available at that time/day, the property will be returned as ",Object(i.b)("em",{parentName:"p"},"null"),"."))))}m.isMDXComponent=!0},156:function(e,n,t){"use strict";t.d(n,"a",(function(){return c})),t.d(n,"b",(function(){return p}));var a=t(0),l=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var o=l.a.createContext({}),b=function(e){var n=l.a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=b(e.components);return l.a.createElement(o.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return l.a.createElement(l.a.Fragment,{},n)}},d=l.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,r=e.parentName,o=u(e,["components","mdxType","originalType","parentName"]),c=b(t),d=a,p=c["".concat(r,".").concat(d)]||c[d]||m[d]||i;return t?l.a.createElement(p,s(s({ref:n},o),{},{components:t})):l.a.createElement(p,s({ref:n},o))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=d;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var o=2;o<i;o++)r[o]=t[o];return l.a.createElement.apply(null,r)}return l.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},157:function(e,n,t){"use strict";var a=t(0),l=t(20);n.a=function(){var e=Object(a.useContext)(l.a);if(null===e)throw new Error("Docusaurus context not provided");return e}},158:function(e,n,t){"use strict";function a(e){var n,t,l="";if("string"==typeof e||"number"==typeof e)l+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=a(e[n]))&&(l&&(l+=" "),l+=t);else for(n in e)e[n]&&(l&&(l+=" "),l+=n);return l}n.a=function(){for(var e,n,t=0,l="";t<arguments.length;)(e=arguments[t++])&&(n=a(e))&&(l&&(l+=" "),l+=n);return l}},159:function(e,n,t){"use strict";t.d(n,"b",(function(){return i})),t.d(n,"a",(function(){return r}));var a=t(157),l=t(160);function i(){var e=Object(a.a)().siteConfig,n=(e=void 0===e?{}:e).baseUrl,t=void 0===n?"/":n,i=e.url;return{withBaseUrl:function(e,n){return function(e,n,t,a){var i=void 0===a?{}:a,r=i.forcePrependBaseUrl,s=void 0!==r&&r,u=i.absolute,o=void 0!==u&&u;if(!t)return t;if(t.startsWith("#"))return t;if(Object(l.b)(t))return t;if(s)return n+t;var b=!t.startsWith(n)?n+t.replace(/^\//,""):t;return o?e+b:b}(i,t,e,n)}}}function r(e,n){return void 0===n&&(n={}),(0,i().withBaseUrl)(e,n)}},160:function(e,n,t){"use strict";function a(e){return!0===/^(\w*:|\/\/)/.test(e)}function l(e){return void 0!==e&&!a(e)}t.d(n,"b",(function(){return a})),t.d(n,"a",(function(){return l}))},161:function(e,n,t){"use strict";var a=t(0),l=Object(a.createContext)(void 0);n.a=l},162:function(e,n,t){"use strict";var a=t(0),l=t(161);n.a=function(){var e=Object(a.useContext)(l.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},163:function(e,n,t){"use strict";var a=t(0),l=t.n(a),i=t(162),r=t(158),s=t(48),u=t.n(s),o=37,b=39;n.a=function(e){var n=e.block,t=e.children,s=e.defaultValue,c=e.values,m=e.groupId,d=Object(i.a)(),p=d.tabGroupChoices,O=d.setTabGroupChoices,j=Object(a.useState)(s),v=j[0],h=j[1],T=Object(a.useState)(!1),f=T[0],N=T[1];if(null!=m){var y=p[m];null!=y&&y!==v&&c.some((function(e){return e.value===y}))&&h(y)}var g=function(e){h(e),null!=m&&O(m,e)},w=[],C=function(e){e.metaKey||e.altKey||e.ctrlKey||N(!0)},x=function(){N(!1)};return Object(a.useEffect)((function(){window.addEventListener("keydown",C),window.addEventListener("mousedown",x)}),[]),l.a.createElement("div",null,l.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(r.a)("tabs",{"tabs--block":n})},c.map((function(e){var n=e.value,t=e.label;return l.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":v===n,className:Object(r.a)("tabs__item",u.a.tabItem,{"tabs__item--active":v===n}),style:f?{}:{outline:"none"},key:n,ref:function(e){return w.push(e)},onKeyDown:function(e){!function(e,n,t){switch(t.keyCode){case b:!function(e,n){var t=e.indexOf(n)+1;e[t]?e[t].focus():e[0].focus()}(e,n);break;case o:!function(e,n){var t=e.indexOf(n)-1;e[t]?e[t].focus():e[e.length-1].focus()}(e,n)}}(w,e.target,e),C(e)},onFocus:function(){return g(n)},onClick:function(){g(n),N(!1)},onPointerDown:function(){return N(!1)}},t)}))),l.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},a.Children.toArray(t).filter((function(e){return e.props.value===v}))[0]))}},164:function(e,n,t){"use strict";var a=t(0),l=t.n(a);n.a=function(e){return l.a.createElement("div",null,e.children)}}}]);