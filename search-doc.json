[{"title":"Never Gonna Give You Up","type":0,"sectionRef":"#","url":"blog/Welcome","content":"We're no strangers to love You know the rules and so do I A full commitment's what I'm thinking of You wouldn't get this from any other guy I just wanna tell you how I'm feeling Gotta make you understand Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you We've known each other for so long Your heart's been aching but you're too shy to say it Inside we both know what's been going on We know the game and we're gonna play it And if you ask me how I'm feeling Don't tell me you're too blind to see Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you (Ooh, give you up) (Ooh, give you up) (Ooh) Never gonna give, never gonna give (Give you up) (Ooh) Never gonna give, never gonna give (Give you up) We've known each other for so long Your heart's been aching but you're too shy to say it Inside we both know what's been going on We know the game and we're gonna play it I just wanna tell you how I'm feeling Gotta make you understand Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you Never gonna give you up Never gonna let you down Never gonna run around and desert you Never gonna make you cry Never gonna say goodbye Never gonna tell a lie and hurt you","keywords":""},{"title":"Welcome","type":0,"sectionRef":"#","url":"docs/","content":"","keywords":""},{"title":"Welcome to Leaf's Documentation!","type":1,"pageTitle":"Welcome","url":"docs/#welcome-to-leafs-documentation","content":"Developers use Leaf's API to access clean, standardized, and aggregated Farm data from all major food & agriculture brands. Please see the Quickstart section to get started with sample farm data & popular use cases. We have implementation examples in cURL, NodeJS and Python! Getting Started Leaf's API abstracts and standardizes across agricultural data sources so you can focus on building value with farm data. There are just a few concepts that you need to get started and we provide sample data within new Leaf accounts to help you learn quickly.  "},{"title":"Alert Authentication and Security","type":0,"sectionRef":"#","url":"docs/alerts_authentication","content":"","keywords":""},{"title":"Validating Signatures from Leaf","type":1,"pageTitle":"Alert Authentication and Security","url":"docs/alerts_authentication#validating-signatures-from-leaf","content":"Keeping your webhook secure is essential to ensure that only Leaf sends requests to your endpoint. To help with this, Leaf uses signatures to verify every request. Here’s how it works: Signatures and Secrets: Each webhook request is signed using HMAC with SHA-256. The secret key you set up during the alert’s configuration is used to generate the signature. What You Should Do: Use the X-Leaf-Signature header in the request to verify the signature. This ensures the request is genuine and untampered. The digest added to the X-Leaf-Signature header is encoded in base 64. Handling the Request Body: Always read the request body as raw bytes before verifying the signature. The signed content is a compact JSON string without extra line breaks or spaces (other than spaces after \":\" and \",\"). By following these steps, you’ll ensure that your application only processes requests sent by Leaf. info Using an X-CompanyName-Signature header is a common method of securing webhooks and is used by many companies including Twilio and Slack. Here is an example on how to verify the request in your webhook: PythonJava Copy import hmac import base64 import json payload = 'alert_payload' # Sign the request body received with your secret expected_sig = hmac.digest(msg=bytes(json.dumps(payload), 'utf-8'), key=bytes('your secret key', 'utf-8'), digest='sha256') # Decode the base-64 encoded X-Leaf-Signature header that was sent in the event header sig_header = \"x-leaf-signature-in-header\" request_sig = base64.b64decode(sig_header) # Compare both hmac.compare_digest(expected_sig, request_sig) The value alert_payload corresponds to the payload of the alerts. For example, if you need to authenticate a created field, the alert_payload will be: Copy { \"source\": \"REST\", \"leafUserId\": \"the id of the file owner\", \"fieldId\": \"the id of the created field\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"type\": \"fieldCreated\" } "},{"title":"Webhooks and IP Addresses","type":1,"pageTitle":"Alert Authentication and Security","url":"docs/alerts_authentication#webhooks-and-ip-addresses","content":"Leaf uses a cloud architecture to provide services, and as such, does not have a fixed range of IP addresses that issue webhooks. When designing your network architecture, you may wish to have one set of servers and a load balancer in a DMZ that receive webhook requests from Leaf, and then proxy those requests to your private network. "},{"title":"Alerts Endpoints","type":0,"sectionRef":"#","url":"docs/alerts_endpoints","content":"","keywords":""},{"title":"Create a webhook","type":1,"pageTitle":"Alerts Endpoints","url":"docs/alerts_endpoints#create-a-webhook","content":" POST /webhooks Creates a webhook resource, specifying which events you want to be notified about and where (server URL). The webhook will begin receiving events immediately after it is created. It's not possible to create different webhooks that listen to the same events. For example, if you have already registered a webhook listening for newSatelliteImagesand try to register another one, you'll get a 400 response with error eventRegisteredTwice. Request body# Parameter\tType\tDescriptionevents\tenum name of the event type\tThey are defined in the \"Events\" section of the services chapters (e.g. newSatelliteImage) name\tstring\tThe name of your webhook secret\tstring\tThe secret used for HMAC authentication. We sign payload with this secret. See more here url\ta valid HTTP URL string\tThe address of your webhook server The allowed keys to be filled in events are: credentialsLimitedPermission, credentialsUnauthenticated, fieldCreated, fieldBoundaryCreated, fieldBoundaryUpdated, uploadedFileProcessingFinished, uploadedFileProcessingFailed, providerFileProcessingFinished, providerFileProcessingFailed, mergedFileProcessingFinished, mergedFileProcessingFailed, automergedFileProcessingFinished, automergedFileProcessingFailed, operationCreated, operationUpdated, operationProcessingFinished, newSatelliteImage, machineCreated, machineUpdated, machineDeleted To see the detailed description of each of these events, click here. Example in JSON: Copy { \"events\": [ \"newSatelliteImage\" ], \"name\": \"Satellite images listener\", \"secret\": \"mRyT257XpFWX\", \"url\": \"https://yourwebhook.com/leaf/satellite\" } Request example# cURLPythonJavaScript Copy curl -X POST \\ -H 'Content-Type: application/json' \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d 'Your paylaod as specified above' 'https://api.withleaf.io/services/alerts/api/alerts/webhooks' Response# It returns a JSON containing information about the webhook created. Copy { \"id\": \"UUID\", \"events\": [ \"newSatelliteImage\" ], \"name\": \"Satellite images listener\", \"secret\": \"mRyT257XpFWX\", \"url\": \"https://agtech.com/leaf/satellite\" } If you need to test your endpoint, here is a request example so you can simulate the validation Leaf will do. cURLPythonJavaScript Copy curl -X POST \\ -H 'Content-Type: application/json' \\ -H 'accept: */*' \\ -d '{\"message\" : \"confirmation of webhook upon registration\"}' 'your-webhook-url' "},{"title":"Get a webhook","type":1,"pageTitle":"Alerts Endpoints","url":"docs/alerts_endpoints#get-a-webhook","content":" GET /webhooks/{id} Retrieve a specific webhook resource by its id. Request example# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/alerts/api/alerts/webhooks/{id}' Response# Copy { \"id\": \"UUID\", \"events\": [ \"newSatelliteImage\" ], \"secret\": \"mRyT257XpFWX\", \"name\": \"Satellite images listener\", \"url\": \"https://agtech.com/leaf/satellite\" } "},{"title":"Get all webhooks","type":1,"pageTitle":"Alerts Endpoints","url":"docs/alerts_endpoints#get-all-webhooks","content":" GET /webhooks Retrieve all Webhooks. Request example# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/alerts/api/alerts/webhooks' Response# It returns a list of JSON objects. Copy [{ \"id\": \"UUID\", \"events\": [ \"newSatelliteImage\" ], \"secret\": \"mRyT257XpFWX\", \"name\": \"Satellite images listener\", \"url\": \"https://agtech.com/leaf/satellite\" }] "},{"title":"Get failed calls for webhooks","type":1,"pageTitle":"Alerts Endpoints","url":"docs/alerts_endpoints#get-failed-calls-for-webhooks","content":" GET /webhooks/failed-calls Retrieve all failed calls for webhooks. Request example# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/alerts/api/alerts/webhooks/failed-calls' Response# It returns a list of JSON objects. Copy { \"items\": [ { \"apiOwner\": \"yourApiOwner\", \"createdAt\": \"2023-04-21T12:16:30Z\", \"url\": \"https://webhook.site/{{uuid}}\", \"status\": 502, \"response\": \"<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\\\"white\\\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx</center>\\r\\n</body>\\r\\n</html>\\r\\n\", \"requestBody\": \"{\\\"leafUserId\\\": \\\"uuid\\\", \\\"fileId\\\": \\\"uuid\\\", \\\"type\\\": \\\"automergedFileProcessingFinished\\\", \\\"timestamp\\\": \\\"2023-04-21T12:16:27.997586Z\\\"}\" }, { \"apiOwner\": \"yourApiOwner\", \"createdAt\": \"2023-04-24T18:35:53Z\", \"url\": \"https://webhook.site/{{uuid}}\", \"status\": 502, \"response\": \"<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body bgcolor=\\\"white\\\">\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx</center>\\r\\n</body>\\r\\n</html>\\r\\n\", \"requestBody\": \"{\\\"leafUserId\\\": \\\"uuid\\\", \\\"fileId\\\": \\\"uuid\\\", \\\"type\\\": \\\"automergedFileProcessingFinished\\\", \\\"timestamp\\\": \\\"2023-04-24T18:35:52.187785Z\\\"}\" }, { \"apiOwner\": \"yourApiOwner\", \"createdAt\": \"2023-04-24T18:35:53Z\", \"url\": \"https://flamboyant-flower-64651.pktriot.net/\", \"requestBody\": \"{\\\"source\\\": \\\"SYNC\\\", \\\"leafUserId\\\": \\\"ff044168-45aa-00d8-8b7e-8632d5c23616\\\", \\\"fieldId\\\": \\\"ed080ca3-69fe-365c-972f-a0d000fe7c0e\\\", \\\"type\\\": \\\"fieldCreated\\\", \\\"timestamp\\\": \\\"2023-04-24T18:35:53Z\\\"}\", \"connectionError\": \"ConnectionError: HTTPSConnectionPool(host='flamboyant-flower-64651.pktriot.net', port=443): Max retries exceeded with url: / (Caused by ProtocolError('Connection aborted.', RemoteDisconnected('Remote end closed connection without response')))\" } ] } info In case of alert delivery failures, Leaf Alerts will make new attempts at 1, 30, 60 and 240 minutes. "},{"title":"Delete a webhook","type":1,"pageTitle":"Alerts Endpoints","url":"docs/alerts_endpoints#delete-a-webhook","content":" DELETE /webhooks/{id} Delete a specific Webhook resource by its id. Returns 204 status code if the delete succeeded. Warning If you delete a Webhook resource, we no longer will send you the events the webhook listens to. Request example# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/alerts/api/alerts/webhooks/{id}' "},{"title":"Other channels","type":1,"pageTitle":"Alerts Endpoints","url":"docs/alerts_endpoints#other-channels","content":""},{"title":"ArcGIS","type":1,"pageTitle":"Alerts Endpoints","url":"docs/alerts_endpoints#arcgis","content":"info This option is a beta feature The alerts can be delivered in other channels like the arcgis that enables the alert to be sent direct to an ArcGIS Geoprocessing service. Create an ArcGIS alert#  POST /arcgis Creates a alert for be consumed in an ArcGIS geoprocessing service specifying which events you want to be notified about and where (server URL). The alert will begin receiving events immediately after it is created. It's not possible to create different alerts that listen to the same events. For example, if you have already registered a alerts listening for newSatelliteImagesand try to register another one, you'll get a 400 response with error eventRegisteredTwice. Request body# Parameter\tType\tDescriptionevents\tenum name of the event type\tThey are defined in the \"Events\" section of the services chapters (e.g. newSatelliteImage) name\tstring\tThe name of your alert secret\tstring\tThe secret used for HMAC authentication. We sign payload with this secret. See more here url\ta valid HTTP URL string\tThe address of your geoprocessing service, make sure to use this format: https://{ArcGIS Server url}/server/rest/services/{service name}/GPServer/{toolname}/submitJob?f=json The allowed keys to be filled in events are: credentialsLimitedPermission, credentialsUnauthenticated, fieldCreated, fieldBoundaryCreated, fieldBoundaryUpdated, uploadedFileProcessingFinished, uploadedFileProcessingFailed, providerFileProcessingFinished, providerFileProcessingFailed, mergedFileProcessingFinished, mergedFileProcessingFailed, automergedFileProcessingFinished, automergedFileProcessingFailed, operationCreated, operationUpdated, operationProcessingFinished, newSatelliteImage, machineCreated, machineUpdated, machineDeleted To see the detailed description of each of these events, click here. Example in JSON: Copy { \"events\": [ \"newSatelliteImage\" ], \"name\": \"Satellite images listener\", \"secret\": \"mRyT257XpFWX\", \"url\": \"arcgis geoprocessing url\" } Request example# cURLPythonJavaScript Copy curl -X POST \\ -H 'Content-Type: application/json' \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d 'Your paylaod as specified above' 'https://api.withleaf.io/services/alerts/api/alerts/arcgis' Response# It returns a JSON containing information about the webhook created. Copy { \"id\": \"UUID\", \"events\": [ \"newSatelliteImage\" ], \"name\": \"Satellite images listener\", \"secret\": \"mRyT257XpFWX\", \"url\": \"arcgis geoprocessing url\" } Geoprocessing configuration# This option requires that the geoprocessing is publicly available, that is, without authentication. To prevent anyone from using your service inappropriately, consider implementing the secret validation mentioned here. "},{"title":"Alerts Overview","type":0,"sectionRef":"#","url":"docs/alerts_overview","content":"","keywords":""},{"title":"Overview","type":1,"pageTitle":"Alerts Overview","url":"docs/alerts_overview#overview","content":"With Alerts you can be notified when something happens or changes instead of needing to repeatedly query Leaf for changes. Leaf Alerts support events that happen within Leaf and events that happen within supported third-parties. Leaf Alerts are set up as webhooks. Webhooks are user-defined HTTP callbacks that are triggered by some event in a web application and make it easier to integrate different applications or third-party APIs, like Leaf. When setting up an Alert, you provide us with a server URL (the address of the callback), an encoded secret for you to validate the authenticity of incoming webhook requests, and you specify what events you want to be notified about. When those events occur, we notify you via an HTTP request to the provided URL. Security is important and to understand how to verify if an incoming request comes from Leaf, see Authentication and Security. Events you might want to be alerted about include: \"A new satellite image is available.\"\"The processing of an operations file is complete.\"\"Credentials have expired.\" The following image illustrates how events are sent to your webhook:  Check the \"Overview\" page of a specific service, section \"Events,\" to see what events from that service are available to webhooks. See the Alerts API Reference for information on how to register, get, and delete webhooks. info In case of alert delivery failures, Leaf Alerts will make new attempts at 1, 30, 60, and 240 minutes. "},{"title":"Authentication","type":0,"sectionRef":"#","url":"docs/authentication","content":"To access our API, you first have to register using this [link][register]. After confirming your email, you will be able to request a token (JWT) through this endpoint: Copy https://api.withleaf.io/api/authenticate Request examples cURLPythonJavaScript Copy curl -X POST \\ -H 'Content-Type: application/json' \\ -d '{ \"username\":\"username\", \"password\":\"password\", \"rememberMe\":\"true\" }' \\ 'https://api.withleaf.io/api/authenticate' Response This request will return your access token to Leaf's API: Copy { \"id_token\" : \"YOUR_LEAF_TOKEN\" } All set! Include this token in your API calls and you will have access to Leaf's API. Note: Your Leaf Token lasts for 30 days with \"rememberMe\": \"true\" in the json. If you want it to last only 24 hours, set \"rememberMe\" to \"false\".After expiration, just make the same request to the same endpoint and you will get a new access token. ","keywords":""},{"title":"List of Events","type":0,"sectionRef":"#","url":"docs/alerts_events","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#about","content":"This section describes all types of events generated by Leaf and their respective formats. The types of events are grouped by the services that produce it. Below is a summary: Service\tAvailable EventsAlert Events\tWebhook registered Credentials Alerts\tCredentials missing permission, credentials unauthenticated Field Events\tNew field, Field updated, New Merged Field, Merged field updated Field Boundary Events\tField boundary created, field boundary updated Manual File Upload Events\tBatch Upload Processing Finished, uploaded file processing finished, uploaded file processing failed Machine File Conversion Events\tProvider file processing finished, provider file processing failed Operation Events\tMerged file processing finished, merged file processing failed, automerged file processing finished, automerged file processing failed, operation created, operation updated, operation processing finished. Crop Monitoring Events\tNew satellite image, Satellite Subscription Failed Irrigation Events\tNew Irrigation activity, New Field Irrigation activity Assets (Beta) Events\tNew machine, deleted machine, updated machine, new implement, updated implement "},{"title":"Alert Events","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#alert-events","content":""},{"title":"Webhook registered","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#webhook-registered","content":"When a new webhook is registered you will receive a one time success message in the below format: Copy { \"message\": \"confirmation of webhook upon registration\" } "},{"title":"Credentials Alerts","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#credentials-alerts","content":""},{"title":"Credentials Missing Permission","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#credentials-missing-permission","content":"Event for when the provided credentials don't have enough permissions to do the actions you are trying to. Alerts for this event are in the following format: Copy { \"credential\": \"the client identification\", \"provider\": \"the provider from the credential\", \"credentialId\": \"the credential id\", \"message\": \"message from the alert\", \"status\": \"the new status of the credential\", \"type\": \"credentialsLimitedPermission\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" } "},{"title":"Credentials Unauthenticated","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#credentials-unauthenticated","content":"Event for when the credentials are no longer valid. Alerts for this event are in the following format: Copy { \"credential\": \"the client identification\", \"provider\": \"the provider from the credential\", \"credentialId\": \"the credential id\", \"message\": \"message from the alert\", \"status\": \"the new status of the credential\", \"type\": \"credentialsUnauthenticated\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" } "},{"title":"Field Events","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#field-events","content":""},{"title":"New Field","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#new-field","content":"Event for when a new field is created either in a connected provider account or directly within Leaf. Alerts for this event are in the following format: Copy { \"source\": \"SYNC\", \"leafUserId\": \"the id of the file owner\", \"fieldId\": \"the id of the created field\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"type\": \"fieldCreated\" } "},{"title":"Field Updated","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#field-updated","content":"Event triggered when a field is updated. Alerts for this event are in the following format: Copy { \"source\": \"SYNC\", \"leafUserId\": \"the id of the file owner\", \"fieldId\": \"the id of the updated field\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"type\": \"fieldUpdated\" } "},{"title":"New Merged Field","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#new-merged-field","content":"Event for when a new merged field is created. The creation of a merged field depends of the fieldsAutoSync and fieldsMergeIntersection configurations. Alerts for this event are in the following format: Copy { \"source\": \"REST\", \"leafUserId\": \"the id of the file owner\", \"fieldId\": \"the id of the created field\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"type\": \"mergedFieldCreated\" } "},{"title":"Merged Field updated","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#merged-field-updated","content":"Event for when a merged field is updated due to the geometry update of one of the fields used to create the merged field. Alerts for this event are in the following format: Copy { \"source\": \"REST\", \"leafUserId\": \"the id of the file owner\", \"fieldId\": \"the id of the created field\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"type\": \"mergedFieldUpdated\" } "},{"title":"Field Boundary Events","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#field-boundary-events","content":""},{"title":"Field Boundary Created","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#field-boundary-created","content":"Event for when a fieldBoundary is created. Alerts for this event are in the following format: Copy { \"boundaryId\": \"the id of the created field boundary\", \"leafUserId\": \"the id of the file owner\", \"fieldId\": \"the field related to the created field boundary\", \"type\": \"fieldBoundaryCreated\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" } "},{"title":"Field Boundary Updated","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#field-boundary-updated","content":"Event for when a fieldBoundary is updated. Alerts for this event are in the following format: Copy { \"boundaryId\": \"the id of the updated field boundary\", \"leafUserId\": \"the id of the file owner\", \"fieldId\": \"the field related to the updated field boundary\", \"type\": \"fieldBoundaryUpdated\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" } "},{"title":"Manual File Upload Events","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#manual-file-upload-events","content":""},{"title":"Batch Upload Processing Finished","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#batch-upload-processing-finished","content":"Event triggered when all machine files identified in the batch file have been processed (converted or failed). The files generated by the conversion will be listed in the batch or batch status endpoints using the batchId from the alert. Alerts for this event are in the following format: Copy { \"batchId\": \"the id of the batchId\", \"leafUserId\": \"the id of the file owner\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"type\": \"batchUploadProcessingFinished\" } "},{"title":"Uploaded File Processing Finished","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#uploaded-file-processing-finished","content":"Event for when all steps of the processing of a machine operations file that was uploaded to Leaf are finished. This event can be useful to trigger a procedure that fetches the file from the API. This event can be used to activate a procedure that fetches the file from the api, since processing the file may take some time. Alerts for this event are in the following format: Copy { \"fileId\": \"the id of the uploaded file\", \"leafUserId\": \"the id of the file owner\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"type\": \"uploadedFileProcessingFinished\" } "},{"title":"Uploaded File Processing Failed","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#uploaded-file-processing-failed","content":"Event for when the processing of an operations file that was uploaded to Leaf is finished but failed in one or more of the processing steps. This event can be useful for identifying files that have failed and are no longer being processed. Alerts for this event are in the following format: Copy { \"fileId\": \"the id of the uploaded file\", \"leafUserId\": \"the id of the file owner\", \"message\": \"details of what happened. May be empty\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"type\": \"uploadedFileProcessingFailed\" } "},{"title":"Machine File Conversion Events","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#machine-file-conversion-events","content":""},{"title":"Provider File Processing Finished","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#provider-file-processing-finished","content":"Event for when the processing of an operations file from a provider (either uploaded to provider manually or via Wireless Data Transfer) has successfully finished processing. This event can be useful for identifying new files when they are available. Alerts for this event are in the following format: Copy { \"fileId\": \"the id of the uploaded file\", \"leafUserId\": \"the id of the file owner\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"type\": \"providerFileProcessingFinished\" } "},{"title":"Provider File Processing Failed","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#provider-file-processing-failed","content":"Event for when the processing of an operations file from a provider (either uploaded to provider manually or via Wireless Data Transfer) is finished processing but failed in one or more of the processing steps. This event can be useful for identifying files that have failed and are no longer being processed. Alerts for this event are in the following format: Copy { \"fileId\": \"the id of the uploaded file\", \"leafUserId\": \"the id of the file owner\", \"message\": \"details of what happened. May be empty\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"type\": \"providerFileProcessingFailed\" } "},{"title":"Operation Events","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#operation-events","content":""},{"title":"Merged File Processing Finished","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#merged-file-processing-finished","content":"Event for when the processing of a merged operation file has successfully finished processing. This event can be useful for identifying new merged files when they are available. Alerts for this event are in the following format: Copy { \"fileId\": \"the id of the uploaded file\", \"leafUserId\": \"the id of the file owner\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"type\": \"mergedFileProcessingFinished\" } "},{"title":"Merged File Processing Failed","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#merged-file-processing-failed","content":"Event for when the processing of a merged operation file is finished processing but failed in one or more of the processing steps. This event can be useful for identifying merged files that have failed and are no longer being processed. Alerts for this event are in the following format: Copy { \"fileId\": \"the id of the uploaded file\", \"leafUserId\": \"the id of the file owner\", \"message\": \"details of what happened. May be empty\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"type\": \"mergedFileProcessingFailed\" } "},{"title":"Automerged File Processing Finished","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#automerged-file-processing-finished","content":"Event for when the processing of an automerged operation file has successfully finished processing. This event can be useful for identifying new automerged files when they are available. Alerts for this event are in the following format: Copy { \"fileId\": \"the id of the uploaded file\", \"leafUserId\": \"the id of the file owner\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"type\": \"automergedFileProcessingFinished\" } "},{"title":"Automerged File Processing Failed","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#automerged-file-processing-failed","content":"Event for when the processing of an automerged operation file is finished processing but failed in one or more of the processing steps. This event can be useful for identifying automerged files that have failed and are no longer being processed. Alerts for this event are in the following format: Copy { \"fileId\": \"the id of the uploaded file\", \"leafUserId\": \"the id of the file owner\", \"message\": \"details of what happened. May be empty\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"type\": \"automergedFileProcessingFailed\" } "},{"title":"Operation created","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#operation-created","content":"Event for when an operation is successfully created. This event can be useful for identifying new operations when they are available. When sending this event, operation resources such as summary, images and units will probably not be complete. Alerts for this event are in the following format: Copy { \"operationId\": \"the id of the operation created\", \"leafUserId\": \"the id of the file owner\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"type\": \"operationCreated\" } "},{"title":"Operation updated","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#operation-updated","content":"Event for when an operation has updated. This event can be useful for identifying changes to operations. Alerts for this event are in the following format: Copy { \"operationId\": \"the id of the operation uploaded\", \"leafUserId\": \"the id of the file owner\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"type\": \"operationUpdated\" } "},{"title":"Operation Processing Finished","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#operation-processing-finished","content":"Event when a Field Operation has successfully finished. This event could be useful for fetching the resources of an operation such as images, summary and units. Alerts for this event are in the following format: Copy { \"operationId\": \"the id of the operation uploaded\", \"leafUserId\": \"the id of the file owner\", \"type\": \"operationProcessingFinished\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" } "},{"title":"Crop Monitoring Events","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#crop-monitoring-events","content":""},{"title":"New Satellite Image","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#new-satellite-image","content":"This event happens when we finish processing a new satellite image for a monitored field. It can be useful for searching only the new and latest images available in our API. Alerts for this event are in the following format: Copy { \"externalId\": \"the external id of the monitored field\", \"processId\": \"the id of the process containing new images\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"type\": \"newSatelliteImage\" } "},{"title":"Satellite Subscription Failed","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#satellite-subscription-failed","content":"This event will be triggered whenever there is a failure in the field subscription on the provider side, usually unmapped failures. Alerts for this event are in the following format: Copy { \"fieldId\": \"the external id of the monitored field\", \"message\": \"error message\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"type\": \"satelliteSubscriptionFailed\" } "},{"title":"Irrigation Events","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#irrigation-events","content":""},{"title":"New Irrigation activity","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#new-irrigation-activity","content":"This event happens when a new as-applied irrigation data is available from the supported providers. Alerts for this event are in the following format: Copy { \"irrigationId\": \"The ID of the as-applied irrigation activity\", \"leafUserId\": \"the leaf user id\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"type\": \"newIrrigationActivity\" } "},{"title":"New Field Irrigation activity","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#new-field-irrigation-activity","content":"This event happens when a new irrigation data is available for a field. Alerts for this event are in the following format: Copy { \"fieldIrrigationId\": \"The ID of the irrigation activity for the given field\", \"fieldId\": \"the field boundary ID\", \"leafUserId\": \"the leaf user id\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"type\": \"newFieldIrrigationActivity\" } "},{"title":"Assets (Beta) Events","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#assets-beta-events","content":""},{"title":"New Machine","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#new-machine","content":"This event happens when a new machine is created, either from operations files, or from provider data sync, or created by the user. Alerts for this event are in the following format: Copy { \"type\": \"machineCreated\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"machineId\": \"the id of the new machine\", \"leafUserId\": \"the id of the file owner\" } "},{"title":"Updated Machine","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#updated-machine","content":"This event happens when a machine is updated, either from operations files, or from provider data sync, or by the user. Alerts for this event are in the following format: Copy { \"type\": \"machineUpdated\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"machineId\": \"the id of the machine uploaded\", \"leafUserId\": \"the id of the file owner\" } "},{"title":"Deleted Machine","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#deleted-machine","content":"This event happens when a machine is deleted by the user. Alerts for this event are in the following format: Copy { \"type\": \"machineDeleted\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"machineId\": \"the id of the machine deleted\", \"leafUserId\": \"the id of the file owner\" } "},{"title":"New Implement","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#new-implement","content":"This event happens when a new implement is created from provider data sync. Alerts for this event are in the following format: Copy { \"type\": \"implementCreated\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"implementId\": \"the id of the new implement\", \"leafUserId\": \"the id of the leaf user owner\" } "},{"title":"Updated Implement","type":1,"pageTitle":"List of Events","url":"docs/alerts_events#updated-implement","content":"This event happens when a implement is updated from provider data sync. Alerts for this event are in the following format: Copy { \"type\": \"implementUpdated\", \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"implementId\": \"the id of the implement uploaded\", \"leafUserId\": \"the id of the leaf user owner\" } "},{"title":"Beta Features Overview","type":0,"sectionRef":"#","url":"docs/beta_features_overview","content":"","keywords":""},{"title":"Machines","type":1,"pageTitle":"Beta Features Overview","url":"docs/beta_features_overview#machines","content":"This product fetches and stores machine data such as serial number, fuel consumption and start/stop time from providers. Currently, we are obtaining data from the following providers: CNHIJohnDeereStara Implement Data Copy Implement Data is only available for customers with John Deere credentials  "},{"title":"Prescriptions","type":1,"pageTitle":"Beta Features Overview","url":"docs/beta_features_overview#prescriptions","content":"What are prescriptions in agriculture? Prescriptions are usually used to apply inputs at variable rates across a field, applying only the amount needed for each area. For example, a prescription could be based on soil sample results or crop monitoring data, and instructs a machine where to best distribute lime, potassium or other products that can improve soil quality or crop health. Leaf helps organize the data flow for prescriptions. Our supported providers are: ClimateFieldViewJohn DeereRaven SlingshotCNHI Note: The prescription should be included as a zip file containing a valid shapefile with least three file extentions (shp, dbf and shx) with the same naming. "},{"title":"Layers","type":1,"pageTitle":"Beta Features Overview","url":"docs/beta_features_overview#layers","content":"You can now get layers (e.g. tassel count, stand count, NVDI, and RGB) via Leaf’s Sentera integration. Layers are used to display crop monitoring information geospatially on a farm map so that any variance in a crop can be visualized, usually at a field level. Our supported providers are: Sentera "},{"title":"Input","type":1,"pageTitle":"Beta Features Overview","url":"docs/beta_features_overview#input","content":"This resource will search, in the operation's files, varieties of harvested/planted crops and applied products and store this data. For products, data from Agrian and CDMS will also be made available globally, so that all customers can access it. "},{"title":"Beta > Assets Endpoints","type":0,"sectionRef":"#","url":"docs/beta_assets_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Beta > Assets Endpoints","url":"docs/beta_assets_endpoints#about","content":"All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/beta/api See below the REST resources and their endpoints available in this service. "},{"title":"Assets (BETA)","type":1,"pageTitle":"Beta > Assets Endpoints","url":"docs/beta_assets_endpoints#assets-beta","content":"This feature has the following endpoints available: Description\tEndpointsGet all machines\tGET /users/{leafUserId}/machines Get a machine\tGET /users/{leafUserId}/machines/{machineId} Get machine files\tGET /users/{leafUserId}/machines/{machineId}/files Create a machine\tPOST /users/{leafUserId}/machines Update a machine\tPATCH /users/{leafUserId}/machines/{machineId} Delete a machine\tDELETE /users/{leafUserId}/machines/{machineId} Get all implements\tGET /users/{leafUserId}/implements Get an implement\tGET /users/{leafUserId}/implements/{implementId} Get all operators\tGET /users/{leafUserId}/operators Get an operator\tGET /users/{leafUserId}/operators/{operatorId} "},{"title":"Get all machines","type":1,"pageTitle":"Beta > Assets Endpoints","url":"docs/beta_assets_endpoints#get-all-machines","content":" GET /users/{leafUserId}/machines Get the list of machines that are related to a given LeafUserId. Some fields can be sent as query parameters to filter the machines, such as: Parameter (to filter by)\tValuesname\tmachine name provider\tJohnDeere, Stara and CNHI providerOrganizationId\tprovider side organization id serialNumber\tmachine serial number originType\tspecify the origin of the machine, must be either USER_CREATED, FILE_POOLED or PROVIDER_POOLED createdTime\tmust match exactly the time of the record creation, ISO 8601 beforeCreatedTime\tfilters for records created before the datetime, ISO 8601 afterCreatedTime\tfilters for records created after the datetime, ISO 8601 vin\tfilters machines by Vehicle Identification Number You can also pass some parameters used exclusively for paging through results. They are: page, an integer specifying the page being fetched (default is 0)size, an integer specifying the size of the page (max is 100)sort, the sorting order of the results; can be multi-value, where the first value to be passed will have preference in ordering over the next ones; you can also specify the order as asc or desc with asc being the default. Example: id, desc Valid values for sorting are: id, leafUserId, name, provider, providerOrganizationId, providerMachineId, serialNumber, vin, model, make, category and modelYear the default value for page size is 20 If the parameters page and size are not set, the endpoint will return 20 results. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/api/users/{leafUserId}/machines' Response# Copy [ { \"id\": \"e89b1861-bdbb-49b9-8e11-74840f7e1ea8\", \"leafUserId\": \"faa6691a-7bf7-49c2-8934-b5b4c823aef8\", \"name\": \"TestName\", \"provider\": \"Leaf\", \"providerMachineId\": \"08790ae9-d451-4158-9920-09d1ab1ba5e6\", \"providerOrganizationId\": \"123456\", \"originType\": \"PROVIDER_POOLED\", \"createdTime\": \"2022-02-22T20:06:25.411Z\", \"serialNumber\": \"123456\", \"vin\": \"1234567890ABC\", \"model\": \"ModelName\", \"make\": \"MakerOfMachine\", \"category\": \"Sprayer\", \"modelYear\": 2000 }, { \"id\": \"82725746-3150-490d-9f3f-a47151ac0669\", \"leafUserId\": \"325f5ac0-6c57-4b4a-bdea-490ccddb06c4\", \"name\": \"nameTest\", \"provider\": \"Leaf\", \"providerMachineId\": \"75f362b4-8f61-46f9-905b-a357fb239930\", \"providerOrganizationId\": \"654321\", \"originType\": \"FILE_POOLED\", \"createdTime\": \"2022-02-22T20:06:25.411Z\", \"serialNumber\": \"123456\", \"vin\": \"1234567890ABC\", \"model\": \"ModelName\", \"make\": \"MakerOfMachine\", \"category\": \"Harvester\", \"modelYear\": 2020 }, .... ] "},{"title":"Get a machine","type":1,"pageTitle":"Beta > Assets Endpoints","url":"docs/beta_assets_endpoints#get-a-machine","content":" GET /users/{leafUserId}/machines/{machineId} Get the details of a given machine by its id. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/api/users/{leafUserId}/machines/{machineId}' Response# Copy { \"id\": \"UUID\", \"leafUserId\": \"UUID\", \"name\": \"str\", \"provider\": null, \"providerMachineId\": null, \"providerOrganizationId\": null, \"originType\": \"PROVIDER_POOLED\", \"createdTime\": \"2022-02-22T20:06:25.411Z\", \"serialNumber\": \"123456\", \"vin\": \"1234567890ABC\", \"model\": \"ModelName\", \"make\": \"MakerOfMachine\", \"category\": \"Sprayer\", \"modelYear\": 2000 } "},{"title":"Get machine files","type":1,"pageTitle":"Beta > Assets Endpoints","url":"docs/beta_assets_endpoints#get-machine-files","content":" GET /users/{leafUserId}/machines/{machineId}/files Get the details of machine operations files given a machine id. Some fields can be sent as query parameters to filter the machine files, such as: Parameter (to filter by)\tValuesleafFileId\tUUID originType\tspecify the origin of the machine, must be either USER_CREATED, FILE_POOLED or PROVIDER_POOLED createdTime\tan ISO 8601 specifying the operation exact created time beforeCreatedTime\tfilters for records created before the datetime, ISO 8601 afterCreatedTime\tfilters for records created after the datetime, ISO 8601 startTime\tmust match exactly the time of the start of the operation, ISO 8601 endTime\tmust match exactly the time of the end of the operation, ISO 8601 beforeStartTime\tan ISO 8601, returns all operations that started before the specified time afterStartTime\tan ISO 8601, returns all operations that started after the specified time beforeEndTime\tan ISO 8601, returns all operations that ended before the specified time afterEndTime\tan ISO 8601, returns all operations that ended after the specified time distanceValue\ta double value for the distance greaterThanDistanceValue\ta double value for the distance, returns all operations that have a distance value greater than the specified distance lessThanDistanceValue\ta double value for the distance, returns all operations that have a distance value lesser than the specified distance distanceUnit\tmust be \"Mile\", \"mile\", \"Feet\" or \"ft\" You can also pass some parameters used exclusively for paging through results. They are: page, an integer specifying the page being fetched (default is 0)size, an integer specifying the size of the page (max is 100)sort, the sorting order of the results; can be multi-value, where the first value to be passed will have preference in ordering over the next ones; you can also specify the order as asc or desc with asc being the default. Example: id, desc Valid values for sorting are: id, leafUserId, machineId, startTime, endTime, createdTime, leafFileId Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/api/users/{leafUserId}/machines/{machineId}/files' Response# Copy [ { \"id\": \"e7916d05-97ae-404a-a467-e2512c202a2f\", \"leafFileId\": \"e0e18a6f-4f88-4801-96e2-f39143f260e1\", \"machineId\": \"98b244fc-7b2d-4acf-a51a-58d20ae27355\", \"startTime\": \"2022-02-22T20:06:25.411Z\", \"endTime\": \"2022-02-22T20:07:25.411Z\", \"distance\": { \"value\": 4152.255, \"unit\": \"ft\" }, \"fuelConsumption\": { \"value\": 28.89, \"unit\": \"US gal\" } }, { \"id\": \"UUID\", \"leafFileId\": \"UUID\", \"machineId\": \"UUID\", \"startTime\": \"YYYY-mm-ddThh:mm:ssZ\", \"endTime\": \"YYYY-mm-ddThh:mm:ssZ\", \"distance\": { \"value\": 5075.145, \"unit\": \"ft\" }, \"fuelConsumption\": { \"value\": 25.55, \"unit\": \"US gal\" } } ] "},{"title":"Create a machine","type":1,"pageTitle":"Beta > Assets Endpoints","url":"docs/beta_assets_endpoints#create-a-machine","content":" POST /users/{leafUserId}/machines Creates a machine for a specific LeafUser. Request body# Copy { \"name\": \"nameTest\", \"serialNumber\": \"123456\", \"vin\": \"1234567890ABC\", \"model\": \"ModelName\", \"make\": \"MakerOfMachine\", \"category\": \"Harvester\", \"modelYear\": 2020 } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"name\": \"str\"}' \\ 'https://api.withleaf.io/services/beta/api/users/{leafUserId}/machines' Response# Copy { \"id\": \"d5efe8a1-98be-40db-b2b2-2da332e8f69c\", \"name\": \"nameTest\", \"provider\": \"Leaf\", \"providerMachineId\": \"24de86ff-e6f0-4f8f-b429-0571c30a7ddf\", \"providerOrganizationId\": \"654321\", \"leafUserId\": \"9e081c9d-6185-49e1-8df7-7788d6aa1211\", \"originType\": \"USER_CREATED\", \"createdTime\": \"2023-06-12T17:38:09.148568906Z\", \"createdAt\": \"2023-06-12T17:38:09.148568906Z\", \"serialNumber\": \"123456\", \"vin\": \"1234567890ABC\", \"model\": \"ModelName\", \"make\": \"MakerOfMachine\", \"category\": \"Harvester\", \"modelYear\": 2020 } "},{"title":"Update a machine","type":1,"pageTitle":"Beta > Assets Endpoints","url":"docs/beta_assets_endpoints#update-a-machine","content":" PATCH /users/{leafUserId}/machines/{machineId} Update a machine for a specific LeafUser. Only machines created by the user can be updated Machine data obtained from providers cannot be updated Request body# Copy { \"name\": \"updatedName\", \"serialNumber\": \"000123\", \"vin\": \"1234567890EFR\", \"model\": \"ModelNameUpdated\", \"make\": \"MakerOfMachineUpdated\", \"category\": \"Planted\", \"modelYear\": 2021 } Request examples# cURLPythonJavaScript Copy curl -X PATCH \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"name\": \"str\"}' \\ 'https://api.withleaf.io/services/beta/api/users/{leafUserId}/machines/{machineId}' Response# Copy { \"id\": \"d5efe8a1-98be-40db-b2b2-2da332e8f69c\", \"name\": \"updatedName\", \"provider\": \"Leaf\", \"providerMachineId\": \"24de86ff-e6f0-4f8f-b429-0571c30a7ddf\", \"providerOrganizationId\": \"654321\", \"leafUserId\": \"9e081c9d-6185-49e1-8df7-7788d6aa1211\", \"originType\": \"USER_CREATED\", \"createdTime\": \"2023-06-12T17:38:09.148568906Z\", \"createdAt\": \"2023-06-12T17:38:09.148568906Z\", \"serialNumber\": \"updatedName\", \"vin\": \"1234567890EFR\", \"model\": \"ModelNameUpdated\", \"make\": \"MakerOfMachineUpdated\", \"category\": \"Planted\", \"modelYear\": 2021 } "},{"title":"Delete a machine","type":1,"pageTitle":"Beta > Assets Endpoints","url":"docs/beta_assets_endpoints#delete-a-machine","content":" DELETE /users/{leafUserId}/machines/{machineId} Delete a machine data Only machines created by the user can be Deleted Machine data obtained from providers cannot be deleted Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/api/users/{leafUserId}/machines/{machineId}' "},{"title":"Get all implements","type":1,"pageTitle":"Beta > Assets Endpoints","url":"docs/beta_assets_endpoints#get-all-implements","content":" GET /users/{leafUserId}/implements Get all the implements information based on your leafUserId. Currently, John Deere and Trimble implements are listed. Parameter (to filter by)\tValuesleafUserId\tuuid of one of your users provider\tJohnDeere or Trimble providerImplementId\tprovider side implement id providerOrganizationId\tprovider side organization id createdTime\tISO 8601 date. Returns operations from the createdTime onward updatedTime\tISO 8601 date. Returns operations from the updatedTime onward name\timplement name You can also pass some parameters used exclusively for paging through results. They are: page, an integer specifying the page being fetched (default is 0)size, an integer specifying the size of the page (max is 100)sort, the sorting order of the results; can be multi-value, where the first value to be passed will have preference in ordering over the next ones; you can also specify the order as asc or desc with asc being the default. Example: id, desc Valid values for sorting are: id, leafUserId, name, provider, providerOrganizationId, providerImplementId, serialNumber, model, make, category. the default value for page size is 20 If the parameters page and size are not set, the endpoint will return 20 results. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/api/users/{leafUserId}/implements' Response# Copy [ { \"id\": \"38d313fc-e4ce-442b-9147-f469b30aedab\", \"name\": \"c3po_implement\", \"provider\": \"JohnDeere\", \"providerImplementId\": \"110237\", \"providerOrganizationId\": \"296264\", \"leafUserId\": \"mbba54fb-3710-4f7d-9aaf-703107930193\", \"originType\": \"PROVIDER_POOLED\", \"serialNumber\": \"00000\", \"model\": \"StMax150\", \"make\": \"JOHN DEERE\", \"category\": \"Cotton Harvester Implement\" }, ... ] "},{"title":"Get an implement","type":1,"pageTitle":"Beta > Assets Endpoints","url":"docs/beta_assets_endpoints#get-an-implement","content":" GET /users/{leafUserId}/implements/{implementId} Get the details of a given implement by its id. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/api/users/{leafUserId}/implements/{implementId}' Response# Copy { \"id\": \"38d313fc-e4ce-442b-9147-f469b30aedab\", \"name\": \"c3po_implement\", \"provider\": \"JohnDeere\", \"providerImplementId\": \"110237\", \"providerOrganizationId\": \"296264\", \"leafUserId\": \"mbba54fb-3710-4f7d-9aaf-703107930193\", \"originType\": \"PROVIDER_POOLED\", \"serialNumber\": \"00000\", \"model\": \"StMax150\", \"make\": \"JOHN DEERE\", \"category\": \"Cotton Harvester Implement\" } "},{"title":"Get all operators","type":1,"pageTitle":"Beta > Assets Endpoints","url":"docs/beta_assets_endpoints#get-all-operators","content":" GET /users/{leafUserId}/operators Get all the operators information based on your leafUserId. Currently, John Deere operators are listed. You can also pass some parameters used exclusively for paging through results. They are: page, an integer specifying the page being fetched (default is 0)size, an integer specifying the size of the page (max is 100) the default value for page size is 20 If the parameters page and size are not set, the endpoint will return 20 results. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/api/users/{leafUserId}/operators' Response# Copy [ { \"id\": \"aa8c917bc-7e9b-47bc-99b8-4a0df818ab07\", \"name\": \"Brian O.\", \"provider\": \"JohnDeere\", \"providerOperatorId\": \"bbd3a3e8-5ac3-4ab8-4619-d582da4568cc\", \"providerOrganizationId\": \"9999\", \"originType\": \"PROVIDER_POOLED\", \"license\": null, \"updatedTime\": \"2023-10-10T10:10:10.000Z\", \"status\": \"ACTIVE\" }, ... ] "},{"title":"Get an operator","type":1,"pageTitle":"Beta > Assets Endpoints","url":"docs/beta_assets_endpoints#get-an-operator","content":" GET /users/{leafUserId}/operators/{operatorId} Get the details of a given operator by its id. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/api/users/{leafUserId}/operators/{operatorId}' Response# Copy { \"id\": \"aa8c917bc-7e9b-47bc-99b8-4a0df818ab07\", \"name\": \"Brian O.\", \"provider\": \"JohnDeere\", \"providerOperatorId\": \"bbd3a3e8-5ac3-4ab8-4619-d582da4568cc\", \"providerOrganizationId\": \"9999\", \"originType\": \"PROVIDER_POOLED\", \"license\": null, \"updatedTime\": \"2023-10-10T10:10:10.000Z\", \"status\": \"ACTIVE\" } "},{"title":"Beta > Layers Endpoints","type":0,"sectionRef":"#","url":"docs/beta_layers_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Beta > Layers Endpoints","url":"docs/beta_layers_endpoints#about","content":"You can now get layers (tassel count, stand count, NVDI, and RGB) through the Sentera integration. Please make sure to follow the Sentera integratation steps before getting layers. All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/beta/api See below the REST resources and their endpoints available in this service. Description\tEndpointsGet all the layers for a Leaf User\tGET /users/{leafUserId}/layers Upload a layer to Climate FieldView\tPOST /users/{leafUserId}/layers/climateFieldView "},{"title":"Layers (BETA)","type":1,"pageTitle":"Beta > Layers Endpoints","url":"docs/beta_layers_endpoints#layers-beta","content":""},{"title":"Get all the layers for a Leaf User","type":1,"pageTitle":"Beta > Layers Endpoints","url":"docs/beta_layers_endpoints#get-all-the-layers-for-a-leaf-user","content":" GET /users/{leafUserId}/layers Gets a paged list of layers that belong for a Leaf User. Parameter (to filter by)\tValuestype\tTASSEL_COUNT, STAND_COUNT, NVDI, and RGB You can also pass some parameters used exclusively for paging through results. They are: page, an integer specifying the page being fetched (default is 0)size, an integer specifying the size of the page (max is 100) the default value for page size is 20 If the parameters page and size are not set, the endpoint will return 20 results. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/api/users/{leafUserId}/layers' Response# Copy [ { \"id\": \"96a098e0-f1d0-47e8-968d-9d55d54da114\", \"leafUserId\": \"055c4d61-b1e2-4fa9-873c-23433a11c271\", \"apiOwnerUsername\": \"fabyan\", \"type\": \"RGB\", \"origin\": \"PROVIDER_POOLED\", \"provider\": \"Sentera\", \"providerLayerId\": \"vnoyi6a_FI_edovSouthernM_CV_prod_82f9b3d6_211018_151052\", \"providerFieldId\": \"ycof8zg_AS_edovSouthernM_CV_prod_a025df2d_211015_200456\", \"name\": \"QuickTile RGB\", \"size\": 159135298, \"md5\": \"7ff746c6f5f06fc25b46420328402bed\", \"contentS3\": \"URL\", \"downloadContentS3\": \"URL\", \"createdTime\": \"2022-02-16T21:40:20.257Z\", \"leafFieldIds\": [ \"f43ca7cc-c73a-43b9-8685-070b03876475\", \"edcf7b8b-913e-4e53-a0b5-91aa16699dfc\" ] }, { \"id\": \"4d9b0139-f528-43ab-8bc9-a31043fa87d2\", \"leafUserId\": \"055c4d61-b1e2-4fa9-873c-23433a11c271\", \"apiOwnerUsername\": \"fabyan\", \"type\": \"RGB\", \"origin\": \"PROVIDER_POOLED\", \"provider\": \"Sentera\", \"providerLayerId\": \"<UUID defined by the provider>\", \"providerFieldId\": \"<UUID defined by the provider>\", \"name\": \"QuickTile RGB\", \"size\": 121910506, \"md5\": \"759d1f68962e30ea78f40025c8b64972\", \"contentS3\": \"URL\", \"downloadContentS3\": \"URL\", \"createdTime\": \"2022-02-16T21:40:35.341Z\", \"leafFieldIds\": [ \"f43ca7cc-c73a-43b9-8685-070b03876475\", \"edcf7b8b-913e-4e53-a0b5-91aa16699dfc\" ] }, .... ] "},{"title":"Upload a layer to Climate FieldView","type":1,"pageTitle":"Beta > Layers Endpoints","url":"docs/beta_layers_endpoints#upload-a-layer-to-climate-fieldview","content":" POST /users/{leafUserId}/layers/climateFieldView Send a layer file to Climate FieldView. Parameter\tValuesuploadType\tRGB Currently, only true color image (RGB) files are supported and must meet the following criteria required by Climate: The image needs to be a multi band GeoTIFF with 24-bit composite values (must contain 3 bands in the order Red, Green, Blue)The Coordinate Reference System (CRS) must be UTM with WGS84 datumThe following metadata (GDAL_METADATA tag) entries are required to be embedded in the GeoTIFF: acquisitionStartDate - ISO8601 dateacquisitionEndDate - ISO8601 dateisCalibrated - boolean Although Climate FieldView supports files up to 500MB, at this time, we only accept files up to 5MB. Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -F 'file=rgb.tif' \\ 'https://api.withleaf.io/services/beta/api/users/{leafUserId}/layers/climateFieldView?' \\ 'uploadType=RGB' Response# Copy { \"id\": \"86fb8bea-1670-48ea-a85d-fbdf6feefb35\", \"name\": \"LayerName\" } info Uploaded layers are not stored on Leaf side and are only available for use directly in Climate FieldView "},{"title":"Beta > Machines Endpoints","type":0,"sectionRef":"#","url":"docs/beta_machines_endpoints","content":"Documentation update! We are updating our documentation and this page was moved to here.","keywords":""},{"title":"Beta > Prescriptions Endpoints","type":0,"sectionRef":"#","url":"docs/beta_prescriptions_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Beta > Prescriptions Endpoints","url":"docs/beta_prescriptions_endpoints#about","content":"All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/beta/prescription/api See below the REST resources and their endpoints available in this service. "},{"title":"Prescription (BETA)","type":1,"pageTitle":"Beta > Prescriptions Endpoints","url":"docs/beta_prescriptions_endpoints#prescription-beta","content":"This feature has the following endpoints available: Description\tEndpointsUpload prescription to Raven Slingshot\tPOST /users/{leafUserId}/ravenSlingshot List prescriptions from Raven Slingshot\tGET /users/{leafUserId}/ravenSlingshot Lists prescriptions from John Deere\tGET /users/{leafUserId}/johnDeere Upload prescription to John Deere\tPOST /users/{leafUserId}/johnDeere Download prescription from John Deere\tGET /users/{leafUserId}/johnDeere/download Upload prescription to CNHi\tPOST /users/{leafUserId}/cnhi List prescriptions from CNHi\tGET /users/{leafUserId}/cnhi Upload prescription to Climate FieldView\tPOST /users/{leafUserId}/climateFieldView Upload prescription to Trimble\tPOST /users/{leafUserId}/trimble Upload prescription to AgLeader\tPOST /users/{leafUserId}/agleader "},{"title":"Upload prescription to Raven Slingshot","type":1,"pageTitle":"Beta > Prescriptions Endpoints","url":"docs/beta_prescriptions_endpoints#upload-prescription-to-raven-slingshot","content":" POST /users/{leafUserId}/ravenSlingshot Upload a prescription using the Raven Slingshot credentials of the LeafUserId. The file to be uploaded needs to be .zip and contain one of each of the following file extension: shp, dbf, shx; and all files must have the same name. The zip file cannot contain subfolders. Example:# A zip file named “prescription_rx_map”, containing the following files: prescription_rx_map.shpprescription_rx_map.dbfprescription_rx_map.shx Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -F 'file=prescription_rx_map.zip' \\ 'https://api.withleaf.io/services/beta/prescription/api/users/{leafUserId}/ravenSlingshot' Response# Copy { \"id\": \"str\", \"name\": \"str\" } "},{"title":"List prescriptions from Raven Slingshot","type":1,"pageTitle":"Beta > Prescriptions Endpoints","url":"docs/beta_prescriptions_endpoints#list-prescriptions-from-raven-slingshot","content":" GET /users/{leafUserId}/ravenSlingshot List the existing prescriptions available in the provider. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/prescription/api/users/{leafUserId}/ravenSlingshot' Response# Copy [ { \"id\": \"str\", \"name\": \"str\" }, { \"id\": \"str\", \"name\": \"str\" } ] "},{"title":"Upload prescription to John Deere","type":1,"pageTitle":"Beta > Prescriptions Endpoints","url":"docs/beta_prescriptions_endpoints#upload-prescription-to-john-deere","content":" POST /users/{leafUserId}/johnDeere Upload a prescription using the John Deere credentials of the LeafUserId. There is a required request parameter called organizationId for this endpoint to work. This property should be the id of the organization at JohnDeere. The file to be uploaded needs to be .zip and have a folder called \"Rx\" containing one of each of the following file extension: shp, dbf, shx; and all files must have the same name. The zip file cannot contain subfolders. Example:# A .zip file named “prescription_rx_map”, having a parent folder called \"Rx\", containing the following files: Rx/ prescription_rx_map.shpprescription_rx_map.dbfprescription_rx_map.shx Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -F 'file=prescription_rx_map.zip' \\ 'https://api.withleaf.io/services/beta/prescription/api/users/{leafUserId}/johnDeere?organizationId={organizationId}' Response# Copy { \"id\": \"str\", \"name\": \"str\" } "},{"title":"List prescriptions from John Deere","type":1,"pageTitle":"Beta > Prescriptions Endpoints","url":"docs/beta_prescriptions_endpoints#list-prescriptions-from-john-deere","content":" GET /users/{leafUserId}/johnDeere List the existing prescriptions available in the provider. There is a required request parameter called organizationId for this endpoint to work. This property should be the id of the organization at JohnDeere. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/prescription/api/users/{leafUserId}/johnDeere?organizationId={organizationId}' Response# Copy [ { \"id\": \"str\", \"name\": \"str\" }, { \"id\": \"str\", \"name\": \"str\" } ] "},{"title":"Download prescription from John Deere","type":1,"pageTitle":"Beta > Prescriptions Endpoints","url":"docs/beta_prescriptions_endpoints#download-prescription-from-john-deere","content":" GET /users/{leafUserId}/johnDeere/download Download a prescription related to a file ID using the LeafUserId's John Deere credentials. This file ID is relative to the one available from the John Deere side. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/prescription/api/users/{leafUserId}/johnDeere/download?fileId={fileId}' Response# Copy { \"fileUrl\": \"url_to_download\" } "},{"title":"Upload prescription to CNHi","type":1,"pageTitle":"Beta > Prescriptions Endpoints","url":"docs/beta_prescriptions_endpoints#upload-prescription-to-cnhi","content":" POST /users/{leafUserId}/cnhi Upload a prescription using the CNHi credentials of the LeafUserId.  You can get the company Id from the grower endpoints using the property providerOrganizationId.  The file to be uploaded must be a .zip and contain each of the following file extension: shp, dbf and shx. All files must have the same name. The zip file cannot contain subfolders. Example:# A .zip file named “prescription_map” containing the following files: prescription_map.shpprescription_map.dbfprescription_map.shx Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -F 'file=prescription_map.zip' \\ 'https://api.withleaf.io/services/beta/prescription/api/users/{leafUserId}/cnhi?companyId={companyId}' Response# Copy { \"id\": \"str\", \"name\": \"str\" } "},{"title":"List prescriptions from CNHi","type":1,"pageTitle":"Beta > Prescriptions Endpoints","url":"docs/beta_prescriptions_endpoints#list-prescriptions-from-cnhi","content":" GET /users/{leafUserId}/cnhi List the existing prescriptions available in the provider.  You can get the company Id from the grower endpoints using the property providerOrganizationId.  Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/prescription/api/users/{leafUserId}/cnhi?companyId={companyId}' Response# Copy [ { \"id\": \"str\", \"name\": \"str\" }, { \"id\": \"str\", \"name\": \"str\" } ] "},{"title":"Upload prescription to Climate FieldView","type":1,"pageTitle":"Beta > Prescriptions Endpoints","url":"docs/beta_prescriptions_endpoints#upload-prescription-to-climate-fieldview","content":" POST /users/{leafUserId}/climateFieldView Upload a prescription using the Climate FieldView credentials of the LeafUserId. The file to be uploaded needs to be .zip and contain one of each of the following file extension: shp, dbf, shx; and all files must have the same name. The zip file cannot contain subfolders. Example:# A zip file named “prescription_rx_map”, containing the following files: prescription_rx_map.shpprescription_rx_map.dbfprescription_rx_map.shx Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -F 'file=prescription_rx_map.zip' \\ 'https://api.withleaf.io/services/beta/prescription/api/users/{leafUserId}/climateFieldView' Response# Copy { \"id\": \"str\", \"name\": \"str\" } "},{"title":"Upload prescription to Trimble","type":1,"pageTitle":"Beta > Prescriptions Endpoints","url":"docs/beta_prescriptions_endpoints#upload-prescription-to-trimble","content":" POST /users/{leafUserId}/trimble Upload a prescription using the Trimble credentials of the LeafUserId. The file to be uploaded needs to be .zip and contain one of each of the following file extension: shp, dbf, shx; and all files must have the same name. The zip file cannot contain subfolders. Also, in Raven's case the user must fill the rateAttribute and rateUnit as required parameters within the URL. An optional parameter is the fileName. The rateAttribute must contain the name of the column from the Shapefile. The rateUnit must contain one the values in the table below rateUnitgal/ac l/ha lbs/ac ton/ac kg/ha t/ha kS/ac kS/ha lbs(N)/ac kg(N)/ha S/ha S/ha Example:# A zip file named “prescription_rx_map”, containing the following files: prescription_rx_map.shpprescription_rx_map.dbfprescription_rx_map.shx Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -F 'file=prescription_rx_map.zip' \\ 'https://api.withleaf.io/services/beta/prescription/api/users/{leafUserId}/trimble?rateAttribute={}&rateUnit={}' Response# Copy { \"id\": \"str\", \"name\": \"str\" } "},{"title":"Upload prescription to AgLeader","type":1,"pageTitle":"Beta > Prescriptions Endpoints","url":"docs/beta_prescriptions_endpoints#upload-prescription-to-agleader","content":" POST /users/{leafUserId}/agleader Upload a prescription using the AgLeader credentials of the LeafUserId. The file to be uploaded needs to be .zip and contain one of each of the following file extension: shp, dbf, shx; and all files must have the same name. The zip file cannot contain subfolders. Example:# A zip file named “prescription_rx_map”, containing the following files: prescription_rx_map.shpprescription_rx_map.dbfprescription_rx_map.shx Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -F 'file=prescription_rx_map.zip' \\ 'https://api.withleaf.io/services/beta/prescription/api/users/{leafUserId}/agleader' Response# Copy { \"id\": \"str\", \"name\": \"str\" } "},{"title":"Billing > Usage metrics endpoints","type":0,"sectionRef":"#","url":"docs/billing_usage_metrics_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Billing > Usage metrics endpoints","url":"docs/billing_usage_metrics_endpoints#about","content":"All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/billingapplication/api See below the REST resources and their endpoints available in this service. "},{"title":"Contract Products","type":1,"pageTitle":"Billing > Usage metrics endpoints","url":"docs/billing_usage_metrics_endpoints#contract-products","content":"AUDIT_FIELDS_BOUNDARY Current active field boundary area, unbounded by sales contract start and end dates. FIELDS_BOUNDARY Field boundary area consumption, including deleted and updated geometries, containing only field boundaries that were created/updated inside the sales contract start and end/renewal date. FIELDS_BOUNDARY_SENTERA Sentera exlusive field boundary area consumption, including deleted and updated geometries, containing only field boundaries that were created/updated inside the sales contract start and end/renewal date. OPERATIONS_FILE Machine operations files area consumption, including deleted geometries, containing only files that were created inside the sales contract start and end/renewal date. OPERATIONS_OPERATION Machine operations area consumption, generated automatically from the intersection of fields boundary and machine operations files geometries, containing only operations that were generated inside the sales contract start and end/renewal date. SATELLITE_PROCESS_PLANET Satellite imagery area consumption of the Planet provider, containing only images processed inside the sales contract start and end/renewal date. SATELLITE_PROCESS_SENTINEL Satellite imagery area consumptioni of the Sentinel provider, containing only images processed inside the sales contract start and end/renewal date. "},{"title":"Area consumption tracking","type":1,"pageTitle":"Billing > Usage metrics endpoints","url":"docs/billing_usage_metrics_endpoints#area-consumption-tracking","content":"This feature has the following endpoints available: Description\tEndpointsList contracts\tGET /billing/contracts Get contract by id\tGET /billing/contracts/{contract_id} Get contract consumption\tGET /billing/contracts/{contract_id}/consumption Get contract consumption range for api owner\tGET /billing/contracts/{contract_id}/consumption/api-owner Get contract consumption range for leaf user\tGET /billing/contracts/{contract_id}/consumption/leaf-user/{leaf_user_id} "},{"title":"List contracts","type":1,"pageTitle":"Billing > Usage metrics endpoints","url":"docs/billing_usage_metrics_endpoints#list-contracts","content":" GET /billing/contracts Returns a list of all contracts available for the authenticated user. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/billingapplication/api/billing/contracts' Response example# Copy [ { \"id\": \"unique id\", \"product\": \"FIELDS_BOUNDARY\", \"startDate\": \"2023-01-01T00:00:00Z\", \"endDate\": \"2024-01-01T00:00:00Z\", \"region\": null, \"quotaInHectares\": 0.0, \"quotaInAcres\": 0.0 }, ... ] "},{"title":"Get contract by id","type":1,"pageTitle":"Billing > Usage metrics endpoints","url":"docs/billing_usage_metrics_endpoints#get-contract-by-id","content":" GET /billing/contracts/{contract_id} Returns details for a specific contract by its ID. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/billingapplication/api/billing/contracts/{contract_id}' Response example# Copy { \"id\": \"unique id\", \"product\": \"FIELDS_BOUNDARY\", \"startDate\": \"2023-01-01T00:00:00Z\", \"endDate\": \"2024-01-01T00:00:00Z\", \"region\": null, \"quotaInHectares\": 0.0, \"quotaInAcres\": 0.0 } "},{"title":"Get contract consumption","type":1,"pageTitle":"Billing > Usage metrics endpoints","url":"docs/billing_usage_metrics_endpoints#get-contract-consumption","content":" GET /billing/contracts/{contract_id}/consumption Gets the consumption metrics for a specific contract. Allows an optional \"timestamp\" query parameter to specify which day to get the data for, if not specified returns current day's data. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/billingapplication/api/billing/contracts/{contract_id}/consumption?timestamp=YYYY-MM-DDT00:00:00.000Z' Request response# Copy { \"areaUnit\": \"Hectare\", \"date\": \"YYYY-MM-DDT00:00:00Z\", \"totalUniqueArea\": 0.32, \"leafUsersAreas\": [ { \"leafUserId\": \"uuid1\", \"totalArea\": 0.26 }, { \"leafUserId\": \"uuid2\", \"totalArea\": 0.15 } ] } "},{"title":"Get contract consumption range for api owner","type":1,"pageTitle":"Billing > Usage metrics endpoints","url":"docs/billing_usage_metrics_endpoints#get-contract-consumption-range-for-api-owner","content":" GET /billing/contracts/{contract_id}/consumption/api-owner Gets consumption metrics for an API owner over a time range, specified by the query parameters \"startTime\" and \"endTime\", ISO format YYYY-MM-DDTT00:00:00.000Z. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/billingapplication/api/billing/contracts/{contract_id}/consumption/api-owner?startTime=YYYY-MM-DDT00:00:00.000Z&endTime=YYYY-MM-DDT00:00:00.000Z' Response example# Copy { \"areaUnit\": \"Hectare\", \"areaPerDay\": [ { \"date\": \"2024-01-02T00:00:00Z\", \"totalArea\": 10.0, \"dailyArea\": 26.0 }, { \"date\": \"2024-01-03T00:00:00Z\", \"totalArea\": 10.0, \"dailyArea\": 0.0 }, ... ] } "},{"title":"Get contract consumption range for leaf user","type":1,"pageTitle":"Billing > Usage metrics endpoints","url":"docs/billing_usage_metrics_endpoints#get-contract-consumption-range-for-leaf-user","content":" GET /billing/contracts/{contract_id}/consumption/leaf-user/{leaf_user_id} Gets consumption metrics for a specific Leaf user over a time range, specified by the query parameters \"startTime\" and \"endTime\", ISO format YYYY-MM-DDTT00:00:00.000Z. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/billingapplication/api/billing/contracts/{contract_id}/consumption/leaf-user/{leaf_user_id}?startTime=YYYY-MM-DDT00:00:00.000Z&endTime=YYYY-MM-DDT00:00:00.000Z' Response example# Copy { \"areaUnit\": \"Hectare\", \"areaPerDay\": [ { \"date\": \"2024-01-02T00:00:00Z\", \"totalArea\": 0.26, \"dailyArea\": 0.26 }, { \"date\": \"2024-01-03T00:00:00Z\", \"totalArea\": 0.26, \"dailyArea\": 0.0 }, ... ] } "},{"title":"Configurations Endpoints","type":0,"sectionRef":"#","url":"docs/configurations_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Configurations Endpoints","url":"docs/configurations_endpoints#about","content":"Here we list all the available endpoints from Leaf's Configuration API. To call them easily, we recommend using Leaf's Postman collection. All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/config/api This service has the following endpoints available: Description\tEndpointsGet API Owner's Configuration\tGET /configs Get Leaf User's Configuration\tGET /configs/{leafUserId} Create Leaf User's Configuration\tPOST /configs/{leafUserId} Update API Owner's Configuration\tPATCH /configs Update Leaf User's Configuration\tPATCH /configs/{leafUserId} Delete Leaf User's Configuration\tDELETE /configs/{leafUserId} "},{"title":"Endpoints","type":1,"pageTitle":"Configurations Endpoints","url":"docs/configurations_endpoints#endpoints","content":""},{"title":"Get API Owner's Configuration","type":1,"pageTitle":"Configurations Endpoints","url":"docs/configurations_endpoints#get-api-owners-configuration","content":" GET /configs Gets the configuration of the API Owner. cURLPythonJavaScript Copy TOKEN=YOUR_TOKEN curl -X GET \\ -H \"Authorization: Bearer ${TOKEN}\" \\ \"https://api.withleaf.io/services/config/api/configs\" Response# A JSON containing the configuration of the API Owner. Copy { \"apiOwnerUsername\": \"api-owner\", \"leafUserId\": \"\", \"operationsImageCreation\": true, \"fieldsAutoSync\": true, \"fieldsMergeIntersection\": 0.01, \"fieldsAttachIntersection\": 0.01 } "},{"title":"Get Leaf User's Configuration","type":1,"pageTitle":"Configurations Endpoints","url":"docs/configurations_endpoints#get-leaf-users-configuration","content":" GET configs/{leafUserId} Gets the configuration of a Leaf User. cURLPythonJavaScript Copy TOKEN=YOUR_TOKEN LEAF_USER_ID=00000000-0000-0000-0000-000000000000 curl -X GET \\ -H \"Authorization: Bearer ${TOKEN}\" \\ \"https://api.withleaf.io/services/config/api/configs/${LEAF_USER_ID}\" Response# A JSON containing the configuration of the Leaf User. Copy { \"apiOwnerUsername\": \"api-owner\", \"leafUserId\": \"00000000-0000-0000-0000-000000000000\", \"operationsImageCreation\": true, \"fieldsAutoSync\": true, \"fieldsMergeIntersection\": 0.01, \"fieldsAttachIntersection\": 0.01, \"fieldsAutoMerge\": true } "},{"title":"Create Leaf User's Configuration","type":1,"pageTitle":"Configurations Endpoints","url":"docs/configurations_endpoints#create-leaf-users-configuration","content":" POST /configs/{leafUserId} Creates the Configuration for the Leaf User leafUserId. A request body must be provided containing the configurations to be set. All entries are optional, any missing configuration will be inherited from the API Owner's Configuration. Request body example: Copy { \"operationsImageCreation\": true, \"fieldsAutoSync\": true } cURLPythonJavaScript Copy TOKEN=YOUR_TOKEN LEAF_USER_ID=00000000-0000-0000-0000-000000000000 curl -X POST \\ -H \"Authorization: Bearer ${TOKEN}\" \\ -H \"Content-Type: application/json\" \\ -d '{ \"operationsImageCreation\": true, \"fieldsAutoSync\": true }' \\ \"https://api.withleaf.io/services/config/api/configs/${LEAF_USER_ID}\" Response# A JSON containing the configuration of the Leaf User. Copy { \"apiOwnerUsername\": \"api-owner\", \"leafUserId\": \"00000000-0000-0000-0000-000000000000\", \"operationsImageCreation\": true, \"fieldsAutoSync\": true, \"fieldsMergeIntersection\": 0.01, \"fieldsAttachIntersection\": 0.01, \"fieldsAutoMerge\": true } "},{"title":"Update API Owner's Configuration","type":1,"pageTitle":"Configurations Endpoints","url":"docs/configurations_endpoints#update-api-owners-configuration","content":" PATCH /configs Updates the specified fields of Configuration for the API Owner. A request body must be provided containing the configurations to be set. All entries are optional. Request body example: Copy { \"operationsImageCreation\": true, \"fieldsAutoSync\": true } cURLPythonJavaScript Copy TOKEN = 'YOUR_TOKEN' curl -X PATCH \\ -H \"Authorization: Bearer ${TOKEN}\" \\ -H \"Content-Type: application/json\" \\ -d '{ \"operationsImageCreation\": true, \"fieldsAutoSync\": true }' \\ 'https://api.withleaf.io/services/config/api/configs' Response# A JSON containing the configuration of the API Owner. Copy { \"apiOwnerUsername\": \"api-owner\", \"leafUserId\": \"\", \"operationsImageCreation\": true, \"fieldsAutoSync\": true, \"fieldsMergeIntersection\": 0.01, \"fieldsAttachIntersection\": 0.01, \"fieldsAutoMerge\": true } "},{"title":"Update Leaf User's Configuration","type":1,"pageTitle":"Configurations Endpoints","url":"docs/configurations_endpoints#update-leaf-users-configuration","content":" PATCH /configs/{leafUserId} Updates the specified fields of Configuration for the Leaf User leafUserId. A resquest body must be provided containing the configurations to be set. All entries are optional. Request body example: Copy { \"operationsImageCreation\": true, \"fieldsAutoSync\": true } cURLPythonJavaScript Copy TOKEN=YOUR_TOKEN LEAF_USER_ID=00000000-0000-0000-0000-000000000000 curl -X PATCH \\ -H \"Authorization: Bearer ${TOKEN}\" \\ -H \"Content-Type: application/json\" \\ -d '{ \"operationsImageCreation\": true, \"fieldsAutoSync\": true }' \\ \"https://api.withleaf.io/services/config/api/configs/${LEAF_USER_ID}\" Response# A JSON containing the configuration of the Leaf User. Copy { \"apiOwnerUsername\": \"api-owner\", \"leafUserId\": \"00000000-0000-0000-0000-000000000000\", \"operationsImageCreation\": true, \"fieldsAutoSync\": true, \"fieldsMergeIntersection\": 0.01, \"fieldsAttachIntersection\": 0.01, \"fieldsAutoMerge\": true } "},{"title":"Delete Leaf User's Configuration","type":1,"pageTitle":"Configurations Endpoints","url":"docs/configurations_endpoints#delete-leaf-users-configuration","content":" DELETE /configs/{leafUserId} Deletes the Configuration from the Leaf User leafUserId. Until a new Configuration is created, the Leaf User will inherit all configurations from the API Owner. cURLPythonJavaScript Copy TOKEN=YOUR_TOKEN LEAF_USER_ID=00000000-0000-0000-0000-000000000000 curl -X DELETE \\ -H \"Authorization: Bearer ${TOKEN}\" \\ \"https://api.withleaf.io/services/config/api/configs/${LEAF_USER_ID}\" "},{"title":"Beta > Input Endpoints","type":0,"sectionRef":"#","url":"docs/beta_input_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Beta > Input Endpoints","url":"docs/beta_input_endpoints#about","content":"All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/beta/api See below the REST resources and their endpoints available in this service. "},{"title":"Products","type":1,"pageTitle":"Beta > Input Endpoints","url":"docs/beta_input_endpoints#products","content":"Endpoints Description\tEndpointsGet all products\tGET /products Get summarized products\tGET /users/{leafUserId}/products/summary Search for products\tGET /products/search Get a product\tGET /products/{id} Get matching products from an operation\tGET /users/{leafUserId}/products/matching/operations/{operationId} Updated product matches\tPATCH /products/matching/operations/{operationId}/matches/{matchId} Get product matches historical\tGET /products/matching/operations/{operationId}/matches/{matchId}/historical "},{"title":"Get all products","type":1,"pageTitle":"Beta > Input Endpoints","url":"docs/beta_input_endpoints#get-all-products","content":" GET /products List of products from providers (for now only for John Deere) in a Leaf User level. This way, on this endpoint the user can search for all products that are available from traditional providers (e.g. John Deere), so here we do not include specific providers such as Agrian and CDMS. Parameter (to filter by)\tValuesleafUserId\tuuid of one of your users provider\tJohnDeere size\tan integer specifying the size of the page (max is 100) page\tan integer specifying the page being fetched (default is 0) sort\tthe sorting order of the results; can be multi-value, where the first value to be passed will take priority over the next values; you can also specify the order as asc or desc with asc being the default. Example: id, desc Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/api/products' Response# Copy [ { \"id\": \"07b3f270-8af8-11ee-b9d1-0242ac120002\", \"name\": \"Propiconazole\", \"registrant\": \"Tide International USA,Inc.\", \"productType\": \"Chemical\", \"labelProvider\": \"JohnDeere\", \"providerId\": \"020c55f6-8af8-11ee-b9d1-0242ac120002\", \"formulationType\": \"DRY\", \"leafUserId\": \"fb6fcda4-8af7-11ee-b9d1-0242ac120002\", \"registration\": \"0084229-00011-AA-0000000\", \"status\": \"ACTIVE\", \"carrier\": true }, .... ] "},{"title":"Get summarized products","type":1,"pageTitle":"Beta > Input Endpoints","url":"docs/beta_input_endpoints#get-summarized-products","content":" GET /users/{leafUserId}/products/summary List of products extracted from machine file. Parameter (to filter by)\tValuesname\tpart of the product name page\tan integer specifying the page being fetched (default is 0) size\tan integer specifying the size of the page (max is 100) sort\tthe sorting order of the results; can be multi-value, where the first value to be passed will take priority over the next values; you can also specify the order as asc or desc with asc being the default. Example: id, desc Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/api/users/{leafUserId}/products/summary' Response# Copy [ { \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\", \"name\": \"Default product\", \"leafUserId\": \"8bbe50a0-992c-11ee-b9d1-0242ac120002\" }, .... ] "},{"title":"Search for products","type":1,"pageTitle":"Beta > Input Endpoints","url":"docs/beta_input_endpoints#search-for-products","content":" GET /products/search Search for products by name, partial values are supported. Agrian and CDMS products are currently available to everyone, and John Deere products from the Operation Center at the Leaf User level. Parameter (to filter by)\tValuesname\tpart of the product name to be searched (required) maxResults\tthe number of results that should be returned (max value is 100). The default is 10 Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/api/products/search' Response# Copy [ { \"id\": \"7d85c556-0ac5-4f0b-b7cc-b35ac559af8f\", \"name\": \"CompostX\", \"registration\": \"00000-00-00000\", \"registrant\": \"Leaf Company, LLC\", \"productType\": \"Dry\", \"physicalState\": \"dry\", \"formulationType\": \"Dry Flowable\", \"labelProvider\": \"CDMS\", \"productPageUrl\": \"https://www.cdms.net/ldat/\", \"labels\": [ { \"name\": \"meE2000.pdf\", \"url\": \"https://www.cdms.net/ldat/meE2000.pdf\" }, .... ], \"activeIngredient\": [ \"Urea\", \"Calcium\", .... ] }, { \"id\": \"81ffe756-1fd0-4d97-b2ec-e33b5232f507\", \"name\": \"CompostY\", \"registration\": \"00000-000\", \"registrant\": \"Agriscience\", \"productType\": \"Dry\", \"physicalState\": \"dry\", \"formulationType\": \"Dry Flowable\", \"labelProvider\": \"AGRIAN\", \"productPageUrl\": \"https://www.agrian.com/searchcenter/demonstration=00000\", \"labels\": [ { \"name\": \"Label - 00-R000\", \"url\": \"https://www.agrian.com/pdfs/new/00000.pdf\" }, .... ], \"activeIngredient\": [ \"Roundup\", \"Glyphosate\", .... ], \"activeIngredients\": [ { \"name\": \"Roundup\", \"value\": \"40\", \"unit\": \"%\" }, { \"name\": \"Glyphosate\", \"value\": \"15\", \"unit\": \"%\" } ] }, { \"id\": \"21f4cb76-07fa-46ca-a8cf-cfbc2f161bdf\", \"name\": \"Product AB\", \"registration\": \"0434785-2911\", \"distributor\": null, \"registrant\": \"Loveland Products, Inc.\", \"productType\": \"Insecticide Miticide\", \"formulationType\": \"Emulsifiable Concentrate OR Emulsion Concentrate\", \"labelProvider\": \"AGRIAN\", \"productPageUrl\": \"https://www.agrian.com/labelcenter/results.cfm?d=0000\", \"labels\": [ { \"name\": \"Label\", \"url\": \"https://www.agrian.com/pdfs/new/00000.pdf\" }, .... ], \"activeIngredient\": [ \"13.1 - Lambda-cyhalothrin\" ], \"leafUserId\": null, \"carrier\": null, \"status\": null, \"providerId\": null, \"physicalState\": \"liquid\", \"density\": { \"value\": \"7.17\", \"unit\": \"lb/ga\" }, \"activeIngredients\": [ { \"name\": \"Lambda-cyhalothrin\", \"value\": \"13.1\", \"unit\": \"%\" } ] }, .... ] "},{"title":"Get a product","type":1,"pageTitle":"Beta > Input Endpoints","url":"docs/beta_input_endpoints#get-a-product","content":" GET /products/{id} Get a product by its id. The data is obtained from different product databases. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/api/products/{id}' Response# Copy { \"id\": \"81ffe756-1fd0-4d97-b2ec-e33b5232f507\", \"name\": \"GameOn\", \"registration\": \"62719-724\", \"registrant\": \"Corteva Agriscience\", \"productType\": \"Dry\", \"formulationType\": \"Dry Flowable\", \"labelProvider\": \"AGRIAN\", \"productPageUrl\": \"https://www.agrian.com/labelcenter/results.cfm?d=21666\", \"labels\": [ { \"name\": \" Label - 03-R0718 \", \"url\": \"https://www.agrian.com/pdfs/current/Badge_X2_FungicideBactericide_Label1p.pdf\" }, .... ] } "},{"title":"Get matching products from an operation","type":1,"pageTitle":"Beta > Input Endpoints","url":"docs/beta_input_endpoints#get-matching-products-from-an-operation","content":" GET /products/matching/operations/{operationId} This endpoint can be used as the input validator, getting the standard products that best match the products from a Field Operation. Information such as the registration number and labels can be obtained from this endpoint using the id. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/api/products/matching/operations/{operationId}' Response# Copy [ { \"id\": \"37159c45-4c1f-48e4-aa87-90b34cc6e789\", \"name\": \"ams\", \"productId\": \"e5b91778-0714-4e1f-850c-b458d1bdc7ed\", \"matchDetails\": { \"status\": \"PREDICTED\", \"score\": 14.354036 } }, { \"id\": \"7fb70242-498b-42c1-92c3-a7d2361d2125\", \"name\": \"counter\", \"productId\": \"a85c1d0d-b673-46aa-a3a3-31cb65f57598\", \"matchDetails\": { \"status\": \"VALIDATED\" } }, .... ] "},{"title":"Updated product matches","type":1,"pageTitle":"Beta > Input Endpoints","url":"docs/beta_input_endpoints#updated-product-matches","content":" PATCH /products/matching/operations/{id}/matches/{matchId} Updated Leaf predictions or approves them. Request body# To approve Leaf prediction: Copy { \"status\": \"VALIDATED\" } Or, to change prediction: Copy { \"productId\": \"expectedProductID\" } Request examples# cURLPythonJavaScript Copy curl -X PATCH \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"status\": \"VALIDATED\" }' \\ 'https://api.withleaf.io/services/beta/api/products/matching/operations/{operationId}/matches/{matchId}' Response# Copy [ { \"id\": \"uidd-match-0001\", \"name\": \"Ta35\", \"productId\": \"uidd-prd-1001\", \"matchDetails\": { \"score\": 91, \"status\": \"PREDICTED\" } }, { \"id\": \"uidd-match-0002\", \"name\": \"Talisman\", \"productId\": \"uidd-prd-1003\", \"matchDetails\": { \"status\": \"VALIDATED\" } } ] "},{"title":"Get product matches historical","type":1,"pageTitle":"Beta > Input Endpoints","url":"docs/beta_input_endpoints#get-product-matches-historical","content":" GET /products/matching/operations/{operationId}/matches/{matchId}/historical Get a product's change history. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/api/products/matching/operations/{operationId}/matches/{matchId}/historical' Response# Copy [ { \"matchId\": \"uidd-match-0002\", \"name\": \"Talisman\", \"productId\": \"uidd-prd-1003\", \"matchDetails\": { \"status\": \"PREDICTED\", \"score\": 8.225217 }, \"historicalTime\": \"2023-12-19T13:18:44.709Z\" } ] "},{"title":"Varieties","type":1,"pageTitle":"Beta > Input Endpoints","url":"docs/beta_input_endpoints#varieties","content":"Description\tEndpointsGet all varieties\tGET /varieties Get a variety\tGET /varieties/{id} Get summarized varieties\tGET /users/{leafUserId}/varieties/summary Search for varieties\tGET /varieties/search "},{"title":"Get all varieties","type":1,"pageTitle":"Beta > Input Endpoints","url":"docs/beta_input_endpoints#get-all-varieties","content":" GET /varieties List of varieties available from providers (for now only for John Deere). Parameter (to filter by)\tValuesleafUserId\tuuid of one of your users provider\tJohnDeere size\tan integer specifying the size of the page (max is 100) page\tan integer specifying the page being fetched (default is 0) sort\tthe sorting order of the results; can be multi-value, where the first value to be passed will take priority over the next values; you can also specify the order as asc or desc with asc being the default. Example: id, desc Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/api/varieties' Response# Copy [ { \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\", \"crops\": [ \"ALFALFA\" ], \"name\": \"Master Piece\", \"companyName\": \"Simplot\", \"status\": \"ACTIVE\", \"leafUserId\": \"028c30fa-6d2a-11ee-b962-0242ac120002\", \"provider\": \"JohnDeere\", \"providerId\": \"8e1e0920-1265-4066-8067-8ce2ce5012b2\", \"organizationId\": \"9999\" }, .... ] "},{"title":"Get a variety","type":1,"pageTitle":"Beta > Input Endpoints","url":"docs/beta_input_endpoints#get-a-variety","content":" GET /varieties/{id} Get a variaty by the given id. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/api/varieties/{id}' Response# Copy { \"id\": \"111120cc-d0c5-40d3-a063-ca09903a0738\", \"crops\": [ \"SOYBEANS\" ], \"providerId\": \"f4c43d25-0000-1000-7fc2-e1e1e1193019\", \"name\": \"2105 2000 mix\", \"companyName\": \"CHANNEL\", \"status\": \"ACTIVE\", \"provider\": \"JohnDeere\", \"leafUserId\": \"90a7faf4-33d3-4e35-9f46-1894ae13955d\", \"organizationId\": \"9999\" } "},{"title":"Get summarized varieties","type":1,"pageTitle":"Beta > Input Endpoints","url":"docs/beta_input_endpoints#get-summarized-varieties","content":" GET /users/{leafUserId}/varieties/summary List of varieties extracted from machine file. Parameter (to filter by)\tValuesname\tpart of the product name crops\tdesired crop name page\tan integer specifying the page being fetched (default is 0) size\tan integer specifying the size of the page (max is 100) sort\tthe sorting order of the results; can be multi-value, where the first value to be passed will take priority over the next values; you can also specify the order as asc or desc with asc being the default. Example: id, desc Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/api/users/{leafUserId}/varieties/summary' Response# Copy [ { \"id\": \"680ff073-18d0-4951-ba69-b2ca0b098bc3\", \"name\": \"corn variety 2\", \"leafUserId\": \"028c30fa-6d2a-11ee-b962-0242ac120002\", \"crops\": [ \"corn\" ] }, { \"id\": \"1544de06-682d-4549-92a3-a06b2ccdc96d\", \"name\": \"corn variety 2 (1)\", \"leafUserId\": \"8e1e0920-1265-4066-8067-8ce2ce5012b2\", \"crops\": [ \"corn\" ] }, .... ] "},{"title":"Search for varieties","type":1,"pageTitle":"Beta > Input Endpoints","url":"docs/beta_input_endpoints#search-for-varieties","content":" GET /varieties/search Search for varieties by name, partial values are supported. Varieties from John Deere Operation Center are available at the Leaf User level. Parameter (to filter by)\tValuesname\tpart of the variety name to be searched (required) maxResults\tthe number of results that should be returned (max value is 20). The default is 10 crop\tthe name of the crop of the varieties of interest Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/api/varieties/search' Response# Copy [ { \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\", \"crops\": [ \"ALFALFA\" ], \"name\": \"Master Piece\", \"companyName\": \"Simplot\", \"status\": \"ACTIVE\", \"leafUserId\": \"028c30fa-6d2a-11ee-b962-0242ac120002\", \"provider\": \"JohnDeere\", \"providerId\": \"8e1e0920-1265-4066-8067-8ce2ce5012b2\" }, .... ] "},{"title":"Tank Mixes","type":1,"pageTitle":"Beta > Input Endpoints","url":"docs/beta_input_endpoints#tank-mixes","content":"Description\tEndpointsGet all tank mixes\tGET /tankMixes Search for tank mixes\tGET /tankMixes/search "},{"title":"Get all tank mixes","type":1,"pageTitle":"Beta > Input Endpoints","url":"docs/beta_input_endpoints#get-all-tank-mixes","content":" GET /tankMixes List of tank mixes available from providers (for now only for John Deere). Parameter (to filter by)\tValuesleafUserId\tuuid of one of your users provider\tJohnDeere size\tan integer specifying the size of the page (max is 100) page\tan integer specifying the page being fetched (default is 0) sort\tthe sorting order of the results; can be multi-value, where the first value to be passed will take priority over the next values; you can also specify the order as asc or desc with asc being the default. Example: id, desc Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/api/tankMixes' Response# Copy [ { \"id\": \"abc59ca6-937c-11ee-b9d1-0242ac120002\", \"name\": \"TankTest1\", \"providerId\": \"b74878dc-937c-11ee-b9d1-0242ac120002\", \"notes\": null, \"solutionRate\": { \"valueAsDouble\": 5, \"unit\": \"gal1ac-1\", \"vrDomainId\": \"vrSolutionRateLiquid\" }, \"formulationType\": \"LIQUID\", \"targetCrops\": [ \"PINEAPPLE\" ], \"carrier\": { \"id\": \"c0cb84d0-937c-11ee-b9d1-0242ac120002\", \"name\": \"Water\", \"labelProvider\": \"JohnDeere\", \"registrant\": \"GENERIC\", \"registration\": null, \"distributor\": null, \"productType\": \"ADDITIVE\", \"formulationType\": \"LIQUID\", \"productPageUrl\": null, \"labels\": null, \"activeIngredient\": null, \"carrier\": true, \"status\": \"ACTIVE\", \"providerId\": \"e0daf77e-937c-11ee-b9d1-0242ac120002\", \"leafUserId\": \"cd06377c-937c-11ee-b9d1-0242ac120002\" }, \"components\": [ { \"id\": \"d1fb3aac-937c-11ee-b9d1-0242ac120002\", \"name\": \"Brandt Big Foot SS\", \"labelProvider\": \"JohnDeere\", \"registrant\": \"Brandt Consolidated, Inc.\", \"registration\": null, \"distributor\": null, \"productType\": \"ADDITIVE\", \"formulationType\": \"DRY\", \"productPageUrl\": null, \"labels\": null, \"activeIngredient\": null, \"carrier\": false, \"status\": \"ACTIVE\", \"providerId\": \"06da2738-937d-11ee-b9d1-0242ac120002\", \"leafUserId\": \"cd06377c-937c-11ee-b9d1-0242ac120002\" }, { \"id\": \"eaee0878-937c-11ee-b9d1-0242ac120002\", \"name\": \"Ferti-Phos Mg 0-25-0\", \"labelProvider\": \"JohnDeere\", \"registrant\": \"Fertilizer Company of Arizona, Inc.\", \"registration\": null, \"distributor\": null, \"productType\": \"FERTILIZER\", \"formulationType\": \"LIQUID\", \"productPageUrl\": null, \"labels\": null, \"activeIngredient\": null, \"carrier\": true, \"status\": \"ACTIVE\", \"providerId\": \"0e0f1c66-937d-11ee-b9d1-0242ac120002\", \"leafUserId\": \"cd06377c-937c-11ee-b9d1-0242ac120002\" } ], \"status\": \"ACTIVE\", \"provider\": \"JohnDeere\", \"leafUserId\": \"cd06377c-937c-11ee-b9d1-0242ac120002\" }, .... ] "},{"title":"Search for tank mixes","type":1,"pageTitle":"Beta > Input Endpoints","url":"docs/beta_input_endpoints#search-for-tank-mixes","content":" GET /tankMixes/search Search for tank mixes by name, partial values are supported. Tank mix from John Deere Operation Center are available at the Leaf User level. Parameter (to filter by)\tValuesname\tpart of the tank mix name to be searched (required) maxResults\tthe number of results that should be returned (max value is 20). The default is 10 Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/api/tankMixes/search' Response# Copy [ { \"id\": \"abc59ca6-937c-11ee-b9d1-0242ac120002\", \"name\": \"TankTest1\", \"providerId\": \"b74878dc-937c-11ee-b9d1-0242ac120002\", \"notes\": null, \"solutionRate\": { \"valueAsDouble\": 5, \"unit\": \"gal1ac-1\", \"vrDomainId\": \"vrSolutionRateLiquid\" }, \"formulationType\": \"LIQUID\", \"targetCrops\": [ \"PINEAPPLE\" ], \"carrier\": { \"id\": \"c0cb84d0-937c-11ee-b9d1-0242ac120002\", \"name\": \"Water\", \"labelProvider\": \"JohnDeere\", \"registrant\": \"GENERIC\", \"registration\": null, \"distributor\": null, \"productType\": \"ADDITIVE\", \"formulationType\": \"LIQUID\", \"productPageUrl\": null, \"labels\": null, \"activeIngredient\": null, \"carrier\": true, \"status\": \"ACTIVE\", \"providerId\": \"e0daf77e-937c-11ee-b9d1-0242ac120002\", \"leafUserId\": \"cd06377c-937c-11ee-b9d1-0242ac120002\" }, \"components\": [ { \"id\": \"d1fb3aac-937c-11ee-b9d1-0242ac120002\", \"name\": \"Brandt Big Foot SS\", \"labelProvider\": \"JohnDeere\", \"registrant\": \"Brandt Consolidated, Inc.\", \"registration\": null, \"distributor\": null, \"productType\": \"ADDITIVE\", \"formulationType\": \"DRY\", \"productPageUrl\": null, \"labels\": null, \"activeIngredient\": null, \"carrier\": false, \"status\": \"ACTIVE\", \"providerId\": \"06da2738-937d-11ee-b9d1-0242ac120002\", \"leafUserId\": \"cd06377c-937c-11ee-b9d1-0242ac120002\" }, { \"id\": \"eaee0878-937c-11ee-b9d1-0242ac120002\", \"name\": \"Ferti-Phos Mg 0-25-0\", \"labelProvider\": \"JohnDeere\", \"registrant\": \"Fertilizer Company of Arizona, Inc.\", \"registration\": null, \"distributor\": null, \"productType\": \"FERTILIZER\", \"formulationType\": \"LIQUID\", \"productPageUrl\": null, \"labels\": null, \"activeIngredient\": null, \"carrier\": true, \"status\": \"ACTIVE\", \"providerId\": \"0e0f1c66-937d-11ee-b9d1-0242ac120002\", \"leafUserId\": \"cd06377c-937c-11ee-b9d1-0242ac120002\" } ], \"status\": \"ACTIVE\", \"provider\": \"JohnDeere\", \"leafUserId\": \"cd06377c-937c-11ee-b9d1-0242ac120002\" }, .... ] "},{"title":"Leaf Connect","type":0,"sectionRef":"#","url":"docs/connect","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Leaf Connect","url":"docs/connect#about","content":"The Leaf API allows an API Owner to grant permission to access Field Boundaries, Field Operations and Machine Data Files to other API Owners. The access is controlled at the Leaf user level by the API account that owns the data. All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/usermanagement/api "},{"title":"How it works","type":1,"pageTitle":"Leaf Connect","url":"docs/connect#how-it-works","content":"Scenario# API Owner A wants to grant permission to API Owner B to read their fields. 1 - Sharing Relation# The first step is to create a relationship between the API Owners, from who owns the data - the sender (API Owner A) to the receiver (API Owner B). Check the endpoint Create an API Owner sharing relation. The receiver API Owner (API Owner B) must confirm the relationship changing the relation status to ALLOWED. This relationship status can be changed in the future by both sides, but once the sender blocks the relationship, the receiver will not be able to access the data, nor to reactivate the sharing relation status. This step is only necessary once, that is, it is not necessary to repeat this step for new integrations with the same receiver. 2 - Permissions# In this step, permissions are granted for the resources of each Leaf user. More info here. Note: This permission is READ only and FIELDS and OPERATIONS resources are available. Company Company-level sharing is not supported, but the permission can be granted or revoked at the same time the Leaf user is added or removed from the company. 3 - Access# At the end of these steps, API Owner B will be able to visualize the fields, operations and/or machine data files from the shared Leaf user, using the existing field/operations/machine data files endpoints, like this one. "},{"title":"Endpoints","type":1,"pageTitle":"Leaf Connect","url":"docs/connect#endpoints","content":"This service has the following endpoints available: Description\tEndpointsGet API Owner sharing relation\tGET /usermanagement/api/api-owners/sharing-relation/{RelationRole} Get API Owner sharing relation status\tGET /usermanagement/api/api-owners/sharing-relation/{RelationRole}/{targetApiOwner}/status Create an API Owner sharing relation\tPOST /usermanagement/api/api-owners/sharing-relation/receiver Update an API Owner sharing relation status\tPATCH /usermanagement/api/api-owners/sharing-relation/{RelationRole}/{targetApiOwner} Get LeafUser permissions\tGET /usermanagement/api/api-owners/sharing-relation/{RelationRole}/{TargetApiOwner}/users-permissions/{leafUserId} Create a LeafUser permissions\tPOST /usermanagement/api/api-owners/sharing-relation/receiver/{ReceiverApiOwner}/users-permissions/{leafUserId} Update LeafUser permissions\tPATCH /usermanagement/api/api-owners/sharing-relation/receiver/{ReceiverApiOwner}/users-permissions/{leafUserId}/{RESOURCE} Invalidate receiver's tokens\tPOST /usermanagement/api/api-owners/sharing-relation/{RelationRole}/{TargetApiOwner}/invalidate-tokens Delete LeafUser sharing permissions\tDELETE /usermanagement/api/api-owners/sharing-relation/{RelationRole}/{ReceiverApiOwner}/users-permissions/{leafUserId} "},{"title":"Get API Owner sharing relation","type":1,"pageTitle":"Leaf Connect","url":"docs/connect#get-api-owner-sharing-relation","content":" GET /usermanagement/api/api-owners/sharing-relation/{RelationRole} Get all API Owners relation based on the relation role: SENDER or RECEIVER. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/api-owners/sharing-relation/receiver' Response# Copy [ { \"senderApiOwner\": \"{senderApiOwner}\", \"receiverApiOwner\": \"{receiverApiOwner}\", \"status\": \"ALLOWED\" } ] "},{"title":"Get API Owner sharing relation status","type":1,"pageTitle":"Leaf Connect","url":"docs/connect#get-api-owner-sharing-relation-status","content":" GET /usermanagement/api/api-owners/sharing-relation/{RelationRole}/{targetApiOwner}/status Get the relation status based in the relation role (SENDER or RECEIVER). Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/api-owners/sharing-relation/receiver/{ReceiverApiOwner}/status' Response# A string with one of the following values: PENDING, ALLOWED or BLOCKED. Copy \"PENDING\" "},{"title":"Create an API Owner sharing relation","type":1,"pageTitle":"Leaf Connect","url":"docs/connect#create-an-api-owner-sharing-relation","content":" POST /usermanagement/api/api-owners/sharing-relation/receiver Create a sharing relation between the API Owners. Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"receiverApiOwner\": \"{ReceiverApiOwner}\" }' 'https://api.withleaf.io/services/usermanagement/api/api-owners/sharing-relation/receiver' Response# Copy { \"senderApiOwner\": \"{senderApiOwner}\", \"receiverApiOwner\": \"{receiverApiOwner}\", \"status\": \"PENDING\" } "},{"title":"Update an API Owner sharing relation status","type":1,"pageTitle":"Leaf Connect","url":"docs/connect#update-an-api-owner-sharing-relation-status","content":" PATCH /usermanagement/api/api-owners/sharing-relation/{RelationRole}/{targetApiOwner} Update the sharing relation status. The values available are ALLOWED or BLOCKED. After the sender creates a relationship, the recevier must approve it by changing the status from PENDING to ALLOWED. Both API Owners can block the relation, but once locked by the sender, there is no way for the receiver to change it again. Request examples# cURLPythonJavaScript Copy curl -X PATCH \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"status\": \"ALLOWED or BLOCKED\" }' 'https://api.withleaf.io/services/usermanagement/api/api-owners/sharing-relation/receiver/{ReceiverApiOwner}' Response# Copy { \"senderApiOwner\": \"{senderApiOwner}\", \"receiverApiOwner\": \"{receiverApiOwner}\", \"status\": \"ALLOWED\" } "},{"title":"Get LeafUser permissions","type":1,"pageTitle":"Leaf Connect","url":"docs/connect#get-leafuser-permissions","content":" GET /usermanagement/api/api-owners/sharing-relation/{RelationRole}/{TargetApiOwner}/users-permissions/{leafUserId} Get all permissions granted to a receiver API Owner for a Leaf user. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/api-owners/sharing-relation/receiver/{ReceiverApiOwner}/users-permissions/{leafUserId}' Response# Copy { \"permissions\": { \"FIELDS\": { \"actions\": [ \"READ\" ] } } } "},{"title":"Create a LeafUser permissions","type":1,"pageTitle":"Leaf Connect","url":"docs/connect#create-a-leafuser-permissions","content":" POST /usermanagement/api/api-owners/sharing-relation/receiver/{ReceiverApiOwner}/users-permissions/{leafUserId} Grants permission to a receiver for a given Leaf user resource. Note: shared Leaf users (from other API Owner) are not available for grant permissions Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{\"permissions\":{\"FIELDS\":{\"actions\":[\"READ\"]},\"OPERATIONS\":{\"actions\":[\"READ\"],\"types\":[\"PLANTED\"]}}}' 'https://api.withleaf.io/services/usermanagement/api/api-owners/sharing-relation/receiver/{ReceiverApiOwner}/users-permissions/{leafUserId}' Response# Copy { \"leafUserId\": \"{leafUserId}\", \"permissions\": { \"FIELDS\": { \"actions\": [ \"READ\" ] }, \"OPERATIONS\": { \"actions\": [ \"READ\" ], \"types\": [ \"PLANTED\" ] } } } Availability# Resource\tActions\tTypesFIELD\tREAD\t- OPERATIONS\tREAD\tAPPLIED, HARVESTED, PLANTED "},{"title":"Update LeafUser permissions","type":1,"pageTitle":"Leaf Connect","url":"docs/connect#update-leafuser-permissions","content":" PATCH /usermanagement/api/api-owners/sharing-relation/receiver/{ReceiverApiOwner}/users-permissions/{leafUserId}/{RESOURCE} Update the permissions granted to the receiver API Owner. Request examples# cURLPythonJavaScript Copy curl -X PATCH \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{\"actions\":[\"READ\"],\"types\":[\"PLANTED\", \"HARVESTED\"]}' \\ 'https://api.withleaf.io/services/usermanagement/api/api-owners/sharing-relation/receiver/{ReceiverApiOwner}/users-permissions/{leafUserId}/OPERATIONS' Response# Copy { \"leafUserId\": \"{leafUserId}\", \"permissions\": { \"FIELDS\": { \"actions\": [ \"READ\" ] }, \"OPERATIONS\": { \"actions\": [ \"READ\" ], \"types\": [ \"PLANTED\", \"HARVESTED\" ] } } } Availability# Resource\tActions\tTypesFIELD\tREAD\t- OPERATIONS\tREAD\tAPPLIED, HARVESTED, PLANTED "},{"title":"Invalidate receiver's tokens","type":1,"pageTitle":"Leaf Connect","url":"docs/connect#invalidate-receivers-tokens","content":" POST /usermanagement/api/api-owners/sharing-relation/{RelationRole}/{TargetApiOwner}/invalidate-tokens Invalidate the receiver's tokens created before the current date and time. Request examples# cURLPythonJavaScript Copy curl -X PATCH \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/api-owners/sharing-relation/receiver/{ReceiverApiOwner}/{TargetApiOwner}/invalidate-tokens' "},{"title":"Delete LeafUser sharing permissions","type":1,"pageTitle":"Leaf Connect","url":"docs/connect#delete-leafuser-sharing-permissions","content":" DELETE /usermanagement/api/api-owners/sharing-relation/{RelationRole}/users-permissions/{leafUserId} Deletes a permission. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/api-owners/sharing-relation/receiver/{ReceiverApiOwner}/users-permissions/{leafUserId}' "},{"title":"Configurations","type":0,"sectionRef":"#","url":"docs/configurations_overview","content":"","keywords":""},{"title":"Overview","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#overview","content":"Leaf's system can be heavily customized to pull and process data differently across APIs and Leaf Users. This customization is achieved using Configurations – settings that control data ingestion, processing, and output formats. Configurations can be applied to multiple APIs, including field and field boundaries, machine files, and field operations. Some configurations, like organizationDataSync and customDataSync, affect all APIs. info Configuration changes are not applied retroactively. If you update a configuration and need to reprocess data, you can use the Reprocess Operation endpoint. "},{"title":"Configuration Levels","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#configuration-levels","content":"Configurations can be set at two levels: API Owner Level: Every API Owner account starts with a default set of configurations (detailed below). These defaults can be changed, but they cannot be deleted or set to null.Leaf User Level: You can set specific configurations for individual Leaf Users (representing growers, regions, etc.). This allows granular control over how a specific user's data is synchronized or processed. Inheritance: If a configuration is not explicitly set for a Leaf User, that user automatically inherits the configuration from the API Owner. However, once a configuration is set at the Leaf User level, it will not change even if the API Owner's configuration is subsequently modified. "},{"title":"Available Configurations","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#available-configurations","content":"API\tConfigurations Data Synchronization organizationDataSync, customDataSync, fieldsAutoSync, operationsAutoSync, implementsAutoSync, machinesAutoSync, operatorsAutoSync, productsAutoSync, zonesAutoSync, syncPartnerData Field Boundary Management\tautomaticFixBoundary, fieldsAttachIntersection, fieldsAutoMerge, fieldsAutoSync, fieldsMergeIntersection Machine File Conversion cleanupStandardGeojson, originalOperationData, unitMeasurement, enableOutsideFieldGeojson, enableGeoparquetOutput, cropOptional ,seedRateOptional Field Operations cleanupStandardGeojson, outofStandardOperations, fieldOperationCreation, operationsAutoSync, operationsFilteredGeojson, operationsRemoveOutliers, operationsOutliersLimit, operationsMergeRange, operationsMergeRangeHarvested, operationsProcessingRange, splitOperationsByField, splitOperationsByProvider, splitOperationsByTillType, summarizeByProductEntry, unitMeasurement, enableOutsideFieldGeojson, enableOperationsSession, enableGeoparquetOutput, cropOptional, seedRateOptional Field Operations Images operationsImageCreation, operationsImageAsGeoTiff, operationsImageAttributeCreation, Irrigation irrigationProcessingRange "},{"title":"Data Synchronization","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#data-synchronization","content":""},{"title":"fieldsAutoSync","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#fieldsautosync","content":"Default: true Enable this setting to have Leaf automatically synchronize field boundary data from your connected providers. If disabled (false), you must manually trigger synchronization via the Manual Sync endpoint. "},{"title":"operationsAutoSync","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#operationsautosync","content":"Default: true Enable this setting to have Leaf automatically synchronize operation data from your connected providers. "},{"title":"customDataSync","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#customdatasync","content":"Default: true Enable this setting to initially fetch field boundaries in PREVIEW mode. This avoids fetching full data for all provider fields, allowing you to selectively choose which fields to fetch completely later. For some providers, this also affects fetching associated operation files. When changing this from true to false, previously previewed fields can be fully processed using the Manual Sync endpoint. "},{"title":"organizationDataSync","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#organizationdatasync","content":"Default: ALL Control how Leaf syncs data across organizations within a provider account. Set to ALL to sync data from all organizations. Set to SELECTED_ONLY to sync only from organizations explicitly marked as SELECTED via the Organization Sync endpoints. "},{"title":"syncPartnerData","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#syncpartnerdata","content":"Default: false Enable (true) this setting to fetch shared or partner data (e.g., from John Deere Operations Center partnerships or AgLeader shared accounts), provided the necessary permissions are granted. If disabled (false), Leaf only fetches data from the directly connected account, ignoring shared data even if permissions allow it. "},{"title":"implementsAutoSync","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#implementsautosync","content":"Default: false Enable this setting to have Leaf automatically synchronize implement data from your connected providers. "},{"title":"machinesAutoSync","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#machinesautosync","content":"Default: false Enable this setting to have Leaf automatically synchronize machine data from your connected providers. "},{"title":"operatorsAutoSync","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#operatorsautosync","content":"Default: false Enable this setting to have Leaf automatically synchronize operator data from your connected providers. "},{"title":"productsAutoSync","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#productsautosync","content":"Default: false Enable this setting to have Leaf automatically fetch input/product data (currently applies to John Deere). "},{"title":"zonesAutoSync","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#zonesautosync","content":"Default: false Enable this setting to have Leaf automatically synchronize zone data from your connected providers. "},{"title":"Field Boundary Management","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#field-boundary-management","content":""},{"title":"automaticFixBoundary","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#automaticfixboundary","content":"Default: true Enable this setting to have Leaf automatically attempt to correct invalid field boundary geometries received from providers. See Automatic Geometry Fix for more details. fieldsAttachIntersection# Default: 0.01 Set the minimum intersection percentage required to link an operation to a field. Leaf links the operation if the intersection area is greater than this value. Enter a value between 0 and 100 (e.g., 1 for 1%, 0.01 for 0.01%). 0.01 represents the smallest possible overlap. "},{"title":"fieldsAutoMerge","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#fieldsautomerge","content":"Default: false Enable this setting to have Leaf automatically merge fields that meet the intersection threshold defined by the fieldsMergeIntersection configuration. "},{"title":"fieldsAutoSync","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#fieldsautosync-1","content":"Default: true Enable this setting to have Leaf automatically synchronize field boundaries from your connected providers. If set to false, you must manually trigger synchronization using the sync fields endpoint. "},{"title":"fieldsMergeIntersection","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#fieldsmergeintersection","content":"Default: 0.01 Define the minimum intersection percentage required to merge two fields. When fields meet this threshold and fieldsAutoMerge is enabled, Leaf creates a new field of type MERGED representing the intersection. The original fields remain inactive for historical reference. Enter a value between 0 and 100 (0.01 is the minimum). "},{"title":"Machine File Conversion","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#machine-file-conversion","content":""},{"title":"cleanupStandardGeojson","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#cleanupstandardgeojson","content":"Default: true Enable this setting to have Leaf automatically remove points marked as invalid (see Valid Points) from the standardGeoJSON file output. "},{"title":"originalOperationData","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#originaloperationdata","content":"Default: true Enable this setting to include non-standard properties (like original farm name, field name, grower, and operation type provided by the source) in the File summary output. This does not affect the standardGeoJSON or Field Operation summary outputs. Copy \"originalOperationData\": { \"originalOperationFarm\": \"Farm Green\", \"originalOperationField\": \"Field A\", \"originalOperationGrower\": \"Grower\", \"originalOperationType\": \"SowingAndPlanting\" } "},{"title":"unitMeasurement","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#unitmeasurement","content":"Default: [Your Preferred System] Choose the unit system (Metric, Imperial, or Default) for summary, standardGeoJSON, and filteredGeoJSON outputs in Machine Files and Field Operations. METRIC and IMPERIAL convert measurements accordingly. DEFAULT uses the units provided by the original data source. Using METRIC or IMPERIAL ensures consistency across your data. See the Units of Measurement page for specific unit conversions. "},{"title":"enableOutsideFieldGeojson","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#enableoutsidefieldgeojson","content":"Default: false Enable this setting to capture machine file points that fall outside defined field boundaries when splitOperationsByField is active. Normally, these points are discarded. When enabled, you can retrieve these points using the outsideFieldGeoJSON endpoint. This applies to both Machine File Conversion and Field Operations. "},{"title":"enableGeoparquetOutput","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#enablegeoparquetoutput","content":"Default: false Enable this setting to generate vector point file outputs (like standardGeoJSON) in GeoParquet format in addition to GeoJSON. GeoParquet offers faster processing and reduced storage. This setting applies to data processed after it's enabled (no historical conversion). This applies to both Machine File Conversion and Field Operations. "},{"title":"cropOptional","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#cropoptional","content":"Default: required Enable this setting to make crop an optional rather than required property. We will ignore the value and pass through the original entry. This applies to both Machine File Conversion and Field Operations. Copy { \"standardGeoJson\": { \"planted\": { \"crop\": \"optional\" } } } "},{"title":"seedRateOptional","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#seedrateoptional","content":"Default: required Enable this setting to make the seedRate an optional, rather than required property. We will ignore the value and pass through the original entry. This applies to both Machine File Conversion and Field Operations. Copy { \"standardGeoJson\": { \"planted\": { \"seedRate\": \"optional\" } } } "},{"title":"Field Operations","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#field-operations","content":"These configurations can be enabled with the use of Leaf Field Operations. Field Operations require an active boundary to be present so Leaf can merge the machine files with the field boundaries to create Field Operations. "},{"title":"cleanupStandardGeojson","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#cleanupstandardgeojson-1","content":"Default: true Enable this setting to have Leaf automatically remove points marked as invalid from the standardGeoJSON file output during Field Operation processing. See this section for more information "},{"title":"outOfStandardOperations","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#outofstandardoperations","content":"Default: false Enable this setting to allow processing of operations that don't meet the standard validation criteria. When enabled, operations and files that would normally fail validation can still be processed, but will be marked as non-standard. This allows for more flexible handling of operations data while maintaining awareness of their non-standard status. "},{"title":"summarizeByProductEntry","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#summarizebyproductentry","content":"Default: true Enable this setting to aggregate product application data in the Field Operation summary. Leaf groups entries with the same product name, summing area and totalApplied and averaging the rate. This applies only to application-type operations. "},{"title":"fieldOperationCreation","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#fieldoperationcreation","content":"Default: true Enable this setting to allow Leaf to automatically create Field Operations by merging relevant machine files associated with an active field boundary. "},{"title":"operationsAutoSync","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#operationsautosync-1","content":"Default: true Enable this setting to have Leaf automatically synchronize operation data from your connected providers. "},{"title":"operationsFilteredGeojson","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#operationsfilteredgeojson","content":"Default: true Enable this setting to allow filtering of Field Operations data based on various criteria (see Filtered GeoJSON). "},{"title":"operationsRemoveOutliers","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#operationsremoveoutliers","content":"Default: true Enable this setting to remove outlier points from the filteredGeojson output for harvest operations. Leaf identifies outliers based on harvest volume values falling outside the standard deviation threshold set by operationsOutliersLimit. Requires operationsFilteredGeojson to be enabled. See Outliers for more details. "},{"title":"operationsOutliersLimit","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#operationsoutlierslimit","content":"Default: 3 Set the standard deviation threshold for identifying outliers when operationsRemoveOutliers is enabled. For example, the default value 3 removes points where the harvest volume is more than 3 standard deviations from the mean. See Outliers for more details. "},{"title":"operationsMergeRange","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#operationsmergerange","content":"Default: 5 days Define the time window (in days) used to group machine files into a single non-harvest Field Operation. Files within this range for the same field, crop, and operation type are merged. "},{"title":"operationsMergeRangeHarvested","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#operationsmergerangeharvested","content":"Default: 21 days Define the time window (in days) used to group machine files into a single harvest Field Operation. Files within this range for the same field and crop are merged. "},{"title":"operationsProcessingRange","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#operationsprocessingrange","content":"Default: [Set as needed] (Typically 12 months) Specify the lookback period (in months) for fetching and processing operations data from providers. Leaf will only process operations created or updated within this timeframe. "},{"title":"splitOperationsByField","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#splitoperationsbyfield","content":"Default: true Enable this setting to create separate Field Operations for each distinct Leaf Field Boundary that intersects with the machine data. If disabled, data intersecting multiple boundaries might be combined into a single operation. "},{"title":"splitOperationsByProvider","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#splitoperationsbyprovider","content":"Default: true Enable this setting to group machine files by provider in addition to field, operation type, crop, and date when creating Field Operations. If disabled (false), Leaf merges data from different providers into the same Field Operation if other criteria match. "},{"title":"splitOperationsByTillType","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#splitoperationsbytilltype","content":"Default: false Enable this setting to create separate Field Operations for each unique tillType found within tillage machine data. If disabled, different tillage types might be combined into a single operation. "},{"title":"unitMeasurement","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#unitmeasurement-1","content":"Default: [Your Preferred System] See this section for more information "},{"title":"enableOutsideFieldGeojson","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#enableoutsidefieldgeojson-1","content":"Default: false See this section for more information "},{"title":"enableOperationsSession","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#enableoperationssession","content":"Default: false Enables a new view of the field operation data, compiled by operator, implement and machines used in the operation. The information can be accessed in the field operation session endpoint. "},{"title":"cropOptional","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#cropoptional-1","content":"Default: required Enable this setting to make the crop value in the summary optional. We will ignore the value and pass through the original entry. This applies to both Machine File Conversion and Field Operations. Copy { \"standardGeoJson\": { \"planted\": { \"crop\": \"optional\" } } } "},{"title":"seedRateOptional","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#seedrateoptional-1","content":"Default: required Enable this setting to make the seedRate value in the summary optional. We will ignore the value and pass through the original entry. This applies to both Machine File Conversion and Field Operations. Copy { \"standardGeoJson\": { \"planted\": { \"seedRate\": \"optional\" } } } "},{"title":"Field Operations Image Generation","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#field-operations-image-generation","content":""},{"title":"operationsImageCreation","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#operationsimagecreation","content":"Default: false Enable this setting for Leaf to generate Operations Images. "},{"title":"operationsImageAsGeoTiff","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#operationsimageasgeotiff","content":"Default: false Enable this setting to allow Leaf to generate the images of operations in GeoTIFF format. The data can be accessed in this endpoint. "},{"title":"operationsImageAttributeCreation","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#operationsimageattributecreation","content":"Customize which Operations Images are generated by setting the corresponding attribute flags to true. Copy \"operationsImageAttributeCreation\": { \"harvested\": { \"area\": false, \"distance\": false, \"elevation\": false, \"equipmentWidth\": false, \"harvestMoisture\": false, \"wetMass\": false, \"wetMassPerArea\": false, \"wetVolume\": false, \"wetVolumePerArea\": false, \"dryMass\": false, \"dryMassPerArea\": false, \"dryVolume\": false, \"dryVolumePerArea\": false, \"speed\": false, \"heading\": false, \"cropFlow\": false, \"proteinPercentage\": false, \"fuelRate\": false, \"fuelUsed\": false }, \"planted\": { \"heading\": false, \"distance\": false, \"elevation\": false, \"seedRate\": false, \"area\": false, \"equipmentWidth\": false, \"speed\": false, \"seedRateTarget\": false, \"seedDepth\": false, \"fuelRate\": false, \"fuelUsed\": false, \"downForce\": false, \"singulation\": false }, \"applied\": { \"heading\": false, \"distance\": false, \"elevation\": false, \"appliedRate\": false, \"area\": false, \"equipmentWidth\": false, \"speed\": false, \"appliedRateTarget\": false, \"fuelRate\": false, \"fuelUsed\": false }, \"tillage\": { \"area\": false, \"heading\": false, \"distance\": false, \"elevation\": false, \"equipmentWidth\": false, \"tillageDepthTarget\": false, \"speed\": false, \"tillageDepthActual\": false, \"fuelRate\": false, \"fuelUsed\": false } } "},{"title":"Irrigation","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#irrigation","content":""},{"title":"irrigationProcessingRange","type":1,"pageTitle":"Configurations","url":"docs/configurations_overview#irrigationprocessingrange","content":"Default: 12 months Specify the lookback period (in months) for fetching and processing irrigation activities from providers. Leaf will only process irrigation data that occurred within this timeframe. "},{"title":"Manual File Upload Overview","type":0,"sectionRef":"#","url":"docs/converters_overview","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Manual File Upload Overview","url":"docs/converters_overview#about","content":"There are two ways machine files can be imported via Leaf: provider integration and manual file upload. Manual file upload is useful for your customers that are not wirelessly connected to a provider. Leaf helps with the manual file upload process by: Detecting a range of file formats being uploadedConverting proprietary formats into a standardized format Merging and processing files into the desired output  In this section, you will find more information on the Leaf Link pre-built file upload widget, manual file upload endpoints and supported file types. Please refer to machine file conversion for more relevant information on file conversion after you've set up manual file upload. Or skip straight there if you'd rather import the files via provider authentication. "},{"title":"Leaf Link - Upload Widget","type":1,"pageTitle":"Manual File Upload Overview","url":"docs/converters_overview#leaf-link---upload-widget","content":"Leaf Link provides a pre-built file upload widget that requires minimal code to implement. The file upload widget allows your end users to upload various machine file formats for translation using Leaf’s API. You can find more information on how to use Leaf Link here. "},{"title":"Endpoints and supported file formats","type":1,"pageTitle":"Manual File Upload Overview","url":"docs/converters_overview#endpoints-and-supported-file-formats","content":"Head to the next page for the details on endpoints and supported file formats. Note: When manually uploading fieldops data (in a zip file), you can select which provider the files inside the zip came from. If you are unsure or you know that there are files from more than one provider, Leaf can automatically detect, split and process each file format. "},{"title":"AgLeader Credentials","type":0,"sectionRef":"#","url":"docs/credentials_agleader","content":"","keywords":""},{"title":"AgLeader Credentials Endpoints","type":1,"pageTitle":"AgLeader Credentials","url":"docs/credentials_agleader#agleader-credentials-endpoints","content":""},{"title":"Get the AgLeader credentials","type":1,"pageTitle":"AgLeader Credentials","url":"docs/credentials_agleader#get-the-agleader-credentials","content":" GET /users/{leafUserId}/ag-leader-credentials  Get the AgLeader credentials of the Leaf User based on its id and returns a JSON with the credentials. If during background processing we detect that this credential is no longer valid, the value of the status will be changed.  Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/ag-leader-credentials' Response# Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"accessToken\": \"str\", \"refreshToken\": \"str\", \"publicKey\": \"str\", \"privateKey\": \"str\" } "},{"title":"Create a AgLeader credentials","type":1,"pageTitle":"AgLeader Credentials","url":"docs/credentials_agleader#create-a-agleader-credentials","content":" POST /users/{leafUserId}/ag-leader-credentials Create a AgLeader credentials for the Leaf User. Request body# Copy { \"accessToken\": \"str\", \"refreshToken\": \"str\", \"publicKey\": \"str\", \"privateKey\": \"str\" } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -H 'Content-Type: application/json' \\ -d '{ \"accessToken\": \"str\",\"refreshToken\": \"str\",\"publicKey\":\"str\", \"privateKey\":\"str\"}' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/ag-leader-credentials' Response# A AgLeader Credentials with status. Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"accessToken\": \"str\", \"refreshToken\": \"str\", \"publicKey\": \"str\", \"privateKey\": \"str\" } "},{"title":"Delete AgLeader credentials","type":1,"pageTitle":"AgLeader Credentials","url":"docs/credentials_agleader#delete-agleader-credentials","content":" DELETE /users/{leafUserId}/ag-leader-credentials Delete Leaf User's AgLeader credentials. Request examples# cURLJavaScriptPython Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/ag-leader-credentials' "},{"title":"Troubleshooting","type":1,"pageTitle":"AgLeader Credentials","url":"docs/credentials_agleader#troubleshooting","content":"With these endpoints, you can do some troubleshooting to see your credential's health. "},{"title":"Manual File Upload Endpoints","type":0,"sectionRef":"#","url":"docs/converters_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Manual File Upload Endpoints","url":"docs/converters_endpoints#about","content":"All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/operations/api This service has the following endpoints available: Description\tEndpointsUpload a file\tPOST /batch Get a batch\tGET /batch/{id} Get all batches\tGET /batch Retry a batch\tPUT /batch/{id}/retry Get Batch Files Status\tGET /batch/{id}/status To easily test these endpoints, we recommend using our Postman collection. requires Leaf User You will need a Leaf User to manually upload files. If you don't have a Leaf User, see the Leaf user overview "},{"title":"Upload a file","type":1,"pageTitle":"Manual File Upload Endpoints","url":"docs/converters_endpoints#upload-a-file","content":" POST /batch Creates a new file in Leaf. The file must be sent as a zip. This endpoint accepts a .zip of operation files, detects which files are in the .zip, and returns the ID of the process, which can in turn be used to retrieve the ID's of the files being processed. File size limit of 3 GB Currently, our upload endpoints accepts files with the maximum size limited to 3 gigabytes. This endpoint receives two required URL parameters, a leafUserId and provider A provider can be set as one of the following: Copy Other Leaf ClimateFieldView CNHI JohnDeere Trimble AgLeader Farmobile PrecisionPlanting If provider is set to \"Other\", Leaf will detect which files are present in the .zip file and process them accordingly. Leaf will detect files present in the uploaded .zip and create file ids for the files that are detected in the uploaded .zip. These files can then be accessed individually by their file ID, batch ID, or their associated field boundary. Expected file structures from each provider are listed below. Very often these default file structures are edited by users. In these cases Leaf attempts to automatically repair the file structure and find all necessary files within any uploaded .zip. The following file formats from each provider are supported: JohnDeere# File Format\tMonitor Model\tDetailsGS3\tGreenStar 3 – 2630\t/GS3_2630/profile/RCD/EIC/global.ver Gen4\tGen 4 - 4600/4630\t/JD-Data/log/user defined name/*.jdl Shapefile\tExported from MyJohnDeere\tShapefile with extra metadata in a .json file Expected file structure# GreenStar 4 (4600+) Copy jd-data └── log └── *.jdl GreenStar 3 (2630) Copy GS3_2630 └── RCD └── EIC └── global.ver └── documentation └── ... ├── *.fdd └── *.fdl Green Star 2 (2600) Copy ... └── RCD ├── *.fdd └── *.fdl Climate FieldView# File Format\tMonitor Model\tDetailsdat\tAll files from Climate FieldView\tA zip with .dat files Expected file structure# 20|20 SeedSense Generation 1 and Generation 2 Copy ... ├── harvest_*.dat – Harvest data ├── field_map_*.dat – Planting data └── liquid_map_*.dat - AsApplied spraying data 20|20 SeedSense Generation 3 Copy ... └── *.2020 CNHI# File Format\tMonitor Model\tDetailsCN1\tCase IH Pro 700, equivalent to New Holland IntelliView IV\t/file.cn1/index.vy1 ISOXML\tCase IH Pro 1200, equivalent to New Holland IntelliView 12\t/TASKDATA.XML Expected file structure# Voyager 2 Copy *.cn1 └── ... └── *.vy1 ISOXML Copy TASKDATA ├── TASKDATA.XML └── *.bin AgLeader# File Format\tMonitor Model\tDetailsyld\tYM2000, PFAdvantage & other OEM systems\tA zip with .yld files ilf\tINTEGRA / Insight / Edge\tA zip with .ilf files agdata\tINTEGRA / VERSA / COMPASS\tA zip with .agdata files Expected file structure# AgLeader Integra (versions 3.5+), Versa Copy ... ├── *.agdata └── *.agsetup AgLeader Edge, Insight, and Integra (version 3.4) Copy ... └── *.ilf AgLeader PF Advantage, PF 3000, PF 3000 Pro, YM2000 Copy ... └── *.yld Trimble# File Format\tMonitor Model\tDetailsAgData\tFMX and CFX monitors\t/AgData/ AgGPS\tTMX and GFX monitors\t/AgGPS/ Expected file structure# GFX-750, TMX-2050 Copy Agdata ├── Fields └── *.agf ├── implements └── *.agi ├── prescriptions └── *.agm ├── Tasks └── *.agt ├── Users └── *.agu └── vehicles └── *.agv CFX-750, FMX Copy AgGPS └── Data └── \"Grower\" └── Farm └── field └── \"Task\" ├── *.cpg ├── *.dbf ├── *.shp └── *.shx Precision Planting (beta)# File Format\tMonitor Model\tDetailsPP2020\t20|20\tA zip with .2020 files. Expected file structure# 20|20 SeedSense Generation 1 and Generation 2 Copy ... ├── harvest_*.dat – Harvest data ├── field_map_*.dat – Planting data └── liquid_map_*.dat - AsApplied spraying data 20|20 SeedSense Generation 3 Copy ... └── *.2020 ISOXML# Expected file structure# Copy TASKDATA ├── *.XML └── *.bin CLAAS# Expected file structure# Copy TASKDATA ├── *.XML └── *.bin Kuhn# Expected file structure# Copy TASKDATA ├── *.XML └── *.bin Kverneland Group# Expected file structure# Copy TASKDATA ├── *.XML └── *.bin Müller-Elektronik# Expected file structure# Copy TASKDATA ├── *.XML └── *.bin Teknomika# Expected file structure# Copy TASKDATA ├── *.XML └── *.bin Topcon Precision Agriculture# Expected file structure# Copy TASKDATA ├── *.XML └── *.bin Farmobile# File Format\tDetailsGeoJSON\tGeoJSON files exported from Farmobile. Since GeoJSON files do not contain information on the units used, we assume the default units from Farmobile are being used. Other# File Format\tDetailsShapefile\tShapefiles exported from SMS, Raven Slingshot, and Topcon. Since Shapefiles do not contain information on the units used, we assume the default units from the provider will be used. Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -F 'file=shapefile.zip' \\ 'https://api.withleaf.io/services/operations/api/batch' \\ 'provider=JohnDeere&leafUserId=id' Response# Copy { \"id\": \"996aea67-52bc-4d4b-9b77-028756dc0ee9\", \"leafUserId\": \"ede8f781-1d55-4b2d-83a1-6785ddab6e1d\", \"fileName\": \"Climate.zip\", \"size\": 8652951, \"provider\": \"Other\", \"status\": \"RECEIVED\", \"uploadTimestamp\": \"2021-03-12T19:50:55.567755Z\" } This id can then be queried to retrieve on Get batch to get the individual file ID's. Then you can query each of the files individually withGet a File or all of them, filtering by batchId, onGet all Files. Batch status# The status key will evolve accordingly to the following states: Status\tDescriptionRECEIVED\tIs the default state for every batch created PROCESSED\tWhen all the files included in the batch were processed, and at least one file have status SUCCESS FAILED\tThe batch did not generated any leaf files with status SUCCESS The messages with FAILED status have the key statusDetails. The `statusDetails`` is just informative and should not be used programatically. Copy { \"id\": \"c21e6495-3e39-4c5f-b35c-d33fa06c25d8\", \"leafUserId\": \"fc7c52ad-d228-4332-9e18-de979a293457\", \"fileName\": \"Climate.zip\", \"size\": 8652951, \"provider\": \"Other\", \"status\": \"FAILED\", \"statusDetails\": \"No operation found. Check file format before re-trying or contact support. Check file format before re-trying or contact support\", \"uploadTimestamp\": \"2021-03-12T19:50:55.567755Z\" } The following status can be present on statusDetails: Status\tDescriptionNo valid files found\tUnable to find a valid file based on supported extensions and expected file structure Leaf internal error. Please contact Support\tInternal error that need to be reported Files found but unable to read. Please check file format before re-trying or contact Support\tA valid file was found but could not be converted "},{"title":"Get Batch upload","type":1,"pageTitle":"Manual File Upload Endpoints","url":"docs/converters_endpoints#get-batch-upload","content":" GET /batch/{batch_id} Once you've uploaded files, you can then query these files individually, merge the files, or query for them via Get all Files. You can also query the batch upload ID to see a list of files generated in the upload and a status of the upload with this endpoint. Request examples# cURLPythonJavaScript Copy import requests TOKEN = 'YOUR_TOKEN' endpoint = 'https://api.withleaf.io/services/operations/api/batch/{batch_id}' headers = {'Authorization': f'Bearer {TOKEN}'} response = requests.get(endpoint, headers=headers) print(response.json()) Response# Copy { \"id\": \"9b561906-efac-43a3-9378-641e3698da5d\", \"leafUserId\": \"1481bc9b-cdc7-45c1-9f0e-592da6306dfe\", \"provider\": \"Other\", \"status\": \"PROCESSED\", \"leafFiles\": [ \"f14203df-4144-43b7-a383-2ed321f395ce\", \"810b1475-cb49-437b-8658-d29038ce2fa4\" ] } "},{"title":"Get all Batches","type":1,"pageTitle":"Manual File Upload Endpoints","url":"docs/converters_endpoints#get-all-batches","content":" GET /batch Once you've uploaded files, you can then query these files individually, merge the files, or query for them via Get all Files. You can also query the batch upload ID to see a list of files generated in the upload and a status of the upload with this endpoint. Request examples# cURLPythonJavaScript Copy import requests TOKEN = 'YOUR_TOKEN' endpoint = 'https://api.withleaf.io/services/operations/api/batch' headers = {'Authorization': f'Bearer {TOKEN}'} response = requests.put(endpoint, headers=headers) print(response.json()) Response# Copy [ { \"id\": \"9e47ae29-6a84-4a9c-9e5f-01802f6dceea\", \"leafUserId\": \"5ded9409-c99f-4379-9173-c01b1631f274\", \"provider\": \"Other\", \"status\": \"PROCESSED\", \"leafFiles\": [ \"74d5aeb6-9a0e-43c6-986c-a5f17eecbddc\", \"475fcad3-b534-409d-8c8b-cec4dabd1b8b\" ] } ] "},{"title":"Retry a batch","type":1,"pageTitle":"Manual File Upload Endpoints","url":"docs/converters_endpoints#retry-a-batch","content":" PUT /batch/{id}/retry If a batch upload does not complete as expected, this endpoint allows you to try again. This action will reprocess the fragments of uploaded data that didn't succeed processing before, keeping existing converted files unaffected. Request examples# cURLPythonJavaScript Copy curl -X PUT \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/batch/{id}/retry' Response# Copy { \"id\": \"36d8551f-409d-41f2-94b4-04c9fe16289b\", \"leafUserId\": \"089bb77b-2415-43df-a246-6c0a5937c774\", \"fileName\": \"filename.zip\", \"size\": 8652951, \"provider\": \"Other\", \"status\": \"RECEIVED\", \"uploadTimestamp\": \"2021-03-12T19:50:55.567755Z\" } "},{"title":"Batch Files Status","type":1,"pageTitle":"Manual File Upload Endpoints","url":"docs/converters_endpoints#batch-files-status","content":" GET /batch/{id}/status After your batch generate the list of Leaf Files, this enpoint can be used to verify the status of each resource complied on the same response. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/batch/{id}/status' Response# Copy { \"converted\": { \"leafFiles\": [ \"06512392-8d69-4033-8127-4cc62b7176b9\", \"075fd0f6-af1a-433d-ad7a-e3e979179244\" ] }, \"processing\": { \"leafFiles\": [ \"9d22cbca-03ff-47e8-ac66-f6d463d206f4\" ] }, \"failed\": { \"standardGeojson\": { \"leafFiles\": [ \"0abca517-09f2-4d1d-9627-9cd3147e9ec3\" ], \"status\": \"failed\", \"message\": \"no points passed the filter\" } } } The most common failed messages are listed here. Please note Once you have finished setting up manual file upload, refer to machine file conversionnext "},{"title":"Events","type":1,"pageTitle":"AgLeader Credentials","url":"docs/credentials_agleader#events","content":" GET /users/{leafUserId}/ag-leader-credentials/events Get the logs of the provider credential based on the LeafUserId sent. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId} /ag-leader-credentials/events' Response# Copy [ { \"body\": \"string\", \"createdDate\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"headers\": \"string\", \"id\": \"string\", \"statusCode\": \"int\" } ] warning The logs are available only for 30 days and once the credential is deleted or disassociated with the Leaf User, the logs are no longer available. "},{"title":"Climate FieldView Credentials","type":0,"sectionRef":"#","url":"docs/credentials_cfv","content":"","keywords":""},{"title":"Climate FieldView Credentials Endpoints","type":1,"pageTitle":"Climate FieldView Credentials","url":"docs/credentials_cfv#climate-fieldview-credentials-endpoints","content":""},{"title":"Get the Climate Fieldview credentials","type":1,"pageTitle":"Climate FieldView Credentials","url":"docs/credentials_cfv#get-the-climate-fieldview-credentials","content":" GET /users/{leafUserId}/climate-field-view-credentials  Get the Climate FieldView credentials of the Leaf User based on its id and returns a JSON with the credentials. If during background processing we detect that this credential is no longer valid, the value of the status will be changed.  Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/climate-field-view-credentials' Response# Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"tokenMetadata\": {\"scopes\": [\"str\"]}, \"clientId\": \"str\", \"clientSecret\": \"str\", \"apiKey\": \"str\", \"refreshToken\": \"str\", \"accessToken\": \"str\" } "},{"title":"Create a Climate Fieldview credentials","type":1,"pageTitle":"Climate FieldView Credentials","url":"docs/credentials_cfv#create-a-climate-fieldview-credentials","content":" POST /users/{leafUserId}/climate-field-view-credentials Create a Climate FieldView credentials for the Leaf User. Request body# Copy { \"clientId\": \"str\", \"clientSecret\": \"str\", \"apiKey\": \"str\", \"refreshToken\": \"str\" } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{\"clientId\": \"str\",\"clientSecret\": \"str\",\"apiKey\": \"str\",\"refreshToken\": \"str\"}' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/climate-field-view-credentials' Response# A Climate FieldView credentials with status. Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"tokenMetadata\": {\"scopes\": [\"str\"]}, \"clientId\": \"str\", \"clientSecret\": \"str\", \"apiKey\": \"str\", \"refreshToken\": \"str\", \"accessToken\": \"str\" } "},{"title":"Delete Climate Fieldview credentials","type":1,"pageTitle":"Climate FieldView Credentials","url":"docs/credentials_cfv#delete-climate-fieldview-credentials","content":" DELETE /users/{leafUserId}/climate-field-view-credentials Delete Leaf User's Climate FieldView credentials. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/climate-field-view-credentials' "},{"title":"Troubleshooting","type":1,"pageTitle":"Climate FieldView Credentials","url":"docs/credentials_cfv#troubleshooting","content":"With these endpoints, you can do some troubleshooting to see your credential's health. "},{"title":"Events","type":1,"pageTitle":"Climate FieldView Credentials","url":"docs/credentials_cfv#events","content":" GET /users/{leafUserId}/climate-field-view-credentials/events Get the logs of the provider credential based on the LeafUserId sent. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId} /climate-field-view-credentials/events' Response# Copy [ { \"body\": \"string\", \"createdDate\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"headers\": \"string\", \"id\": \"string\", \"statusCode\": \"int\" } ] warning The logs are available only for 30 days and once the credential is deleted or disassociated with the Leaf User, the logs are no longer available. "},{"title":"Agvance Credentials","type":0,"sectionRef":"#","url":"docs/credentials_agvance","content":"","keywords":""},{"title":"Agvance Credentials Endpoints","type":1,"pageTitle":"Agvance Credentials","url":"docs/credentials_agvance#agvance-credentials-endpoints","content":""},{"title":"Get the Agvance credentials","type":1,"pageTitle":"Agvance Credentials","url":"docs/credentials_agvance#get-the-agvance-credentials","content":" GET /users/{leafUserId}/agvance-credentials  Get the Agvance credentials of the Leaf User based on its id and returns a JSON with the credentials. If during background processing we detect that this credential is no longer valid, the value of the status will be changed.  Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/agvance-credentials' Response# Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"clientEnvironment\": \"STAGE or PRODUCTION\", \"username\": \"str\", \"password\": \"str\", \"databaseId\": \"str\", \"sessionId\": \"str\", \"apiKey\": \"str\" } "},{"title":"Create a Agvance credentials","type":1,"pageTitle":"Agvance Credentials","url":"docs/credentials_agvance#create-a-agvance-credentials","content":" POST /users/{leafUserId}/agvance-credentials Create a Agvance credentials for the Leaf User. Request body# Copy { \"apiKey\": \"str\", \"clientEnvironment\": \"STAGE or PRODUCTION\", \"databaseId\": \"str\", \"password\": \"str\", \"username\": \"str\" } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{\"apiKey\": \"str\", \"clientEnvironment\": \"STAGE or PRODUCTION\", \"databaseId\": \"str\", \"password\": \"str\", \"username\": \"str\"}' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/agvance-credentials' Response# A Agvance Credentials with status. Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"clientEnvironment\": \"STAGE or PRODUCTION\", \"username\": \"str\", \"password\": \"str\", \"databaseId\": \"str\", \"sessionId\": \"str\", \"apiKey\": \"str\" } "},{"title":"Delete Agvance credentials","type":1,"pageTitle":"Agvance Credentials","url":"docs/credentials_agvance#delete-agvance-credentials","content":" POST /users/{leafUserId}/agvance-credentials Delete Leaf User's Agvance credentials. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/agvance-credentials' "},{"title":"Troubleshooting","type":1,"pageTitle":"Agvance Credentials","url":"docs/credentials_agvance#troubleshooting","content":"With these endpoints, you can do some troubleshooting to see your credential's health. "},{"title":"Events","type":1,"pageTitle":"Agvance Credentials","url":"docs/credentials_agvance#events","content":" GET /users/{leafUserId}/agvance-credentials/events Get the logs of the provider credential based on the LeafUserId sent. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId} /agvance-credentials/events' Response# Copy [ { \"body\": \"string\", \"createdDate\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"headers\": \"string\", \"id\": \"string\", \"statusCode\": \"int\" } ] warning The logs are available only for 30 days and once the credential is deleted or disassociated with the Leaf User, the logs are no longer available. "},{"title":"John Deere Credentials","type":0,"sectionRef":"#","url":"docs/credentials_john_deere","content":"","keywords":""},{"title":"John Deere Credentials Endpoints","type":1,"pageTitle":"John Deere Credentials","url":"docs/credentials_john_deere#john-deere-credentials-endpoints","content":""},{"title":"Get the John Deere credentials","type":1,"pageTitle":"John Deere Credentials","url":"docs/credentials_john_deere#get-the-john-deere-credentials","content":" GET /users/{leafUserId}/john-deere-credentials  Get the John Deere credentials of the Leaf User based on its id and returns a JSON with the credentials. If during background processing we detect that this credential is no longer valid, the value of the status will be changed.  Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/john-deere-credentials' Response# Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"tokenMetadata\": {\"scopes\": [\"str\"]}, \"clientKey\": \"str\", \"clientSecret\": \"str\", \"accessToken\": \"str\", \"refreshToken\": \"str\", \"clientEnvironment\": \"STAGE or PRODUCTION\" } "},{"title":"Create a John Deere credentials","type":1,"pageTitle":"John Deere Credentials","url":"docs/credentials_john_deere#create-a-john-deere-credentials","content":" POST /users/{leafUserId}/john-deere-credentials Create a John Deere credentials for the Leaf User. Request body# Copy { \"clientKey\": \"str\", \"clientSecret\": \"str\", \"refreshToken\": \"str\", \"clientEnvironment\": \"STAGE or PRODUCTION\" } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{\"clientKey\": \"str\",\"clientSecret\": \"str\",\"refreshToken\": \"str\",\"clientEnvironment\": \"STAGE or PRODUCTION\"}' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/john-deere-credentials' Response# A John Deere credentials with status. Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"tokenMetadata\": {\"scopes\": [\"str\"]}, \"clientKey\": \"str\", \"clientSecret\": \"str\", \"accessToken\": \"str\", \"refreshToken\": \"str\", \"clientEnvironment\": \"STAGE or PRODUCTION\" } "},{"title":"Delete John Deere credentials","type":1,"pageTitle":"John Deere Credentials","url":"docs/credentials_john_deere#delete-john-deere-credentials","content":" DELETE /users/{leafUserId}/john-deere-credentials Delete Leaf User's John Deere credentials. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/john-deere-credentials' "},{"title":"Troubleshooting","type":1,"pageTitle":"John Deere Credentials","url":"docs/credentials_john_deere#troubleshooting","content":"With these endpoints, you can do some troubleshooting to see your credential's health. "},{"title":"Events","type":1,"pageTitle":"John Deere Credentials","url":"docs/credentials_john_deere#events","content":" GET /users/{leafUserId}/john-deere-credentials/events Get the logs of the provider credential based on the LeafUserId sent. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId} /john-deere-credentials/events' Response# Copy [ { \"body\": \"string\", \"createdDate\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"headers\": \"string\", \"id\": \"string\", \"statusCode\": \"int\" } ] warning The logs are available only for 30 days and once the credential is deleted or disassociated with the Leaf User, the logs are no longer available. "},{"title":"CNHI Credentials","type":0,"sectionRef":"#","url":"docs/credentials_cnhi","content":"","keywords":""},{"title":"CNHI Credentials Endpoints","type":1,"pageTitle":"CNHI Credentials","url":"docs/credentials_cnhi#cnhi-credentials-endpoints","content":""},{"title":"Get the CNHI credentials","type":1,"pageTitle":"CNHI Credentials","url":"docs/credentials_cnhi#get-the-cnhi-credentials","content":" GET /users/{leafUserId}/cnhi-credentials  Get the CNHI credentials of the Leaf User based on its id and returns a JSON with the credentials. If during background processing we detect that this credential is no longer valid, the value of the status will be changed.  Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/cnhi-credentials' Response# Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"clientId\": \"str\", \"clientSecret\": \"str\", \"refreshToken\": \"str\", \"clientEnvironment\": \"STAGE or PRODUCTION\", \"subscriptionKey\": \"str\" } "},{"title":"Create a CNHI credentials","type":1,"pageTitle":"CNHI Credentials","url":"docs/credentials_cnhi#create-a-cnhi-credentials","content":" POST /users/{leafUserId}/cnhi-credentials Create a CNHI credentials for the Leaf User. Request body# Copy { \"clientId\": \"str\", \"clientSecret\": \"str\", \"subscriptionKey\": \"str\", \"refreshToken\": \"str\", \"clientEnvironment\": \"STAGE or PRODUCTION\" } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -H 'Content-Type: application/json' \\ -d '{\"clientId\": \"str\", \"clientSecret\": \"str\", \"subscriptionKey\": \"str\", \"refreshToken\": \"str\", \"clientEnvironment\": \"STAGE or PRODUCTION\"}' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/cnhi-credentials' Response# A CNHI credentials with status. Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"clientId\": \"str\", \"clientSecret\": \"str\", \"refreshToken\": \"str\", \"clientEnvironment\": \"STAGE or PRODUCTION\", \"subscriptionKey\": \"str\" } "},{"title":"Delete CNHI credentials","type":1,"pageTitle":"CNHI Credentials","url":"docs/credentials_cnhi#delete-cnhi-credentials","content":" DELETE /users/{leafUserId}/cnhi-credentials Delete Leaf User's CNHI credentials. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/cnhi-credentials' "},{"title":"Troubleshooting","type":1,"pageTitle":"CNHI Credentials","url":"docs/credentials_cnhi#troubleshooting","content":"With these endpoints, you can do some troubleshooting to see your credential's health. "},{"title":"Events","type":1,"pageTitle":"CNHI Credentials","url":"docs/credentials_cnhi#events","content":" GET /users/{leafUserId}/cnhi-credentials/events Get the logs of the provider credential based on the LeafUserId sent. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId} /cnhi-credentials/events' Response# Copy [ { \"body\": \"string\", \"createdDate\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"headers\": \"string\", \"id\": \"string\", \"statusCode\": \"int\" } ] warning The logs are available only for 30 days and once the credential is deleted or disassociated with the Leaf User, the logs are no longer available. "},{"title":"Lindsay Credentials","type":0,"sectionRef":"#","url":"docs/credentials_lindsay","content":"","keywords":""},{"title":"Lindsay Credentials Endpoints","type":1,"pageTitle":"Lindsay Credentials","url":"docs/credentials_lindsay#lindsay-credentials-endpoints","content":""},{"title":"Get the Lindsay credentials","type":1,"pageTitle":"Lindsay Credentials","url":"docs/credentials_lindsay#get-the-lindsay-credentials","content":" GET /users/{leafUserId}/lindsay-credentials  Get the Lindsay credentials of the Leaf User based on its id and returns a JSON with the credentials. If during background processing we detect that this credential is no longer valid, the value of the status will be changed.  Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/lindsay-credentials' Response# Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"tokenMetadata\": {\"scopes\": [\"str\"]}, \"clientId\": \"str\", \"clientSecret\": \"str\", \"clientEnvironment\": \"STAGE\", \"accessToken\": \"str\", \"refreshToken\": \"str\" } "},{"title":"Create a Lindsay credentials","type":1,"pageTitle":"Lindsay Credentials","url":"docs/credentials_lindsay#create-a-lindsay-credentials","content":" POST /users/{leafUserId}/lindsay-credentials Create a Lindsay credentials for the Leaf User. Request body# Copy { \"clientId\": \"str\", \"clientSecret\": \"str\", \"refreshToken\": \"str\", \"clientEnvironment\": \"STAGE\" or \"PRODUCTION\" } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{\"clientId\": \"str\",\"clientSecret\": \"str\",\"refreshToken\": \"str\", \"clientEnvironment\": \"STAGE\"}' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/lindsay-credentials' Response# A Lindsay credentials with status. Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"tokenMetadata\": {\"scopes\": [\"str\"]}, \"clientId\": \"str\", \"clientSecret\": \"str\", \"clientEnvironment\": \"STAGE\", \"accessToken\": \"str\", \"refreshToken\": \"str\" } "},{"title":"Delete Lindsay credentials","type":1,"pageTitle":"Lindsay Credentials","url":"docs/credentials_lindsay#delete-lindsay-credentials","content":" DELETE /users/{leafUserId}/lindsay-credentials Delete Leaf User's Lindsay credentials. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/lindsay-credentials' "},{"title":"Troubleshooting","type":1,"pageTitle":"Lindsay Credentials","url":"docs/credentials_lindsay#troubleshooting","content":"With these endpoints, you can do some troubleshooting to see your credential's health. "},{"title":"Events","type":1,"pageTitle":"Lindsay Credentials","url":"docs/credentials_lindsay#events","content":" GET /users/{leafUserId}/lindsay-credentials/events Get the logs of the provider credential based on the LeafUserId sent. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId} /lindsay-credentials/events' Response# Copy [ { \"body\": \"string\", \"createdDate\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"headers\": \"string\", \"id\": \"string\", \"statusCode\": \"int\" } ] warning The logs are available only for 30 days and once the credential is deleted or disassociated with the Leaf User, the logs are no longer available. "},{"title":"Raven Credentials","type":0,"sectionRef":"#","url":"docs/credentials_raven","content":"","keywords":""},{"title":"Raven Credentials Endpoints","type":1,"pageTitle":"Raven Credentials","url":"docs/credentials_raven#raven-credentials-endpoints","content":""},{"title":"Get the Raven credentials","type":1,"pageTitle":"Raven Credentials","url":"docs/credentials_raven#get-the-raven-credentials","content":" GET /users/{leafUserId}/raven-credentials  Get the Raven credentials of the Leaf User based on its id and returns a JSON with the credentials. If during background processing we detect that this credential is no longer valid, the value of the status will be changed.  Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/raven-credentials' Response# Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"tokenMetadata\": {\"scopes\": [\"str\"]}, \"clientId\": \"str\", \"clientSecret\": \"str\", \"refreshToken\": \"str\", \"accessToken\": \"str\" } "},{"title":"Create a Raven credentials","type":1,"pageTitle":"Raven Credentials","url":"docs/credentials_raven#create-a-raven-credentials","content":" POST /users/{leafUserId}/raven-credentials Create a Raven credentials for the Leaf User. Request body# Copy { \"clientId\": \"str\", \"clientSecret\": \"str\", \"refreshToken\": \"str\" } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -H 'Content-Type: application/json' \\ -d '{ \"clientId\": \"str\",\"clientSecret\": \"str\",\"refreshToken\":\"str\"}' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/raven-credentials' Response# A Raven Credentials with status. Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"tokenMetadata\": {\"scopes\": [\"str\"]}, \"clientId\": \"str\", \"clientSecret\": \"str\", \"refreshToken\": \"str\", \"accessToken\": \"str\" } "},{"title":"Delete Raven credentials","type":1,"pageTitle":"Raven Credentials","url":"docs/credentials_raven#delete-raven-credentials","content":" DELETE /users/{leafUserId}/raven-credentials Delete Leaf User's Raven credentials. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/raven-credentials' "},{"title":"Troubleshooting","type":1,"pageTitle":"Raven Credentials","url":"docs/credentials_raven#troubleshooting","content":"With these endpoints, you can do some troubleshooting to see your credential's health. "},{"title":"Events","type":1,"pageTitle":"Raven Credentials","url":"docs/credentials_raven#events","content":" GET /users/{leafUserId}/raven-credentials/events Get the logs of the provider credential based on the LeafUserId sent. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId} /raven-credentials/events' Response# Copy [ { \"body\": \"string\", \"createdDate\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"headers\": \"string\", \"id\": \"string\", \"statusCode\": \"int\" } ] warning The logs are available only for 30 days and once the credential is deleted or disassociated with the Leaf User, the logs are no longer available. "},{"title":"Sentera Credentials","type":0,"sectionRef":"#","url":"docs/credentials_sentera","content":"","keywords":""},{"title":"Sentera Credentials Endpoints","type":1,"pageTitle":"Sentera Credentials","url":"docs/credentials_sentera#sentera-credentials-endpoints","content":""},{"title":"Get the Sentera credentials","type":1,"pageTitle":"Sentera Credentials","url":"docs/credentials_sentera#get-the-sentera-credentials","content":" GET /users/{leafUserId}/sentera-credentials  Get the Sentera credentials of the Leaf User based on its id and returns a JSON with the credentials. If during background processing we detect that this credential is no longer valid, the value of the status will be changed.  Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/sentera-credentials' Response# Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"username\": \"str\", \"authToken\": \"str\", \"organizationId\": \"str\", \"organizationName\": \"str\" } "},{"title":"Create a Sentera credentials","type":1,"pageTitle":"Sentera Credentials","url":"docs/credentials_sentera#create-a-sentera-credentials","content":" POST /users/{leafUserId}/sentera-credentials Create a Sentera credentials for the Leaf User. Request body# Copy { \"username\": \"str\", \"password\": \"str\", \"organizationName\":\"str\" } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -H 'Content-Type: application/json' \\ -d '{ \"username\": \"str\", \"password\": \"str\", \"organizationName\": \"str\"}' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/sentera-credentials' Response# A Sentera Credentials with status. Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"username\": \"str\", \"authToken\": \"str\", \"organizationId\": \"str\", \"organizationName\": \"str\" } "},{"title":"Delete Sentera credentials","type":1,"pageTitle":"Sentera Credentials","url":"docs/credentials_sentera#delete-sentera-credentials","content":" DELETE /users/{leafUserId}/sentera-credentials Delete Leaf User's Sentera credentials. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/sentera-credentials' "},{"title":"Troubleshooting","type":1,"pageTitle":"Sentera Credentials","url":"docs/credentials_sentera#troubleshooting","content":"With these endpoints, you can do some troubleshooting to see your credential's health. "},{"title":"Events","type":1,"pageTitle":"Sentera Credentials","url":"docs/credentials_sentera#events","content":" GET /users/{leafUserId}/sentera-credentials/events Get the logs of the provider credential based on the LeafUserId sent. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId} /sentera-credentials/events' Response# Copy [ { \"body\": \"string\", \"createdDate\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"headers\": \"string\", \"id\": \"string\", \"statusCode\": \"int\" } ] warning The logs are available only for 30 days and once the credential is deleted or disassociated with the Leaf User, the logs are no longer available. "},{"title":"Raven Slingshot Credentials","type":0,"sectionRef":"#","url":"docs/credentials_raven_slingshot","content":"","keywords":""},{"title":"Raven Slingshot Credentials Endpoints","type":1,"pageTitle":"Raven Slingshot Credentials","url":"docs/credentials_raven_slingshot#raven-slingshot-credentials-endpoints","content":""},{"title":"Get the Raven Slingshot credentials","type":1,"pageTitle":"Raven Slingshot Credentials","url":"docs/credentials_raven_slingshot#get-the-raven-slingshot-credentials","content":" GET /users/{leafUserId}/raven-slingshot-credentials  Get the Raven Slingshot credentials of the Leaf User based on its id and returns a JSON with the credentials. If during background processing we detect that this credential is no longer valid, the value of the status will be changed.  Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/raven-slingshot-credentials' Response# Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"apiKey\": \"str\", \"accessKey\": \"str\", \"sharedSecret\": \"str\" } "},{"title":"Create a Raven Slingshot credentials","type":1,"pageTitle":"Raven Slingshot Credentials","url":"docs/credentials_raven_slingshot#create-a-raven-slingshot-credentials","content":" POST /users/{leafUserId}/raven-slingshot-credentials Create a Raven Slingshot credentials for the Leaf User. Request body# Copy { \"apiKey\": \"str\", \"accessKey\": \"str\", \"sharedSecret\": \"str\" } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -H 'Content-Type: application/json' \\ -d '{ \"apiKey\": \"str\", \"accessKey\": \"str\", \"sharedSecret\": \"str\" }' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/raven-slingshot-credentials' Response# A Raven Slingshot Credentials with status. Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"apiKey\": \"str\", \"accessKey\": \"str\", \"sharedSecret\": \"str\" } "},{"title":"Delete Raven Slingshot credentials","type":1,"pageTitle":"Raven Slingshot Credentials","url":"docs/credentials_raven_slingshot#delete-raven-slingshot-credentials","content":" DELETE /users/{leafUserId}/raven-slingshot-credentials Delete Leaf User's Raven Slingshot credentials. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/raven-slingshot-credentials' "},{"title":"Troubleshooting","type":1,"pageTitle":"Raven Slingshot Credentials","url":"docs/credentials_raven_slingshot#troubleshooting","content":"With these endpoints, you can do some troubleshooting to see your credential's health. "},{"title":"Events","type":1,"pageTitle":"Raven Slingshot Credentials","url":"docs/credentials_raven_slingshot#events","content":" GET /users/{leafUserId}/raven-slingshot-credentials/events Get the logs of the provider credential based on the LeafUserId sent. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId} /raven-slingshot-credentials/events' Response# Copy [ { \"body\": \"string\", \"createdDate\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"headers\": \"string\", \"id\": \"string\", \"statusCode\": \"int\" } ] warning The logs are available only for 30 days and once the credential is deleted or disassociated with the Leaf User, the logs are no longer available. "},{"title":"Trimble Credentials","type":0,"sectionRef":"#","url":"docs/credentials_trimble","content":"","keywords":""},{"title":"Trimble Credentials Endpoints","type":1,"pageTitle":"Trimble Credentials","url":"docs/credentials_trimble#trimble-credentials-endpoints","content":""},{"title":"Get the Trimble credentials","type":1,"pageTitle":"Trimble Credentials","url":"docs/credentials_trimble#get-the-trimble-credentials","content":" GET /users/{leafUserId}/trimble-credentials  Get the Trimble credentials of the Leaf User based on its id and returns a JSON with the credentials. If during background processing we detect that this credential is no longer valid, the value of the status will be changed.  Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/trimble-credentials' Response# Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"tokenMetadata\": {\"scopes\": [\"str\"]}, \"clientId\": \"str\", \"clientSecret\": \"str\", \"accessToken\": \"str\", \"refreshToken\": \"str\" } "},{"title":"Create a Trimble credentials","type":1,"pageTitle":"Trimble Credentials","url":"docs/credentials_trimble#create-a-trimble-credentials","content":" POST /users/{leafUserId}/trimble-credentials Create a Trimble credentials for the Leaf User. Request body# Copy { \"clientId\": \"str\", \"clientSecret\": \"str\", \"refreshToken\": \"str\" } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{\"clientId\": \"str\",\"clientSecret\": \"str\",\"refreshToken\": \"str\"}' 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/trimble-credentials' Response# A Trimble credentials with status. Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"tokenMetadata\": {\"scopes\": [\"str\"]}, \"clientKey\": \"str\", \"clientSecret\": \"str\", \"accessToken\": \"str\", \"refreshToken\": \"str\", \"clientEnvironment\": \"STAGE or PRODUCTION\" } "},{"title":"Delete Trimble credentials","type":1,"pageTitle":"Trimble Credentials","url":"docs/credentials_trimble#delete-trimble-credentials","content":" DELETE /users/{leafUserId}/trimble-credentials Delete Leaf User's Trimble credentials. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/trimble-credentials' "},{"title":"Troubleshooting","type":1,"pageTitle":"Trimble Credentials","url":"docs/credentials_trimble#troubleshooting","content":"With these endpoints, you can do some troubleshooting to see your credential's health. "},{"title":"Events","type":1,"pageTitle":"Trimble Credentials","url":"docs/credentials_trimble#events","content":" GET /users/{leafUserId}/trimble-credentials/events Get the logs of the provider credential based on the LeafUserId sent. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId} /trimble-credentials/events' Response# Copy [ { \"body\": \"str\", \"createdDate\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"headers\": \"str\", \"id\": \"str\", \"statusCode\": \"int\" } ] warning The logs are available only for 30 days and once the credential is deleted or disassociated with the Leaf User, the logs are no longer available. "},{"title":"Stara Credentials","type":0,"sectionRef":"#","url":"docs/credentials_stara","content":"","keywords":""},{"title":"Stara Credentials Endpoints","type":1,"pageTitle":"Stara Credentials","url":"docs/credentials_stara#stara-credentials-endpoints","content":""},{"title":"Get the Stara credentials","type":1,"pageTitle":"Stara Credentials","url":"docs/credentials_stara#get-the-stara-credentials","content":" GET /users/{leafUserId}/stara-credentials  Get the Stara credentials of the Leaf User based on its id and returns a JSON with the credentials. If during background processing we detect that this credential is no longer valid, the value of the status will be changed.  Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/stara-credentials' Response# Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"accessTokenClient\": \"str\", \"refreshToken\": \"str\", \"accessToken\": \"str\", \"apiKey\": \"str\" } "},{"title":"Create a Stara credentials","type":1,"pageTitle":"Stara Credentials","url":"docs/credentials_stara#create-a-stara-credentials","content":" POST /users/{leafUserId}/stara-credentials Create a Stara credentials for the Leaf User. Request body# Copy { \"apiKey\": \"str\", \"accessToken\": \"str\", \"accessTokenClient\": \"str\", \"refreshToken\": \"str\" } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -H 'Content-Type: application/json' \\ -d '{\"apiKey\": \"str\", \"accessToken\": \"str\", \"accessTokenClient\": \"str\", \"refreshToken\": \"str\"}' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/stara-credentials' Response# A Stara Credentials with status. Copy { \"id\": \"str\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"accessTokenClient\": \"str\", \"refreshToken\": \"str\", \"accessToken\": \"str\", \"apiKey\": \"str\" } "},{"title":"Delete Stara credentials","type":1,"pageTitle":"Stara Credentials","url":"docs/credentials_stara#delete-stara-credentials","content":" DELETE /users/{leafUserId}/stara-credentials Delete Leaf User's Stara credentials. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/stara-credentials' "},{"title":"Troubleshooting","type":1,"pageTitle":"Stara Credentials","url":"docs/credentials_stara#troubleshooting","content":"With these endpoints, you can do some troubleshooting to see your credential's health. "},{"title":"Events","type":1,"pageTitle":"Stara Credentials","url":"docs/credentials_stara#events","content":" GET /users/{leafUserId}/stara-credentials/events Get the logs of the provider credential based on the LeafUserId sent. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId} /stara-credentials/events' Response# Copy [ { \"body\": \"string\", \"createdDate\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"headers\": \"string\", \"id\": \"string\", \"statusCode\": \"int\" } ] warning The logs are available only for 30 days and once the credential is deleted or disassociated with the Leaf User, the logs are no longer available. "},{"title":"Valley Credentials","type":0,"sectionRef":"#","url":"docs/credentials_valley","content":"","keywords":""},{"title":"Valley Credentials Endpoints","type":1,"pageTitle":"Valley Credentials","url":"docs/credentials_valley#valley-credentials-endpoints","content":""},{"title":"Get the Valley credentials","type":1,"pageTitle":"Valley Credentials","url":"docs/credentials_valley#get-the-valley-credentials","content":" GET /users/{leafUserId}/valley-credentials  Get the Valley credentials of the Leaf User based on its id and returns a JSON with the credentials. If during background processing we detect that this credential is no longer valid, the value of the status will be changed.  Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/valley-credentials' Response# Copy { \"id\": \"uuid\", \"status\": \"str\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"apid\": \"str\", \"key\": \"str\", \"initializationVector\": \"str\", \"username\": \"str\", } "},{"title":"Create a Valley credentials","type":1,"pageTitle":"Valley Credentials","url":"docs/credentials_valley#create-a-valley-credentials","content":" POST /users/{leafUserId}/valley-credentials Create a Valley credentials for the Leaf User. Request body# Copy { \"apid\": \"str\", \"initializationVector\": \"str\", \"key\": \"str\", \"username\": \"str\", \"password\": \"str\" } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{\"apid\": \"str\", \"initializationVector\": \"str\", \"key\": \"str\", \"username\": \"str\", \"password\": \"str\"}' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/valley-credentials' Response# A Valley credentials with status. Copy { \"id\": \"uuid\", \"status\": \"OK\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"apid\": \"str\", \"key\": \"str\", \"initializationVector\": \"str\", \"username\": \"str\", } "},{"title":"Delete Valley credentials","type":1,"pageTitle":"Valley Credentials","url":"docs/credentials_valley#delete-valley-credentials","content":" DELETE /users/{leafUserId}/valley-credentials Delete Leaf User's Valley credentials. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/valley-credentials' "},{"title":"Troubleshooting","type":1,"pageTitle":"Valley Credentials","url":"docs/credentials_valley#troubleshooting","content":"With these endpoints, you can do some troubleshooting to see your credential's health. "},{"title":"Events","type":1,"pageTitle":"Valley Credentials","url":"docs/credentials_valley#events","content":" GET /users/{leafUserId}/valley-credentials/events Get the logs of the provider credential based on the LeafUserId sent. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId} /valley-credentials/events' Response# Copy [ { \"body\": \"string\", \"createdDate\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"headers\": \"string\", \"id\": \"string\", \"statusCode\": \"int\" } ] warning The logs are available only for 30 days and once the credential is deleted or disassociated with the Leaf User, the logs are no longer available. "},{"title":"Crop Monitoring Overview","type":0,"sectionRef":"#","url":"docs/crop_monitoring_overview","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Crop Monitoring Overview","url":"docs/crop_monitoring_overview#about","content":"Using Leaf's Crop Monitoring service you will be able to easily implement a satellite imagery application and compare the field health evolution over time. You can get historical images with Leaf. By default, Leaf retrieves images from 30 days prior to the creation of your field. But you can increase that to as far back in time as you want.Here's how  This API accepts field boundary polygons and returns processed, clipped, and color-corrected RGB, NDVI, and NDRE images every time there is a new image available. We also provide information like percent cloud coverage of the field, the data coverage percentage, and the tile source for each image as well. Currently, our Crop Monitoring service runs without a relationship between our Field Services, and the User Management Services. However, we are working to integrate it into the leafUser hierarchy, and the Fields Service. See the Satellite API Reference for more information. "},{"title":"Providers","type":1,"pageTitle":"Crop Monitoring Overview","url":"docs/crop_monitoring_overview#providers","content":"Leaf currently offers access to Sentinel-2 and PlanetScope images through its API. Here is a summary comparison between the providers: \tSentinel-2\tPlanetScopeSpatial resolution\t10 m - 60 m\t3 m Temporal resolution\t3 - 5 days\t1 day Spectral resolution\t12 bands\t4 - 5* bands * the number of bands will depend on the asset type requested For all providers, in addition to the images of the isolated bands, the RGB, NDVI, and NDRE composition are available:  "},{"title":"Crop Monitoring Endpoints","type":0,"sectionRef":"#","url":"docs/crop_monitoring_endpoints","content":"","keywords":""},{"title":"Endpoints","type":1,"pageTitle":"Crop Monitoring Endpoints","url":"docs/crop_monitoring_endpoints#endpoints","content":""},{"title":"Get all satellite fields","type":1,"pageTitle":"Crop Monitoring Endpoints","url":"docs/crop_monitoring_endpoints#get-all-satellite-fields","content":" GET /fields Returns paged results for all satellite fields registered. externalId: external ID used in the field's registrationgeometry: a valid MultiPolygon GeoJSON object with the geometry of the fieldsort, the sorting order of the results; can be multi-value, where the first value to be passed will have preference in ordering over the next ones; you can also specify the order as asc or desc with asc being the default. Example: id, desc Valid values for sorting are: createdAt, providers and externalId Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/satellite/api/fields' Response# Copy [ { \"externalId\": \"your field id\", \"createdTime\": \"2024-02-19T17:06:32.131848\", \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [...] }, \"providers\": [ \"sentinel\", \"planet\" ] }, .... ] "},{"title":"Get a satellite field","type":1,"pageTitle":"Crop Monitoring Endpoints","url":"docs/crop_monitoring_endpoints#get-a-satellite-field","content":" GET /fields/{id} Fetches a field entry based on its external id. id: external ID used in the field's registrationgeometry: a valid MultiPolygon GeoJSON object with the geometry of the field Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/satellite/api/fields/{id}' Response# Copy { \"externalId\": \"your field id\", \"createdTime\": \"2024-02-19T17:06:32.131848\", \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [...] }, \"providers\": [ \"sentinel\", \"planet\" ], \"extent\": { \"xmin\": 0.0, \"xmax\": 0.0, \"ymin\": 0.0, \"ymax\": 0.0 } } "},{"title":"Get images of satellite field","type":1,"pageTitle":"Crop Monitoring Endpoints","url":"docs/crop_monitoring_endpoints#get-images-of-satellite-field","content":" GET /fields/{id}/processes Returns images for a given field id. We return the following images (tifs are EPSG:4326, pngs are EPSG:3857): RGB as tiff and as pngColorized NDVI as tiff and as pngRaw NDVI as tiffAll bands as tiff. Check the comparison page to identify the resolution and bands available for each provider. It is possible to filter the results by a number of different parameters: Parameter\tType\tDescription\tDefaultstartDate\tISO 8601 datetime format\tretrieve images taken after this day\t- endDate\tISO 8601 datetime format\tretrieve images taken until this day\t- startProcessedTimestamp\tISO 8601 datetime format\tretrieve images processed by Leaf after this day\t- endProcessedTimestamp\tISO 8601 datetime format\tretrieve images processed by Leaf until this day\t- maxClouds\tdouble between 0.0 and 100.0\tfilter processes with clouds less than or equal to this percentage\t100 minCoverage\tdouble between 0.0 and 100.0\tfilter processes with coverage greater than or equal to this percentage\t0.0 status\tstring \"SUCCESS\", \"FAILED\" or \"STARTED\"\tretrieve images with selected status\tSUCCESS page\tinteger\tpage being fetched\t0 size\tinteger\thow many processes (sets of all images) to return per page\t20 provider\tarray of string\tsentinel or/and planet\tIf none is defined, it will created with sentinel only Important If you have just created the satellite field, it may take a moment time for the images to become available. Request examples# cURLPythonJavaScript Copy curl -X GET \\ --header 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/satellite/api/fields/{id}/processes?startDate=2020-06-03&endDate=2020-06-10' Response# Copy [ { \"id\": 0, \"date\": \"2020-06-03T19:03:57.882Z\", \"clouds\": 0, \"provider\": \"sentinel\", \"bucketName\": \"sentinel-s2-l2a\", \"bucketKey\": \"tiles/10/S/FH/2020/6/3/0\", \"bucketRegion\": \"eu-central-1\", \"status\": \"SUCCESS\", \"coverage\": 100, \"images\": [ { \"url\": \"URL\", \"downloadUrl\": \"URL\", \"type\": \"tif\", \"resolution\": 20 }, .... ], \"processedTimestamp\": \"2020-06-03T19:03:58.881731Z\" }, .... ] date: the date of the satellite imageclouds: cloud coverage percentage of the field, from 0 to 100provider: the satellite provider (sentinel or planet) from where this process was created.bucketName: name of satellite image bucket where the original tile is. Usuallysentinel-s2-l2a or leaf-planet-images-prdbucketRegion: AWS region of original image's bucket. Usually eu-central-1bucketKey: base path of original satellite imagestatus: status of the process. It will be either SUCCESS or FAILUREcoverage: data coverage percentage of the field, from 0 to 100images: each image in this list will have the following data: url: URL of the imagedownloadUrl: URL of the imagetype: the type of the image. One of tif, ndvi, png andtif_colorizedresolution: resolution, in meters, of the image. See table below processedTimestamp: the timestamp of when the process was processed "},{"title":"Get an image of satellite field","type":1,"pageTitle":"Crop Monitoring Endpoints","url":"docs/crop_monitoring_endpoints#get-an-image-of-satellite-field","content":" GET /fields/{id}/processes/{id} Returns a single process for the field. Request examples# cURLPythonJavaScript Copy curl -X GET \\ --header 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/satellite/api/fields/{id}/processes/{id}' Response# Copy { \"id\": 0, \"date\": \"2020-06-03T19:03:57.882Z\", \"clouds\": 0, \"provider\": \"sentinel\", \"bucketName\": \"sentinel-s2-l2a\", \"bucketKey\": \"tiles/10/S/FH/2020/6/3/0\", \"bucketRegion\": \"eu-central-1\", \"status\": \"SUCCESS\", \"coverage\": 100, \"images\": [ { \"url\": \"URL\", \"downloadUrl\": \"URL\", \"type\": \"tif\", \"resolution\": 20 }, # etc... ], \"processedTimestamp\": \"2020-06-03T19:03:58.881731Z\" } "},{"title":"Create a satellite field","type":1,"pageTitle":"Crop Monitoring Endpoints","url":"docs/crop_monitoring_endpoints#create-a-satellite-field","content":" POST /fields Creates a new field. It will be continuously monitored forever, and new images will arrive based on the provider selected, because each one of them has a different temporal resolution (time it takes for the satellite to go over the same field when orbiting the Earth). If you don't need the field anymore, you candelete the field. Note By default, Leaf will return images for your field from the last 30 days (from the moment you create the field). You can change that by including a \"startDate\" or a \"daysBefore\" to the body There are two ways you can do that: set a startDate (ISO, \"yyyy-mm-dd\") meaning Leaf will return all images for your field since this date. set how many daysBefore (an integer greater than or equal to 0) you want to get images from. Note that they are both optional, but you can not specify both. Now let's see the Payload Request body# Copy { \"externalId\": \"yourSatelliteFieldId\", \"startDate\": \"2019-01-01\", \"providers\": [ \"planet\" ], \"assetTypes\": [ \"ortho_analytic_8b_sr\" ], \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [...] } } externalId: external ID used in the field's registration.geometry: a valid MultiPolygon GeoJSON object with the geometry of the field.providers: Specify the satellite imagery source, if none is specified, Sentinel images will be retrived by default.assetTypes: If the providers property contains planet you can select which assetType will be retrived, which can be more than one. The available values are ortho_analytic_8b_sr, ortho_analytic_8b, ortho_analytic_8b_xml, ortho_visual and ortho_udm2. The default value is ortho_analytic_8b_sr. Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Content-Type: application/json' \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ your payload }' \\ 'https://api.withleaf.io/services/satellite/api/fields' field size limit the field cannot be larger than 50k hectares (123k acres) andcannot have a perimeter bigger than 300km (180 miles). Sample geometry# If you are looking for a geometry for testing purposes you can use this one. Copy { \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [ [[[ -48.95275447, -22.49608], [ -48.95379286, -22.49675703], [ -48.9591836, -22.50310243], [ -48.96225525, -22.5067235], [ -48.94852019, -22.50648371], [ -48.94780839, -22.49693998], [ -48.95275447, -22.49608] ]]] } } Restrictions# The satellite field creation will fail if the geometry doesn't fit the Planet requirements listed below: The geometry must be valid, it cannot have self-intersection, for example;The smallest possible area for each inner ring is 1 m²;The maximum number of vertices allowed is 1,500 vertices. "},{"title":"Delete a satellite field","type":1,"pageTitle":"Crop Monitoring Endpoints","url":"docs/crop_monitoring_endpoints#delete-a-satellite-field","content":" DELETE /fields/{id} Deletes the field from our database. warning Note that the field deletion is irreversible and all images will be lost. (But you can always create a new field and get images from the past, as far as you want). Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/satellite/api/fields/{id}' "},{"title":"Get subscription for Planet","type":1,"pageTitle":"Crop Monitoring Endpoints","url":"docs/crop_monitoring_endpoints#get-subscription-for-planet","content":" GET /fields/{id}/subscription Get the subscription from Planet. It returns the assetTypes, itemTypes and startDate for a field. Request examples# cURLPythonJavaScript Copy curl -X GET \\ --header 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/satellite/api/fields/{id}/subscription' Response# Copy { \"planetAssetTypes\": [ \"ortho_analytic_8b_sr\", \"ortho_udm2\" ], \"planetItemTypes\": [ \"PSScene\" ], \"startDate\": \"2023-04-09T00:00:00Z\" } "},{"title":"Reprocess satellite images","type":1,"pageTitle":"Crop Monitoring Endpoints","url":"docs/crop_monitoring_endpoints#reprocess-satellite-images","content":" POST /fields/{id}/process/{id}/reprocess Allows reprocessing the satellite images based on a processId. Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/fields/{id}/process/{id}/reprocess' "},{"title":"Alerts","type":1,"pageTitle":"Crop Monitoring Endpoints","url":"docs/crop_monitoring_endpoints#alerts","content":"With Alerts you can be notified when something happens or changes instead of needing to repeatedly query for changes. Leaf Alerts support events that happen within Leaf and events that happen within supported 3rd party software. "},{"title":"List of Crop Monitoring Events","type":1,"pageTitle":"Crop Monitoring Endpoints","url":"docs/crop_monitoring_endpoints#list-of-crop-monitoring-events","content":"Leaf Crop Monitoring Service can Alert you on these events: list of Crop Monitoring Events "},{"title":"Sentinel Overview","type":0,"sectionRef":"#","url":"docs/crop_monitoring_sentinel_overview","content":"","keywords":""},{"title":"Clouds","type":1,"pageTitle":"Sentinel Overview","url":"docs/crop_monitoring_sentinel_overview#clouds","content":"We use the cloud mask provided by Sentinel-2 to calculate the clouds coverage percentage. See the Crop Monitoring API Reference for more information. "},{"title":"Planet Overview","type":0,"sectionRef":"#","url":"docs/crop_monitoring_planet_overview","content":"","keywords":""},{"title":"Available asset types","type":1,"pageTitle":"Planet Overview","url":"docs/crop_monitoring_planet_overview#available-asset-types","content":"ortho_analytic_8b_sr# PlanetScope atmospherically corrected surface reflectance product. File\tBand nameBand 1\tCoastal Blue Band 2\tBlue Band 3\tGreen I Band 4\tGreen Band 5\tYellow Band 6\tRed Band 7\tRed Edge Band 8\tNear-infrared ortho_analytic_8b#  Radiometrically-calibrated analytic image stored as 16-bit scaled radiance.  File\tBand nameBand 1\tCoastal Blue Band 2\tBlue Band 3\tGreen I Band 4\tGreen Band 5\tYellow Band 6\tRed Band 7\tRed Edge Band 8\tNear-infrared ortho_analytic_8b_xml# Radiometrically-calibrated analytic image metadata. ortho_visual# Visual image with color-correction. File\tBand nameBand 1\tRed Band 2\tBlue Band 3\tGreen ortho_udm2# Usable data mask (Cloud 2.0). File\tDescriptionBand 1\tClear map Band 2\tSnow map Band 3\tShadow map Band 4\tLight haze map Band 5\tHeavy haze map Band 6\tCloud map Band 7\tConfidence map Band 8\tUnusable pixels "},{"title":"PSScene","type":1,"pageTitle":"Planet Overview","url":"docs/crop_monitoring_planet_overview#psscene","content":"More info at Planet documentation. "},{"title":"Field Boundary Management Endpoints","type":0,"sectionRef":"#","url":"docs/field_boundaries_endpoints","content":"Documentation update! We are updating our documentation and this page was moved to here.","keywords":""},{"title":"Crops","type":0,"sectionRef":"#","url":"docs/crops","content":"Here is a list of all the crops we currently support. The most common are \"corn\" and \"soybeans\". Crop String\"none\" \"alfalfa\" \"barley\" \"edible beans\" \"navy beans\" \"canola\" \"flax\" \"grass seeds\" \"lentils\" \"millet\" \"mustard\" \"oats\" \"black eyed peas\" \"field peas\" \"yellow popcorn\" \"white popcorn\" \"rapeseed\" \"rice long\" \"rice medium\" \"rye\" \"safflower\" \"sorghum\" \"sunflower oil\" \"sunflower stripe\" \"durum wheat\" \"hard red spring wheat\" \"hard red winter wheat\" \"soft red winter wheat\" \"white wheat\" \"chickpeas\" \"lupins\" \"european spring barley\" \"european winter barley\" \"european barley 6\" \"european corn\" \"european oats\" \"european peas\" \"european popcorn\" \"rapeseed e ind\" \"european rye\" \"sunflower e ind\" \"sunflower e oil\" \"european triticale\" \"european wheat feed\" \"european wheat wtr\" \"rapeseed e oil\" \"asparagus\" \"balm\" \"beets\" \"belgian endive\" \"broad beans\" \"broccoli\" \"brussels sprouts\" \"buckwheat\" \"cabbage lettuce\" \"caraway seed\" \"carrots\" \"castor beans\" \"cauliflower\" \"celery\" \"chervil\" \"chicory\" \"chinese cabbage\" \"clover\" \"corn silage\" \"corn cob mix\" \"corn salad\" \"crambe\" \"cucumber\" \"digitalis lanate\" \"dill\" \"elephant grass\" \"endives\" \"english rye grass\" \"evening primrose\" \"field meadow grass\" \"fodder beet\" \"french beans\" \"gherkin\" \"ginseng\" \"grain maize\" \"grass forage\" \"grassland\" \"green cabbage\" \"green peas\" \"hard fescue grass\" \"haricot beans\" \"headed cabbage\" \"hemp\" \"hops\" \"hypericum\" \"iceberg salad\" \"italian rye grass\" \"jerusalem artichoke\" \"kale\" \"leek\" \"lettuce\" \"lucerne\" \"lupine\" \"marowfat peas\" \"melon\" \"mushrooms\" \"onions\" \"oregano\" \"parsley\" \"peanuts\" \"picklers\" \"poppy seed\" \"sweet potatoes\" \"potatoes for chips\" \"potatoes for retail\" \"potatoes for starch\" \"pumpkins\" \"radicchio\" \"raddice\" \"red beet\" \"red cabbage\" \"red fescue grass\" \"red kidney beans\" \"rettich\" \"rhubarb\" \"salad\" \"savoy cabbage\" \"scorzonera\" \"seed potatoes\" \"sesame\" \"shallots\" \"silver onions\" \"spear grass\" \"spinach\" \"strawberries\" \"stubbel tuber\" \"sugarbeet\" \"sugar cane\" \"sugar corn\" \"tankard turnip\" \"tick beans\" \"tobacco\" \"tomatoes\" \"tuber fennel\" \"turnip cabbage\" \"turnip rooted celery\" \"vetch\" \"white beans\" \"white cabbage\" \"wood carrot\" \"set aside\" \"hyracinth\" \"tulip\" \"narcissus\" \"gladiolus\" \"crocus\" \"lily\" \"iris\" \"dahlia\" \"apples\" \"pears\" \"peaches\" \"apricots\" \"melons tree\" \"oranges\" \"lemons\" \"almonds\" \"vines\" \"olives\" \"jalapeno\" \"cantaloupe\" \"honeydew\" \"squash\" \"green beans\" \"lima beans\" \"sweet corn\" \"canary seed\" \"corn\" \"soybeans\" \"cotton\" \"boot stage wcs\" \"energy cane\" \"mung bean\" \"sudangrass\" \"canola polish\" \"mustard gisilba\" \"lentil crimson\" \"lentil eston\" \"lentil chilean\" \"lentil laird\" \"pea trapper\" \"unspecified crop\" \"garlic\" \"rutabaga\" \"macadamia\" \"pecan\" \"walnut\" \"blueberry\" \"cranberry\" \"raspberry\" \"watermelon\" \"orchardgrass\" \"downy bromegrass\" \"smooth bromegrass\" \"reed canary grass\" \"tall fescue\" \"timothy grass\" \"bermuda grass\" \"festulolium\" \"grass clover\" \"grass alfalfa\" \"forage mix\"","keywords":""},{"title":"Field Boundary Management Overview","type":0,"sectionRef":"#","url":"docs/field_boundaries_overview","content":"Documentation update! We are updating our documentation and this page was moved to here.","keywords":""},{"title":"Field Boundary Management Overview","type":0,"sectionRef":"#","url":"docs/field_boundary_management_overview","content":"","keywords":""},{"title":"Getting started","type":1,"pageTitle":"Field Boundary Management Overview","url":"docs/field_boundary_management_overview#getting-started","content":"To help you get started, we’ve created a quickstart Postman collection. To make calls to Leaf's field API, you will first need to go through the previous documentation steps from Leaf registration/authentication to provider authentication. Once you’ve successfully connected a provider, you can manage the field boundary endpoints on the next page. "},{"title":"How field data is structured","type":1,"pageTitle":"Field Boundary Management Overview","url":"docs/field_boundary_management_overview#how-field-data-is-structured","content":" Leaf uses a Grower/Farm/Field hierarchy to organize data.A grower (also known as Leaf User) is the data owner entity to which credentials are attached.Farm(s) can be grouped together under a Grower and Field(s) can be grouped under a FarmEach field is tied to a field ID and its field boundary is tied to a boundary ID, which is the central concept for organizing boundary data. There can only be one active boundary per field.Machine Files that Leaf merges into Operations are the results of operational tasks performed in a given Field. "},{"title":"FAQs","type":1,"pageTitle":"Field Boundary Management Overview","url":"docs/field_boundary_management_overview#faqs","content":"Can I use the fields and boundaries from my app/platform instead of connecting it from a provider? Yes, you can manually create boundaries from geoJSONs with a POST call for a Leaf User. "},{"title":"Upload Field Boundary Endpoints","type":0,"sectionRef":"#","url":"docs/field_boundary_management_upload_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Upload Field Boundary Endpoints","url":"docs/field_boundary_management_upload_endpoints#about","content":"This file upload service allows the creation of field boundaries from uploaded field files. It currently supports creating field boundaries using polygon and multi-polygon geometries from zip files that contain shapefiles, GeoJSON, or KML files. To call them easily, we recommend using Leaf's Postman collection. All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/uploadservice/api There is a REST resources section if you want to check it out. This service has the following endpoints available: Description\tEndpointsUpload a field file\tPOST /upload Get all uploads\tGET /upload Get an upload\tGET /upload/{uploadId} Get the upload entries\tGET /upload/{uploadId}/entries "},{"title":"Upload endpoints","type":1,"pageTitle":"Upload Field Boundary Endpoints","url":"docs/field_boundary_management_upload_endpoints#upload-endpoints","content":""},{"title":"Upload a field file","type":1,"pageTitle":"Upload Field Boundary Endpoints","url":"docs/field_boundary_management_upload_endpoints#upload-a-field-file","content":" POST /upload Creates field boundaries in Leaf from files. The file must be sent as a zip. It supports polygons and multi-polygons from the following spatial formats: Shapefile (minimum *.shp, *.dbf, and *.shx must be present)GeoJSONKML/KMZ This endpoint accepts a .zip of multilevel files, detects the valid files from the .zip, and returns the ID of the upload, which can be used to retrieve the ID's of the fields created/processed in the entries endpoint. Limitations Currently, our upload endpoints accepts files with the maximum size limited to 3 gigabytes and with up to 100 fields per upload. This endpoint requires the leafUserId parameter and it also accepts the optional farmId parameter, which supports any existent Leaf farm ID and if present, all valid fields will be created under the informed farm. Leaf will project all the geometries to WGS 84 (EPSG:4326). If there is a property/column called name available in the file, Leaf API will use it as the field name property. Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -F 'file=shapefile.zip' \\ 'https://api.withleaf.io/services/uploadservice/api/upload?' \\ 'leafUserId={leafUserId}' Response# Copy { \"id\": \"uuid\", \"leafUserId\": \"uuid\", \"originalFileUrl\": \"url\", \"fileName\": \"shapefile.zip\", \"status\": \"RECEIVED\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" } The upload ID returned as id can be used to retrieve on Get an upload the updated status and individual processed fields IDs. Upload status# The possible status are: Status\tDescriptionRECEIVED\tIs the default state for every upload created PROCESSED\tWhen all the files included in the upload were processed, and at least one file have status SUCCESS FAILED\tThe upload did not generated any field boundary with status SUCCESS "},{"title":"Get all uploads","type":1,"pageTitle":"Upload Field Boundary Endpoints","url":"docs/field_boundary_management_upload_endpoints#get-all-uploads","content":" GET /upload Gets all uploads. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/uploadservice/api/upload' Response# Copy [ { \"id\": \"uuid\", \"leafUserId\": \"uuid\", \"originalFileUrl\": \"url\", \"fileName\": \"file.zip\", \"status\": \"PROCESSED\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" }, { \"id\": \"uuid\", \"leafUserId\": \"uuid\", \"originalFileUrl\": \"url\", \"fileName\": \"shapefile.zip\", \"status\": \"RECEIVED\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" } ] The possible status are listed here. "},{"title":"Get an upload","type":1,"pageTitle":"Upload Field Boundary Endpoints","url":"docs/field_boundary_management_upload_endpoints#get-an-upload","content":" GET /upload/{uploadId} Gets an upload by the upload id. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/uploadservice/api/upload/{uploadId}' Response# Copy { \"id\": \"uuid\", \"leafUserId\": \"uuid\", \"originalFileUrl\": \"url\", \"fileName\": \"shapefile.zip\", \"status\": \"PROCESSED\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" } The possible status are listed here. "},{"title":"Get the upload entries","type":1,"pageTitle":"Upload Field Boundary Endpoints","url":"docs/field_boundary_management_upload_endpoints#get-the-upload-entries","content":" GET /upload/{uploadId}/entries Returns the result of each file identified as compatible in the processing. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/uploadservice/api/upload/{uploadId}/entries' Response# Copy [ { \"id\": \"uuid\", \"fieldId\": [ \"uuid\", \"uuid\" ], \"converterFormat\": \"GEOJSON\", \"originalFileUrl\": \"url\", \"leafUserId\": \"uuid\", \"uploadId\": \"uuid\", \"status\": \"FINISHED\", \"createFieldErrorDetails\": [], \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"processedTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" }, { \"id\": \"uuid\", \"fieldId\": [ \"uuid\", \"uuid\", \"uuid\" ], \"converterFormat\": \"SHAPEFILE\", \"originalFileUrl\": \"url\", \"leafUserId\": \"uuid\", \"uploadId\": \"uuid\", \"status\": \"FINISHED\", \"createFieldErrorDetails\": [], \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"processedTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" }, { \"id\": \"uuid\", \"fieldId\": [ \"uuid\" ], \"converterFormat\": \"KML\", \"originalFileUrl\": \"url\", \"leafUserId\": \"uuid\", \"uploadId\": \"uuid\", \"status\": \"FINISHED\", \"createFieldErrorDetails\": [], \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"processedTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" } ] The entries response has the list of the fields created for each recognized file, it can be fetched in the fieldId property. More information about the created fields can be fetched using the ID in the Get a field endpoint. The converterFormat will show the identified format: SHAPEFILE, GEOJSON, or KML. If an error occurs for any entry in the file it will be showed in the createFieldErrorDetails array. Copy [ { \"id\": \"uuid\", \"fieldId\": [ \"uuid\", \"uuid\" ], \"converterFormat\": \"GEOJSON\", \"originalFileUrl\": \"url\", \"leafUserId\": \"uuid\", \"uploadId\": \"uuid\", \"status\": \"PARTIALLY_FINISHED\", \"createFieldErrorDetails\": [ \"{\\\"type\\\":\\\"https://www.jhipster.tech/problem/problem-with-message\\\",\\\"title\\\":\\\"Invalid geometry: Self-intersection at POINT (-39.86283923292457 -18.46470271875014)\\\",\\\"status\\\":400,\\\"path\\\":\\\"/api/system/users/bfa69ef7-7577-4902-9e93-890e2878e1fc/createField\\\",\\\"message\\\":\\\"Invalid geometry: Self-intersection at POINT (-39.86283923292457 -18.46470271875014)\\\",\\\"errorKey\\\":\\\"invalidGeometry\\\"}\" ], \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", \"processedTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" } ] The possible status for each file is described below: Status\tDescriptionPROCESSING\tThe file is processing, it is the initial status CONVERTED\tThe file was converted but the process hasn't finished yet FINISHED\tThe file process is finished and the fields were created FAILED\tA failure occurred during the file processing PARTIALLY_FINISHED\tSome of the fields were not created due to a processing error or invalid registers "},{"title":"Crops Table","type":0,"sectionRef":"#","url":"docs/files_crops_table","content":"Documentation update! We are updating our documentation and this page was moved to here.","keywords":""},{"title":"Endpoints","type":0,"sectionRef":"#","url":"docs/files_endpoints","content":"Documentation update! We are updating our documentation and this page was moved to here.","keywords":""},{"title":"Geo Images","type":0,"sectionRef":"#","url":"docs/files_images","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Geo Images","url":"docs/files_images#about","content":"This service permits to generate images for files. It can be used to test the color ramp values. All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/images/api This service has the following endpoints available: Description\tEndpointsCreate images\tPOST /images "},{"title":"Create images","type":1,"pageTitle":"Geo Images","url":"docs/files_images#create-images","content":" POST /images Gets a paged list of operations that belong to the current logged in user. It is possible to filter the results by passing some query parameters. They are listed below. Parameter\tValuescolorRamp\tthe ranges for the color ramp projection\tEPSG_3857 resolution\t>0 shape\tROUND, JohnDeere, Trimble, ClimateFieldView, AgLeader or Leaf Request examples# Copy { \"colorRamp\": { \"0%\" : [200, 0, 0], \"35%\" : [255, 40, 0], \"45%\" : [255, 150, 0], \"55%\" : [255, 240, 0], \"65%\" : [ 0, 230, 0], \"75%\" : [ 0, 190, 0], \"100%\": [ 0, 130, 0], \"nv\" : [ 0, 0, 0, 0] }, \"projection\": \"EPSG_3857\", \"resolution\": 1, \"shape\": \"ROUND\" } You can also pass some parameters used exclusively for paging through results. They are: cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/operations' Response# The response will be the URL of new image in PNG format. https://api.withleaf.io/services/geoimages/api/images/a84e6627-4526-4560-a0ac-47eb57865a03/harvestMoisture "},{"title":"Overview","type":0,"sectionRef":"#","url":"docs/files_overview","content":"Documentation update! We are updating our documentation and this page was moved to here.","keywords":""},{"title":"Overview","type":0,"sectionRef":"#","url":"docs/files_postman","content":"","keywords":""},{"title":"Overview","type":1,"pageTitle":"Overview","url":"docs/files_postman#overview","content":"Leaf's Operation Data API returns aggregated, cleaned, and standardized data from all major machine data brands in a simple JSON response. This tutorial will walk through how to create a Leaf user, securely authenticate with their chosen platforms, and receive auto-updating data from all of them with a single request. We also provide a quickstart Postman collection so you can follow along easily. To make calls to Leaf's API, you will need a Leaf account. If you don't have one yet, please create your Leaf account and get your token. You can integrate with many different companies, and you only have to do it once for each user. To connect, you just choose the company you wish to connect to and follow these 3 steps: Get the authentication URL of company you want to connect toGet yours and your user's tokensAdd credentials to Leaf Now you can opt to connect to more companies or Create a Leaf User and attach these credentials, so that Leaf can represent your user internally and you can query specifically for them and their data. All set! Leaf automatically detects and starts processing new files. You can access in \"Get Operation Files\". "},{"title":"Roadmap","type":1,"pageTitle":"Overview","url":"docs/files_postman#roadmap","content":"Today, you can to connect to these companies: John Deere (Medium)Climate FieldView (Medium)CNHiTrimble Coming in the third quarter of 2020: RavenAGCO Coming in the fourth quarter of 2020: AgLeaderStara "},{"title":"John Deere","type":1,"pageTitle":"Overview","url":"docs/files_postman#john-deere","content":"This section will show you how you can integrate Leaf's API with you John Deere account and start using our operations service. Grab our quickstartPostman collection and follow along! 1. Get John Deere auth URL# In Step 1 we will be generating tokens from John Deere. The goal In step 2 is we will get our John Deere token_id and token_secret. Token Verifier# In step 1 we will get a temporary \"token verifier\" from John Deere that confirms an user’s authentication of your application to access their John Deere data and generate credentials. We get that verifier by going through their authentication flow (OAuth2). Before generating the authentication URL, please: Update current value of jd_client_key to your app's client key on John DeereUpdate current value of jd_client_secret to your app's client secret on John DeereUpdate current value of jd_callback_url to your app's callback_url on John Deere Then, to generate the authentication URL your application will send to your user so they can authorize access to their account files you can use the included step 2 in the Postman Collection. Change client_key and client_ secretvariables to yours received from John Deere when you created an app on your developer account with them and redirect_uri to a uri the \"token verifier\" will be sent after the user authorizes your application. Hit Send. Redirect your user to the url included in the response. They will authenticate and be redirected to the redirect_url. Copy the entire url you were redirected to. It looks like: Copy https://withleaf.io/?oauth_token=TOKEN&oauth_verifier=CODE Paste it in the environment variable jd_response_url. 2. Get John Deere Tokens# After updating the jd_response_url in Postman you can submit your credentials and receive your tokens. Hit Send token_id and token_secret_key will be automatically transferred tojd_token_id and jd_token_secret environment variables and will be used in the next step. 3. Add John Deere credentials# Now we can create a Developer-User pair credentials ID that will allow you to access your user’s John Deere data. We first add the John Deere credentials to Leaf API. Hit Send All the info needed has already been filled automatically in Step 2. An id for the credentials you just created will be returned. This id will be automatically transferred to the value of jd_credentials_id to be used in the next step. "},{"title":"Climate FieldView","type":1,"pageTitle":"Overview","url":"docs/files_postman#climate-fieldview","content":"Grab our quickstart Postman collection and follow along! 1. Get Climate FieldView auth URL# We will be generating a url to redirect your user to authenticate with Climate. Update environment variables cfv_client_id and cfv_client_secret to your Climate FieldView developer account credentials. Update environment variable cfv_redirect_url to your application's backend Redirect your user to the script's output url. They will authenticate and be redirected to the redirect_uri. A code will be sent to that cfv_redirect_url. We will need this code Step 2. Copy the code value. note: this code expires after 1 minute. Paste code value to environment variable cfv_code 2. Get Climate FieldView tokens# Hit \"Send\" A lot of information will be returned. The important ones are access_tokenand refresh_token. These will be automatically transferred tocfv_access_token and cfv_refresh_token environment variables and will be used in the next step. 3. Add Climate FieldView credentials# Now we can create a Developer-User pair credentials ID that will allow you to access your user’s Climate data. We first add the Climate credentials to Leaf API, to do that: Hit \"Send\" An id for the credentials you just created will be returned. This id will be automatically transferred to the value of cfv_credentials_id to be used in the next step. "},{"title":"Leaf User","type":1,"pageTitle":"Overview","url":"docs/files_postman#leaf-user","content":"Create Leaf User# Now we have to attach credentials to a Leaf User. To do so, we can create a Leaf user and attach our John Deere and/or Climate FieldView credentials via the credentials id. We can also attach credentials from other companies to this same user to query all available data by Grower/Farm/Field regardless of brand. Update (optional) fields \"address\", \"email\", \"name\" and \"phone\" with your user's information. We have automatically included our jd_credentials_id to this call and attached it to this user. Hit \"Send\" Along with other information returned, there is an \"id\". This \"id\" is theleaf_user_id that will be used in the next (final) Step to query and access files. Update Leaf User# To update a Leaf User, let's say to add another provider credentials or change the user's address, we can use this PUT request. Since this method overwrites, remember to send all the user's information along with the information you want to add or update. For example, if you want to add John Deere credentials to a user that already has ClimateFieldView credentials, remember to specify both credentials ids. Get specific Leaf User# Get specific Leaf User With this endpoint you can query all information on a specific Leaf User, such as their address, email, credentials, etc. To do so, update the value of the environment variable leaf_user_id to the Leaf User id you want to query. Gel all Leaf Users# Get all Leaf Users With this endpoint you can query all information on all your Leaf Users, such as their address, email, credentials, etc. Just hit 'send'. "},{"title":"Query Operations by Field","type":1,"pageTitle":"Overview","url":"docs/files_postman#query-operations-by-field","content":"To query all operations that happened in a specific field (step 2), we first need to create that field (step 1). Then, Leaf will automatically detect operations of that field based on the operations' and on the field's coordinates. This process usually takes about 30 minutes. 1. Create Field# Here we need to specify a leafUserId (that will be the Leaf User owner of that field), a externalId (that will be the name we give to the field) and the geojson geometry of the field (location). After creating the field we can query it (step 2) 2. Get operations' ids by Field# To query all operations that happened in a specific field, just update the environment variable field_external_id to the field id you want to query files. "},{"title":"Merge Operation Files","type":1,"pageTitle":"Overview","url":"docs/files_postman#merge-operation-files","content":"1. Merge files# Merging files with Leaf is a very simple process. You just have to list, in the request json body, the ids of the files you want to merge. Make sure the operations are of the same type (APPLIED or HARVESTED or PLANTED), so the results are consistent. After that, just hit \"send\" and an id for that merged file will be returned. You can query that file as any other. It will be listed when you query for all files and can also be queried specifically by its id 2. Query & access specific file# You can query a merged file as any other. It will be listed when you query for all files and can also be queried specifically by its id. So this request is the same as seen on \"Get Operation Files\". You just have to update the environment variable \"id\" to the id of the merged file. Keep in mind that merging files is processing-heavy and may take about 20 minutes to finish. "},{"title":"Sample responses","type":0,"sectionRef":"#","url":"docs/files_sample_output","content":"Documentation update! We are updating our documentation and this page was moved to here.","keywords":""},{"title":"Glossary","type":0,"sectionRef":"#","url":"docs/glossary","content":"","keywords":""},{"title":"Leaf product terms","type":1,"pageTitle":"Glossary","url":"docs/glossary#leaf-product-terms","content":"Term\tDefinitionField Boundaries\tGeospatial boundary/shape/area of a field. Data Translation | File Conversion\tReceive data, translated by Leaf to a consistent, aggregated and standardized format, from all major machinery brands. Machine Data | Field Operations\tFieldOps data pulled from machinery providers (planting, application, harvest, tillage). Called operations in Leaf. Note: see further down, the difference between Machine File Summary and Operation Summary Machine Information | Assets\tData on machinery performance itself (serial number, hours, fuel consumption, rpm, speed and calibration). Prescriptions\tPlanting and fertility recommendations. Can be sent from Leaf to Providers, not to specific machines. Crop Monitoring\tSatellite and drone images of fields based on their boundaries. Weather\tForecasted and historical field-level weather data. Leaf Connect\tSharing data between two different companies within Leaf. Allows one API owner to access fields and operations data from another API owner. "},{"title":"More Leaf terms","type":1,"pageTitle":"Glossary","url":"docs/glossary#more-leaf-terms","content":"Term\tDefinitionAPI Owner\tThe company email address that you use to create a Leaf account and is used to create/store Leaf Users. Leaf Token\tA token that will allow access to Leaf for up to 30 days. Provider | OEMs | third-party platforms\tThe company whose platform provides data such as field boundaries, machine data, imagery etc (e.g. Climate FieldView, John Deere). Leaf User\tA way to keep your customers' data organized under your API owner. You'll attach 3rd party credentials to these entities. A Leaf User is equivalent to a Customer/Grower account. Alerts\tWebhooks set up to send notifications of events that occur in Leaf. For example, when a new boundary is created, you'll be notified when it occurs, instead of polling (periodically requesting updates). Configurations\tConfigurations allow your Leaf environment to be customized to present different behaviors across our services. Field Merge\tWhen two fields intersect, Leaf can merge them to create a new field. Raw data\tData downloaded directly from a tractor monitor. (USB, Thumb Drive Data) File Converter\tConverts raw data formats to Leaf’s standard JSON format. File Merge\tFiles of the same operation type within a specified date range (applied, planted, harvested, tillage) are combined into a single file. Machine File Summary\tBasic information of files derived from the point data, processed and cleaned by Leaf. Data outputs will vary by task (planted, applied, harvested, tillage). Operation Summary\tThe output of files merged to a field boundary that are processed and cleaned by Leaf. "},{"title":"More agricultural terms","type":1,"pageTitle":"Glossary","url":"docs/glossary#more-agricultural-terms","content":"Term\tDefinitionOrganization\tThe organization is the top-level entity for a farm business such as a head office of a corporate farm Grower\tThe grower sits under the organization level and is equivalent to a farmer. A grower is often linked to farms and fields with a hierarchy of organization > grower > farm > field Farm\tA Farm is a group of fields managed by a grower Field\tAn area of open land, especially one planted with crops or pasture bound by a fence or other landmark. Note: in Leaf, the field object has no boundary but can be pulled in from a provider (e.g. field name, field ID, area) Field Boundary\tGeospatial boundary/shape/area of a field Crop\tType of plant being grown (e.g. soybeans, corn, wheat) Variety\tA subtype of the crop being grown (e.g. P7326 is a variety of corn) Field Operations\tTasks performed by a tractor (tillage, planting, application, harvest) Tillage\tThe task of breaking up soil Planting\tThe task of placing seeds in the soil Application\tThe task of applying products to an area of a field (eg fertilizer, pesticides) Harvest\tThe task of removing/collecting a fully mature crop Implements\tImplements are specialized pieces of farm equipment such as a drill, sprayer, combine or planter. Layers\tAdditional crop or field-related data that can be pulled from a provider (Tassel count, Stand count, NDVI and RGB) "},{"title":"Integrations Endpoints","type":0,"sectionRef":"#","url":"docs/integrations_endpoints","content":"","keywords":""},{"title":"Get Integrations Resources","type":1,"pageTitle":"Integrations Endpoints","url":"docs/integrations_endpoints#get-integrations-resources","content":" GET /resources Gets a paged list of Fields. It is possible to filter the results by passing some query parameters. provider, only matches fields from this provider (string).leafUserId, only matches fields from this user (string).page, an integer specifying the page being fetched.size, an integer specifying the size of the page (defaults to 20). These last two parameters are used exclusively for paging through results. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/integrations/api/resources' Response# Copy { \"message\": \"SUCCESS\", \"summaries\": [ { \"provider\": \"JohnDeere\", \"leafUserId\": \"UUID\", \"growers\": 12, \"farms\": 12, \"fields\": 100, \"syncReferenceTime\": \"2023-08-30T18:39:33.230612Z\" }, { \"provider\": \"ClimateFieldView\", \"leafUserId\": \"UUID\", \"farms\": 12, \"fields\": 100, \"syncReferenceTime\": \"2023-08-30T18:39:33.230612Z\" }, .... ] } FMIS Structure Warning Each provider has its own implementation of the FMIS structure which you can check on the table below. FMIS Structure Table# This table contains the FMIS properties available for the Integrations Resources responses. Provider\tGrower\tFarm\tFieldJohnDeere\t✅\t✅\t✅ ClimateFieldView\t✖️\t✅\t✅ CNHI\t✅\t✅\t✅ Trimble\t✅\t✅\t✅ Stara\t✖️\t✖️\t✅ Raven\t✅\t✅\t✅ AgVance\t✅\t✅\t✅ "},{"title":"Introduction","type":0,"sectionRef":"#","url":"docs/introduction","content":"Welcome to Leaf's Documentation! Food and Agriculture developers use Leaf's API to access clean, standardized, and aggregated Farm data from all major sources. Use theQuickstart section to help you start accessing sample farm data quickly, easily, and securely. We have implementation examples in cURL, Python and NodeJS! tip Please don't hesitate to contact us to schedule a demo, ask a question, request sample data, or suggest a feature!","keywords":""},{"title":"Field Boundary Management Endpoints","type":0,"sectionRef":"#","url":"docs/field_boundary_management_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#about","content":"Here we list all the available endpoints from Leaf's Fields API. To call them easily, we recommend using Leaf's Postman collection. All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/fields/api There is a REST resources section if you want to check it out. This service has the following endpoints available: Description\tEndpointsGet all fields\tGET /fields Get a field\tGET /users/{id}/fields/{id} Create a field\tPOST /users/{id}/fields Update a field\tPATCH /users/{id}/fields/{id} Get all operation files of a field\tGET /users/{leafUserId}/fields/{fieldId}/operations/files Get an operation file of a field\tGET /users/{leafUserId}/fields/{fieldId}/operations/files/{fileId} Get fields by geometry\tPOST /users/{leafUserId}/fields/intersects Get intersection of fields\tPOST /users/{id}/fields/intersect Sync fields manually\tPOST /users/{id}/fields/sync Enable a preview field\tPOST /users/{leafUserId}/fields/{id}/enableSync Upload a Field to Provider\tPOST /users/{leaf_user_id}/fields/{field_id}/integration/{provider_name} Delete a field\tDELETE /users/{id}/fields/{id} Get all boundaries from field\tGET users/{leafUserId}/fields/{fieldId}/boundaries Get a boundary from field\tGET users/{leafUserId}/fields/{fieldId}/boundaries/{boundaryId} Get active boundary from field\tGET users/{leafUserId}/fields/{fieldId}/boundary Update active boundary from field\tPUT users/{leafUserId}/fields/{fieldId}/boundary Get all farms\tGET /farms Get a farm\tGET /users/{id}/farms/{id} Create a farm\tPOST /users/{leafUserId}/farms Update a farm\tPUT /users/{leafUserId}/farms/{id} Get all growers\tGET /growers Get a grower\tGET /users/{leafUserId}/growers/{id} Create a grower\tPOST /users/{leafUserId}/growers Update a grower\tPUT /users/{leafUserId}/growers/{id} "},{"title":"Fields","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#fields","content":""},{"title":"Get all fields","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#get-all-fields","content":" GET /fields Gets a paged list of Fields. It is possible to filter the results by passing some query parameters. type, only matches fields with this type (string).farmId, only matches fields from this farmId (integer).provider, only matches fields from this provider (string).leafUserId, only matches fields from this user (string).page, an integer specifying the page being fetched.size, an integer specifying the size of the page (defaults to 20). These last two parameters are used exclusively for paging through results. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/fields' Response# Copy [ { \"id\": \"1a952614-3673-4d1e-b677-1f7224339ec6\", \"leafUserId\": \"58800d61-91ac-4922-8e2a-f0216b9f052a\", \"boundaries\": [ \"279b52d5-ec6d-4459-a06a-4f47ffab0659\" ], \"providerName\": \"JohnDeere\", \"providerId\": 2, \"providerFieldId\": \"b96ed268-728f-489e-b928-9d3e70082be4\", \"providerBoundaryId\": \"125fc49f-7e75-43fe-89f2-af976addb392\", \"providerFieldName\": \"The_Field_field\", \"organizationId\": \"428214\", \"type\": \"ORIGINAL\", \"createdTime\": \"2021-10-20T21:21:24.732030Z\", \"updatedTime\": \"2021-11-03T01:34:15.154051Z\", \"farmId\": 3746117, \"mergedFieldId\": \"f97c5bbc-2dbf-4400-8d59-39eba37f8847\", \"sources\": [], \"status\": \"PROCESSED\" }, { \"id\": \"68c354f2-eb20-4512-816f-2edea4b6fca4\", \"leafUserId\": \"9ffc7b1c-617b-46cb-a8ef-927b26285b7f\", \"boundaries\": [ \"39d171d7-9ec3-4201-81bf-9d57473b2a67\" ], \"type\": \"ORIGINAL\", \"createdTime\": \"2023-06-14T18:31:01.702615Z\", \"updatedTime\": \"2023-06-14T18:31:01.702615Z\", \"sources\": [], \"status\": \"PROCESSED\" }, .... ] "},{"title":"Get a field","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#get-a-field","content":" GET /users/{leafUserId}/fields/{id} Gets a single Field by Leaf User. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{id}' Response# A single Field as a JSON object. "},{"title":"Create a field","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#create-a-field","content":" POST /users/{leafUserId}/fields Creates a Field for the user leafUserId. A request body must be provided containing the entry \"geometry\" object which need to have the properties \"type\" and \"coordinates\". The geometry represents the boundaries of the Field being created as a GeoJSON geometry (\"type\" property must be a \"MultiPolygon\"). Consider that you can also set the id and name properties (both of them optional) in the request body. If no id is provided an UUID will be generated and this property can not be updated. Request body# Copy { \"id\": \"idTest\", // optional \"name\": \"nameTest\", // optional \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [ [ [ [-93.48821327980518, 41.77137549568163], [-93.48817333680519, 41.77143534378164], [-93.48821327390516, 41.76068857977987], [-93.48821327980518, 41.77137549568163] ] ] ] } } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"geometry\": { \"type: \"MultiPolygon\", \"coordinates\": [...] } }' 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields' Response# Copy { \"id\": \"idTest\", \"leafUserId\": \"95eb7d79-b93d-4fc2-877a-3f2b366f8beb\", \"area\": { \"value\": float, \"unit\": \"ha\" }, \"boundaries\": [ \"d0245010-157d-4988-96a2-5f3637098475\" ], \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [...] }, \"type\": \"ORIGINAL\", \"name\": \"nameTest\", \"createdTime\": \"2023-06-07T19:48:51.017280Z\", \"updatedTime\": \"2023-06-07T19:48:51.017280Z\", \"files\": [ \"2762a5f2-ed53-4999-afac-f2d4b136dc1f\" ] } "},{"title":"Update a Field","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#update-a-field","content":" PATCH /users/{leafUserId}/fields/{id} tip This is for manually created fields only. Provider created fields need to be updated via the Provider platform. Update the Field by \"id\" for the user \"leafUserId\". The request body accepts updatable field properties like \"name\" to update the field name, \"farmId\" to update the related Farm of the Field and \"geometry\", which represents the boundaries of the Field as a GeoJSON geometry (it must be a \"MultiPolygon\"). Request body# Copy { \"name\": \"updatedName\", \"farmId\": 1, \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [ [ [ [-93.48821327980518, 41.77137549568163], [-93.48817333680519, 41.77143534378164], [-93.48821327390516, 41.76068857977987], [-93.48821327980518, 41.77137549568163] ] ] ] } } Request examples# cURLPythonJavaScript Copy curl -X PATCH \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"name\": \"updatedName\", \"farmId\": 1, \"geometry\": { \"type: \"MultiPolygon\", \"coordinates\": [...] } }' 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{id}' Response# A Field as a JSON object. "},{"title":"Get all operation files of a field","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#get-all-operation-files-of-a-field","content":" GET /users/{leafUserId}/fields/{fieldId}/operations/files Gets a paged list of all operation files of the Field and Leaf User specified in the URL. It is possible to filter the results by passing some query parameters. They are listed below. Parameter (to filter by)\tType\tDescriptionoperationType\tString \"harvested\", \"planted\", \"applied\" or \"other\"\tretrieve operations of given type provider\tString \"CNHI\", \"JohnDeere\", \"Trimble\" or \"ClimateFieldView\"\tretrieve operations of given provider origin\tString \"provider\", \"automerged\", \"merged\" or \"uploaded\"\tretrieve operations of given origin crop\tString name of the crop, like \"corn\" or \"soybeans\". Entire crop list available here\tretrieve operations with this crop. startTime\tISO 8601 datetime format\tretrieve operations that started after this date endTime\tISO 8601 datetime format\tretrieve operations that ended before this date You can also pass some parameters used exclusively for paging through results. They are: page, an integer specifying the page being fetched (default is 0)size, an integer specifying the size of the page (default is 20, max is 100) Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/operations/files' Response# Copy [ { \"id\": \"abbac24d-7f13-414a-989a-ee5dc9de624b\", \"operationType\": \"harvested\", \"origin\": \"automerged\", \"startTime\": \"2017-10-27T08:59:58Z\", \"endTime\": \"2017-10-27T09:40:33Z\", \"crops\": [ \"corn\" ], \"varieties\": [ \"Corn\" ], \"providerFileId\": \"cacde0d5-55b9-4bff-bf2c-05ec1def1c95\", \"provider\": \"Leaf\", \"leafUserId\": \"dcb6fd16-b6f4-40bc-805e-659c7f7350d6\" }, .... ] "},{"title":"Get an operation file of a field","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#get-an-operation-file-of-a-field","content":" GET /users/{leafUserId}/fields/{fieldId}/operations/files/{fileId} Gets a single Operation File of a field by its id. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/operations/files/{id}' Response# Copy { \"id\": \"75127023-190a-4579-b76c-ccbcfcf00d3c\", \"operationType\": \"harvested\", \"origin\": \"automerged\", \"startTime\": \"2017-10-27T08:59:58Z\", \"endTime\": \"2017-10-27T09:40:33Z\", \"crops\": [ \"corn\" ], \"varieties\": [ \"Corn\" ], \"providerFileId\": \"a3602817-57e4-4056-bdef-4fb687ba4c2e\", \"provider\": \"Leaf\", \"leafUserId\": \"01a17a22-e6fa-4d83-b343-ea23eddbd936\" } "},{"title":"Get Fields by geometry","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#get-fields-by-geometry","content":" POST /users/{leafUserId}/fields/intersects Gets a list of fields that intersect with the GeoJSON geometry (\"type\" property must be a \"MultiPolygon\") sent in the request body. The minimum intersection percentage is given byintersectionThreshold and can range from 0.01% to 100%, its default value is 0.01.  The intersectionThreshold can be compared with the \"intersection by field\" ratio or the \"intersection by geometry\" ratio. Whichever is satisfied first. Here we have a sample for a field with 100 area unit and a geometry with 10 area unit:  So, in this case, if the intersectionThreshold were 3, then the condition would be satisfied and the field would be returned, but if the value was greater than 50, then it would not satisfy the condition, as 50% is the highest intersection value: intersectionThreshold (%)\tsatisfied3\t✅ 5\t✅ 37\t✅ 50\t✅ 75\t❌ 100\t❌ Request body# Copy { \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [ [ [ [-93.48821327980518, 41.77137549568163], [-93.48817333680519, 41.77143534378164], [-93.48821327390516, 41.76068857977987], [-93.48821327980518, 41.77137549568163] ] ] ] }, \"intersectionThreshold\": 3 } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [[[[-93.48821327980518, 41.77137549568163], [-93.48817333680519, 41.77143534378164], [-93.48821327390516, 41.76068857977987], [-93.48821327980518, 41.77137549568163]]]]}, \"intersectionThreshold\": 3 }' 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/intersects' Response# Copy [ { \"id\": \"7740ce52-ae37-45e8-b6ed-5d55eea1dc09\", \"leafUserId\": \"04526587-21eb-42a0-8de5-59964340db4d\", \"area\": { \"value\": 16.71391976284981, \"unit\": \"ha\" }, \"boundaries\": [ \"f748db67-1885-4936-bc93-a3fbaf249957\" ], \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [...] }, \"providerName\": \"ClimateFieldView\", \"providerId\": 4, \"providerFieldId\": \"62cf2326-8525-4c40-9e37-23fd1c76eeba\", \"providerBoundaryId\": \"bac50a8c-a3bc-4a90-9c4b-df7ea5f5d28b\", \"providerFieldName\": \"behav_test_field\", \"type\": \"ORIGINAL\", \"createdTime\": \"2023-06-06T09:35:07.676376Z\", \"updatedTime\": \"2023-06-06T09:35:07.965139Z\", \"sources\": [] }, { { \"id\": \"8bfe22fa-af4a-41ad-a167-fa792c3faa5f\", \"leafUserId\": \"04526587-21eb-42a0-8de5-59964340db4d\", \"area\": { \"value\": 0.19710594050867244, \"unit\": \"ha\" }, \"boundaries\": [ \"c329f54f-f979-47f1-96f6-bcf95a771be8\" ], \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [...] }, \"type\": \"ORIGINAL\", \"name\": \"nameTest\", \"createdTime\": \"2023-06-07T13:55:04.028129Z\", \"updatedTime\": \"2023-06-07T14:08:13.101100Z\", \"sources\": [] }, .... ] "},{"title":"Get intersection of fields","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#get-intersection-of-fields","content":" POST /users/{id}/fields/intersect Gets a GeoJSON geometry (\"type\" property must be a \"MultiPolygon\") corresponding to the intersection of the Fields specified by the given id's. Such Field id's goes in a list, in the request body. Request body# Copy [ \"id1\", \"id2\" ] Request examples# cURLPythonJavaScript Copy curl --location --request \\ POST 'https://api.withleaf.io/services/fields/api/users/{id}/fields/intersect' \\ --header 'Authorization: Bearer YOUR_LEAF_TOKEN' \\ --header 'Content-Type: application/json' \\ --data-raw '[\"id1\", \"id2\"]' Response# Copy { \"type\": \"MultiPolygon\", \"coordinates\": [ [ [ [-89.84388470649719,39.71943436012731], [-89.84392762184143,39.72439389620628], [-89.83936786651611,39.725392361998416], [-89.83928203582764,39.71951688444436], [-89.84388470649719,39.71943436012731] ] ] ] } "},{"title":"Sync fields manually","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#sync-fields-manually","content":" POST /users/{leafUserId}/fields/sync tip This endpoint should be used to fetch field data when this fieldsAutoSync configuration is disabled. Schedules a synchronization to fetch Field Boundaries data from the providers. Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/sync' "},{"title":"Enable a preview field","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#enable-a-preview-field","content":" POST /users/{leafUserId}/fields/{id}/enableSync tip This endpoint should be used to fetch data when the customDataSync configuration is enabled. It will remove the field from the PREVIEW mode making it ready for be fetched in the next synchonization. The status will change to WAITING. Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{id}/enableSync' tip Fields can be set to synchronize at the grower level using the enable preview fields by growers endpoint. "},{"title":"Upload a Field to Provider","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#upload-a-field-to-provider","content":" POST /users/{leaf_user_id}/fields/{field_id}/integration/{provider_name} Upload a field boundary a provider. The field must be available on the Leaf API first (manually created or fetched from a provider). provider_name: the name of the provider that will receive the field boundary. The supported providers are JohnDeere or ClimateFieldView.if the provider_name is JohnDeere it will be necessary to add the organizationId as a parameter: ?organizationId={organization_value} Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/users/{leaf_user_id}/fields/{field_id}/integration/{provider_name}' Response# Copy [ { \"ba518264-7f2a-11ee-b962-0242ac120002\": { \"ClimateFieldView\": { \"id\": \"uuid\", \"status\": \"PENDING\", \"updatedAt\": \"2023-11-09T18:02:17.834Z\" } } } ] Warning To avoid recursive synchronizations, it is not possible to send a field to the same provider from which it was fetched. "},{"title":"Delete a field","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#delete-a-field","content":" DELETE /users/{id}/fields/{id} Deletes the field with the given id. tip Fields created by a provider cannot be deleted on Leaf side. "},{"title":"Boundaries","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#boundaries","content":""},{"title":"Get all boundaries from field","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#get-all-boundaries-from-field","content":" GET /users/{leafUserId}/fields/{fieldId}/boundaries Gets a list of boundaries from a field. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{id}/boundaries' Response# A list of Boundary as a JSON object. "},{"title":"Get a boundary from field","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#get-a-boundary-from-field","content":" GET /users/{leafUserId}/fields/{fieldId}/boundaries/{boundaryId} Gets a single Boundary from a field by its id. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/boundaries/{boundaryId}' Response# A single Boundary as a JSON object. Request examples# "},{"title":"Get active boundary from field","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#get-active-boundary-from-field","content":" GET /users/{leafUserId}/fields/{fieldId}/boundary Gets the active Boundary from a field. cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/boundary' Response# A single Boundary as a JSON object. "},{"title":"Update active boundary from field","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#update-active-boundary-from-field","content":" PUT /users/{leafUserId}/fields/{fieldId}/boundary Updates the active boundary of field fieldId. The previous active boundary is not deleted, but set as inactive. Request body# Copy { \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [ [ [ [-93.48821327980518, 41.77137549568163], [-93.48817333680519, 41.77143534378164], [-93.48821327390516, 41.76068857977987], [-93.48821327980518, 41.77137549568163] ] ] ] } } Request examples# cURLPythonJavaScript Copy curl -X PUT \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"geometry\": { \"type: \"MultiPolygon\", \"geometry\": [...] } }' 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/boundary' Response# Copy { \"id\": \"g7941ef8-iddf-42c1-b43c-d36b0df369e8\", \"status\": \"ACTIVE\", \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [ [ [ [-93.48821327980518, 41.77137549568163], [-93.48817333680519, 41.77143534378164], [-93.48821327390516, 41.76068857977987], [-93.48821327980518, 41.77137549568163] ] ] ] }, \"area\": { \"value\": 0.19710594050867244, \"unit\": \"ha\" }, \"validity\": \"VALID\", \"createdTime\": \"2023-06-07T19:48:51.017280Z\", \"updatedTime\": \"2023-06-07T19:48:51.017280Z\" } "},{"title":"Farms","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#farms","content":""},{"title":"Get all farms","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#get-all-farms","content":" GET /farms Gets a paged list of all farms. It is possible to pass some query parameters. growerId, only matches Farms from this growerId (integer)provider, only matches Farms from this provider (string)leafUserId, only matches Farms from this Leaf User (UUID)page, an integer specifying the page being fetchedsize, an integer specifying the size of the page (defaults to 20) The parameters are used exclusively for paging through results. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/farms' Response# Copy [ { \"id\": 1538766, \"name\": \"name\", \"providerId\": 2, \"providerName\": \"JohnDeere\", \"providerFarmId\": \"2f4a03ed-ac81-4c6d-810d-1db6b47baec2\", \"providerFarmName\": \"farmName\", \"leafUserId\": \"ace92e9c-2e83-4d85-ab34-1f76a480abc8\", \"fieldIds\": [ \"6595418e-11d2-4260-9e6b-e8c452fb8375\" ], \"growerId\": 12345, \"createdTime\": \"2023-06-06T09:34:11.759672Z\", \"updatedTime\": \"2023-06-07T09:15:42.855759Z\" }, .... ] "},{"title":"Get a farm","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#get-a-farm","content":" GET /users/{leafUserId}/farms/{id} Gets a single farm by its id from the user leafUserId. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/farms/{id}' Response# A single Farm as a JSON object. "},{"title":"Create a farm","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#create-a-farm","content":" POST /users/{leafUserId}/farms Creates a farm for the user leafUserId. It's possible to pass both the farmName and the growerId on the body of the request. Request body# Copy { \"name\": \"Farm 01\", \"growerId\": 123 } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"name\": \"farmName\" }' 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/farms' Response# A single Farm as a JSON object. "},{"title":"Update a farm","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#update-a-farm","content":" PUT /users/{leafUserId}/farms/{id} Updates the farm with id id for the user leafUserId. It's possible to pass both the farmName and the growerIdon the body of the request. Request body# Copy { \"name\": \"Updated Farm Name\", \"growerId\": 123 } Request examples# cURLPythonJavaScript Copy curl -X PUT \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"name\": \"newFarmName\", \"growerId\": \"newGrowerId }' 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/farms/{id}' Response# A single Farm as a JSON object. "},{"title":"Grower","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#grower","content":""},{"title":"Get all growers","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#get-all-growers","content":" GET /growers Gets a paged list of all growers. Use the following parameters for paging through results. provider, only matches Growers from this provider (string)leafUserId, only matches Growers from this Leaf User (UUID)page, an integer specifying the page being fetchedsize, an integer specifying the size of the page (defaults to 20) Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/growers' Response# A list of Grower as a JSON object. Copy [ { \"id\": 873300016, \"name\": \"1Grower\", \"leafUserId\": \"1d3ecb0f-bf3d-42db-aae6-8c45c045d28c\", \"providerName\": \"JohnDeere\", \"providerId\": 23, \"providerGrowerId\": \"1Grower\", \"farmIds\": [], \"createdTime\": \"2023-06-06T03:31:39.966630Z\", \"updatedTime\": \"2023-06-07T20:01:14.814346Z\" }, .... ] "},{"title":"Get a grower","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#get-a-grower","content":" GET /users/{leafUserId}/growers/{id} Gets a single grower by its id from the user leafUserId. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/growers/{id}' Response# A single Grower as a JSON object. Copy { \"id\": 873300016, \"name\": \"1Grower\", \"leafUserId\": \"1d3ecb0f-bf3d-42db-aae6-8c45c045d28c\", \"providerName\": \"JohnDeere\", \"providerId\": 23, \"providerGrowerId\": \"1Grower\", \"farmIds\": [], \"createdTime\": \"2023-06-06T03:31:39.966630Z\", \"updatedTime\": \"2023-06-07T20:01:14.814346Z\" } Note In our system, Growers are equivalent to John Deere Client. That been said, the attribute name comes directly from the Client's name for growers with John Deere as provider. "},{"title":"Create a grower","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#create-a-grower","content":" POST /users/{leafUserId}/growers Creates a grower for the user leafUserId. It's possible to pass name on the body of the request. Request body# Copy { \"name\": \"Example Grower Name\" } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"name\": \"growerName\" }' 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/growers' Response# A single Grower as a JSON object. "},{"title":"Update a grower","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#update-a-grower","content":" PUT /users/{leafUserId}/growers/{id} Updates the grower with id id for the user leafUserId. It's possible to pass only the name on the body of the request. Request body# Copy { \"name\": \"Updated Grower Name\" } Request examples# cURLPythonJavaScript Copy curl -X PUT \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"name\": \"newGrowerName\"}' 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/growers/{id}' Response# A single Grower as a JSON object. "},{"title":"Enable preview fields by grower","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#enable-preview-fields-by-grower","content":" POST /growers/enableSync tip This endpoint should be used to fetch data when the customDataSync configuration is enabled. It will remove the indicated growers' fields from PREVIEW mode leaving them ready to be fetched immediately after the request. The status will change to WAITING. It accepts a list of Leaf grower IDs. Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"growerIds\": [ 99999, 88888 ] }' 'https://api.withleaf.io/services/fields/api/growers/enableSync' "},{"title":"REST Resources","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#rest-resources","content":"See below the REST resources and their endpoints. "},{"title":"Field Resource","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#field-resource","content":"A field might have one or neither of the following keys: a \"mergedFieldId\" key ora \"sources\" key A Field will only have one of the previous keys if it is either a field that has been merged with other one(s) or if it is a result of a merge. Leaf merges fields that have any sort of overlap. This makes it easier for you to query operations from a field by querying by the merged field. Because a field might exist in multiple providers, Leaf detects that and creates a single field that you can query for - and you can still query by the individual fields too. geometry and area are deprecated keys that contains the geometry of the active boundary and its area, respectively. Copy { \"id\": \"UUID\", \"providerName\": \"string\", \"providerFieldName\": \"string\", \"providerFieldId\": \"string\", \"providerBoundaryId\": \"UUID\", \"type\": \"ORIGINAL\", \"leafUserId\": \"UUID\", \"organizationId\": \"string\", \"mergedFieldId\": [\"UUID\"], \"files\": [\"UUID\"], \"boundaries\": [\"UUID\"], \"createdTime\": \"ISO date-time\", \"updatedTime\": \"ISO date-time\", \"status\": \"PROCESSED\" } Preview mode# If the customDataSync configuration is enabled, the field will be fetched from the providers in the PREVIEW mode. A Field in PREVIEW mode has almost all properties except the geometry so that no boundaries will be available. Copy { \"id\": \"UUID\", \"providerName\": \"string\", \"providerFieldName\": \"string\", \"providerFieldId\": \"string\", \"providerBoundaryId\": \"UUID\", \"type\": \"ORIGINAL\", \"leafUserId\": \"UUID\", \"organizationId\": \"string\", \"mergedFieldId\": [\"UUID\"], \"files\": [\"UUID\"], \"boundaries\": [], \"createdTime\": \"ISO date-time\", \"updatedTime\": \"ISO date-time\", \"status\": \"PREVIEW\" } Those Fields will still be listed in the field endpoints, allowing the custom synchronization of the resources available in the providers. To fetch a Field completely, it is necessary to remove it from the PREVIEW mode, sending it in the enable a preview field. After the change request, the field(s) will be marked as WAITING to be fetched completely in the next synchronization window and then, when it happens, the status will change to PROCESSED. Field operations In PREVIEW mode, the operation files associated with the fields on the provider side will also not be fetched and will only be available after the field sync request. Since not all providers support this relationship, it will only be reflected in John Deere and Climate FieldView files. For other providers, all files will be fetched normally, regardless of the configuration. Description\tEndpointsGet all fields\tGET /fields Get a field\tGET /users/{id}/fields/{id} Create a field\tPOST /users/{id}/fields Get fields by geometry\tPOST /fields/query/intersects Get intersection of fields\tPOST /users/{id}/fields/intersect Sync fields manually\tPOST /users/{id}/fields/sync Delete a field\tDELETE /users/{id}/fields/{id} "},{"title":"Boundary Resource","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#boundary-resource","content":"Every Field at Leaf can have 0 or many boundaries. Fields created via Leaf's endpoints must have at least one boundary. Only one boundary may be active, the others are inactive boundaries. Boundaries cannot be deleted or have its geometry updated. Every update generates a new Boundary, and Leaf keeps a history of all seen Boundaries. Each boundary has a status and providerStatus. status - Represents the current status of the boundary: ACTIVE - If the boundary was created at Leaf, it is the active boundary. If it is from a provider, this boundary exists at the provider and is the active boundary there.INACTIVE - If the boundary was created at Leaf, it is an inactive boundary. If it is from a provider, this boundary exists at the provider and is inactive there.OUTDATED_ON_PROVIDER - The boundary is from a provider. The boundary once existed on the provider exactly as it is in that boundary, but it was edited (e.g. has a new geometry but the same provider boundary id).DELETED_ON_PROVIDER - The boundary is from a provider. The boundary once existed on the provider, but it was deleted. The user won't find that boundary in the provider. providerStatus - Is the status of the boundary on the provider. ACTIVE - The boundary is the active boundary in the provider.INACTIVE - The boundary is inactive in the provider. providerStatus, just like the geometry, is a static attribute. In case this attribute is changed at the provider, the boundary's status is updated and a new boundary is created with the updated providerStatus in order to maintain history. The geometry may be invalidly registered with the provider, more information in Troubleshooting. Copy { \"id\": \"UUID\", \"status\": \"ACTIVE\", \"providerStatus\": \"ACTIVE\", \"providerBoundaryId\": \"UUID\", \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [ [ [ [ -89.84392762184143, 39.72439389620628 ], [ -89.84388470649719, 39.71943436012731 ], [ -89.83928203582764, 39.71951688444436 ], [ -89.83936786651611, 39.725392361998416 ], [ -89.84392762184143, 39.72439389620628 ] ] ] ] }, \"area\": { \"value\": double, \"unit\": \"ha\" }, \"validity\": \"VALID\", \"createdTime\": \"2023-06-06T03:33:51.528534Z\", \"updatedTime\": \"2023-06-06T03:33:51.528534Z\" } } Description\tEndpointsGet all boundaries from field\tGET users/{leafUserId}/fields/{fieldId}/boundaries Get a boundary from field\tGET users/{leafUserId}/fields/{fieldId}/boundaries/{boundaryId} Get active boundary from field\tGET users/{leafUserId}/fields/{fieldId}/boundary Update active boundary from field\tPUT users/{leafUserId}/fields/{fieldId}/boundary "},{"title":"Operation Resource","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#operation-resource","content":"Copy { \"id\": \"UUID\", \"operationType\": \"harvested|planted|applied\", \"startTime\": \"ISO date-time\", \"endTime\": \"ISO date-time\", \"crops\": [\"string\"], \"varieties\": [\"string\"], \"providerFileId\": \"string\", \"provider\": \"Trimble\", \"origin\": \"provider|merged|automerged|uploaded\", \"leafUserId\": \"UUID\" } Description\tEndpointsGet all operations of a field (deprecated)\tGET /users/{leafUserId}/fields/{fieldId}/operations Get all operations of a field\tGET /users/{leafUserId}/fields/{fieldId}/operations/files Get an operation of a field (deprecated)\tGET /users/{leafUserId}/fields/{fieldId}/operations/{fileId} Get an operation of a field\tGET /users/{leafUserId}/fields/{fieldId}/operations/files/{fileId} "},{"title":"Farm Resource","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#farm-resource","content":"Copy { \"id\": int, \"name\": \"string\", \"providerId\": int, \"providerName\": \"string\", \"providerFarmId\": \"UUID\", \"providerFarmName\": \"farmName\", \"leafUserId\": \"UUID\", \"fieldIds\": [ \"UUID\" ], \"growerId\": int, \"createdTime\": \"2023-06-06T09:34:11.759672Z\", \"updatedTime\": \"2023-06-07T09:15:42.855759Z\" } Description\tEndpointsGet all farms\tGET /farms Get a farm\tGET /users/{id}/farms/{id} Create a farm\tPOST /users/{leafUserId}/farms Update a farm\tPUT /users/{leafUserId}/farms/{id} "},{"title":"Grower Resource","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#grower-resource","content":"Copy { \"id\": int, \"name\": \"string\", \"leafUserId\": \"UUID\", \"providerName\": \"string\", \"providerId\": int, \"providerGrowerId\": \"string\", \"farmIds\": [ \"UUID\" ], \"createdTime\": \"ISO date-time\", \"updatedTime\": \"ISO date-time\" } If there is a name available for the grower so the name property will be returned as well. Description\tEndpointsGet all growers\tGET /growers Get a grower\tGET /growers/{id} Create a grower\tPOST /users/{leafUserId}/growers Update a grower\tPUT /users/{leafUserId}/growers/{id} "},{"title":"Troubleshooting","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#troubleshooting","content":"Currently, Leaf gets the field boundary data as available from the provider, so in some cases there may be fields without boundaries or with invalid boundaries, identified with one of the values below: Validity valuesVALID REPEATED_POINT HOLE_OUTSIDE_SHELL NESTED_HOLES DISCONNECTED_INTERIOR SELF_INTERSECTION RING_SELF_INTERSECTION NESTED_SHELLS DUPLICATE_RINGS TOO_FEW_POINTS INVALID_COORDINATE RING_NOT_CLOSED NOT_ALLOWED_GEOMETRY_TYPE Here is an example of a geometry registered as invalid due to a SELF_INTERSECTION. Copy { \"geometry\": { \"coordinates\": [ [ [ [-47.779352980393611,-21.192167369960515], [-47.775885948768021,-21.192669687635007], [-47.775917640099145,-21.194602117356858], [-47.780062866210912,-21.195033512590314], [-47.77870013897234,-21.191730056712402], [-47.779352980393611,-21.192167369960515] ] ] ], \"type\": \"MultiPolygon\" } } This is what this invalid type of geometry looks like from the provider side:  "},{"title":"Automatic geometry fix","type":1,"pageTitle":"Field Boundary Management Endpoints","url":"docs/field_boundary_management_endpoints#automatic-geometry-fix","content":"There is a configuration available to fix the invalid geometry that Leaf fetches from the provider. When enabled, Leaf will try to fix the geometry. If the fix is successful, then the invalid boundary will be disabled (available as a historical boundary) and the new one will be available as the main boundary with the property \"fixStatus\": \"FIXED\" This behavior only applies to Fields obtained from providers, as validation prevents Fields from being created manually with invalid geometries. Warning Note that this is an automatic procedure and that the corrected geometry may present small differences in relation to the original, such as an increase or decrease in area. "},{"title":"Irrigation Overview","type":0,"sectionRef":"#","url":"docs/irrigation_overview","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Irrigation Overview","url":"docs/irrigation_overview#about","content":"Irrigation information from different providers is available in the Leaf API. Data may include field boundaries, as-applied irrigation and equipment like pivots and sensors. "},{"title":"Irrigation data","type":1,"pageTitle":"Irrigation Overview","url":"docs/irrigation_overview#irrigation-data","content":"The irrigation data represents the total irrigated area by existing irrigation equipment. The information is summarized by day and split by depth, which represents the amount of water for each multipolygon geometry. "},{"title":"Irrigated field","type":1,"pageTitle":"Irrigation Overview","url":"docs/irrigation_overview#irrigated-field","content":"The irrigated field shows the as-applied irrigation event within field boundaries. It shows the area covered by the irrigation event and the different amounts of water in each zone or angle, which are represented by multipolygon geometries. The irrigated geometries are clipped to the field boundary geometry, displaying the information for the given field. "},{"title":"Irrigation Endpoints","type":0,"sectionRef":"#","url":"docs/irrigation_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Irrigation Endpoints","url":"docs/irrigation_endpoints#about","content":"Here we list all the available endpoints from Leaf's Irrigation API. To call them easily, we recommend using Leaf's Postman collection. All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/irrigation/api This service has the following endpoints available: Description\tEndpointsGet all irrigation equipment\tGET /users/{leafUserId}/irrigation-equipment Get an irrigation equipment\tGET /users/{leafUserId}/irrigation-equipment/{id} Get as-applied irrigation\tGET /users/{leafUserId}/irrigation/applied-irrigation Get an irrigation activity\tGET /users/{leafUserId}/irrigation/applied-irrigation/{id} Get all irrigated fields\tGET /users/{leafUserId}/irrigation/fields Get an irrigated field\tGET /users/{leafUserId}/irrigation/fields/{fieldId} Get an irrigated field activity\tGET /users/{leafUserId}/irrigation/fields/{fieldId}/irrigated/{id} "},{"title":"Get all irrigation equipment","type":1,"pageTitle":"Irrigation Endpoints","url":"docs/irrigation_endpoints#get-all-irrigation-equipment","content":" GET /users/{leafUserId}/irrigation-equipment Lists all irrigation system equipment available for a given leaf user. It is possible to filter the results by passing some query parameters: Parameter (to filter by)\tValuesproviderEquipmentId\tProvider equipment ID provider\tLindsay or Valley Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/irrigation/api/users/{leafUserId}/irrigation-equipment' Response# Copy [ { \"id\": \"uuid\", \"providerEquipmentId\": \"uuid\", \"provider\": \"Lindsay\", \"name\": \"HHD 700C\", \"type\": \"pivot\", \"pivotLength\": { \"value\": 0.0, \"unit\": \"m\" }, \"endgunLength\": { \"value\": 0.0, \"unit\": \"m\" }, \"pivotRuntime\": { \"value\": 0.0, \"unit\": \"hr\" }, \"brand\": \"unknown\", \"originalEquipmentData\": { \"equipmentType\": \"\", \"equipmentSubType\": \"\" } } ] Properties# These are the properties available: Property\tDescriptionid\tThe equipment ID providerEquipmentId\tThe equipment ID from the provider provider\tThe data provider: Lindsay or Valley name\tThe name of the equipment type\tThe irrigation system type pivotLength\tThe length of the equipment (meters or feet) endgunLength\tThe length of the endgun throw (meters or feet) pivotRuntime\tThe time a pivot takes to complete a full revolution (hours) brand\tThe brand of the equipment originalEquipmentData\tNot normalized equipment information data such as original type and subtype as available in the provider * The unit of measure can be defined by the unitMeasurement configuration. "},{"title":"Get an irrigation equipment","type":1,"pageTitle":"Irrigation Endpoints","url":"docs/irrigation_endpoints#get-an-irrigation-equipment","content":" GET /users/{leafUserId}/irrigation-equipment/{id} Get a specific irrigation system equipment by ID. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/irrigation/api/users/{leafUserId}/irrigation-equipment/{id}' Response# Copy { \"id\": \"uuid\", \"providerEquipmentId\": \"uuid\", \"provider\": \"Lindsay\", \"name\": \"HHD 700C\", \"type\": \"pivot\", \"pivotLength\": { \"value\": 0.0, \"unit\": \"m\" }, \"endgunLength\": { \"value\": 0.0, \"unit\": \"m\" }, \"pivotRuntime\": { \"value\": 0.0, \"unit\": \"hr\" }, \"brand\": \"unknown\", \"originalEquipmentData\": { \"equipmentType\": \"\", \"equipmentSubType\": \"\" } } Properties# These are the properties available: Property\tDescriptionid\tThe equipment ID providerEquipmentId\tThe equipment ID from the provider provider\tThe data provider: Lindsay or Valley name\tThe name of the equipment type\tThe irrigation system type pivotLength\tThe length of the equipment (meters or feet) endgunLength\tThe length of the endgun throw (meters or feet) pivotRuntime\tThe time a pivot takes to complete a full revolution (hours) brand\tThe brand of the equipment originalEquipmentData\tNot normalized equipment information data such as original type and subtype as available in the provider * The unit of measure can be defined by the unitMeasurement configuration. "},{"title":"Get as-applied irrigation","type":1,"pageTitle":"Irrigation Endpoints","url":"docs/irrigation_endpoints#get-as-applied-irrigation","content":" GET /users/{leafUserId}/irrigation/applied-irrigation Lists all irrigation activities from supported providers, summarized by day and with information on the amount of water applied, stored in the depth property. The area covered by the irrigation and the different geometries for each depth value are also available in the irrigation standardGeojson. It is possible to filter the results by passing some query parameters: Parameter (to filter by)\tValuesprovider\tLindsay or Valley startTime\tReturns irrigation data from the startTime onward endTime\tReturns irrigation data until the endTime Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/irrigation/api/users/{leafUserId}/irrigation/applied-irrigation' Response# Copy [ { \"id\": \"uuid\", \"provider\": \"Lindsay\", \"standardGeojson\": \"url.json\", \"downloadStandardGeojson\": \"url.json\", \"leafUserId\": \"uuid\", \"apiOwnerUsername\": \"apiowner@withleaf.io\", \"summary\": { \"type\": \"Feature\", \"properties\": { \"depth\": { \"avg\": 4.87, \"sum\": 28.36, \"min\": 2.53, \"max\": 7.49, \"unit\": \"mm\" }, \"totalArea\": { \"value\": 52.72, \"unit\": \"ha\" }, \"totalVolume\": { \"value\": 1604.7, \"unit\": \"L\" }, \"totalPowerOn\": { \"value\": 16.7, \"unit\": \"hr\" } }, \"geometry\": { } }, \"equipment\": [ { \"id\": \"uuid\", \"name\": \"My Pivot\", \"type\": \"pivot\", \"providerEquipmentId\": \"d0245010-157d-4988-96a2-5f3637098475\" } ], \"createdTime\": \"2024-03-04T00:31:25.497Z\", \"startTime\": \"2024-01-07T00:00:00Z\", \"endTime\": \"2024-01-07T23:59:59Z\" } ] Properties# These are the properties available: Property\tDescriptionid\tThe record identifier leafUserId\tThe Leaf User identifier apiOwnerUsername\tThe API Owner username startTime\tThe start of the irrigation period, typically the first hour of the day endTime\tThe end of the irrigation period, typically the last hour of the day provider\tThe irrigation data provider. It can be Lindsay or Valley equipment\tThe list of equipment that performed the irrigation, may contain the id, name, type and the identifier of the equipment at the provider (providerEquipmentId) createdTime\tThe time the record was created in Leaf Summary# Each record shows a summary of the day, with the following properties: Property\tUnit of measure\tDescriptiondepth\tmm or in\tBasic statistics on the amount of water applied totalArea\tha or ac\tTotal irrigated area totalVolume\tL or gal\tTotal volume applied totalPowerOn\thr\tTotal time the pivot was ON for the given day geometry\t-\tThe geometry that represents the irrigated area * The unit of measure can be defined by the unitMeasurement configuration.  Irrigation StandardGeojson# The GeoJSON file for applied irrigation shows all irrigation values ​​from an equipment for a given day. The file contains multipolygon geometries that represent the amount of water application for each area, in the depth property. To view the field-related information, check the Get an irrigated field endpoint.  "},{"title":"Get an irrigation activity","type":1,"pageTitle":"Irrigation Endpoints","url":"docs/irrigation_endpoints#get-an-irrigation-activity","content":" GET /users/{leafUserId}/irrigation/applied-irrigation/{id} Gets an irrigation activity by ID. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/irrigation/api/users/{leafUserId}/irrigation/applied-irrigation/{id}' Response# Copy { \"id\": \"uuid\", \"provider\": \"Lindsay\", \"standardGeojson\": \"url.json\", \"downloadStandardGeojson\": \"url.json\", \"leafUserId\": \"uuid\", \"apiOwnerUsername\": \"apiowner@withleaf.io\", \"summary\": { \"type\": \"Feature\", \"properties\": { \"depth\": { \"avg\": 4.87, \"sum\": 28.36, \"min\": 2.53, \"max\": 7.49, \"unit\": \"mm\" }, \"totalArea\": { \"value\": 52.72, \"unit\": \"ha\" }, \"totalVolume\": { \"value\": 1604.7, \"unit\": \"L\" }, \"totalPowerOn\": { \"value\": 16.7, \"unit\": \"hr\" } }, \"geometry\": { } }, \"equipment\": [ { \"id\": \"uuid\", \"name\": \"My Pivot\", \"type\": \"pivot\", \"providerEquipmentId\": \"d0245010-157d-4988-96a2-5f3637098475\" } ], \"createdTime\": \"2024-03-04T00:31:25.497Z\", \"startTime\": \"2024-01-07T00:00:00Z\", \"endTime\": \"2024-01-07T23:59:59Z\" } "},{"title":"Get all irrigated fields","type":1,"pageTitle":"Irrigation Endpoints","url":"docs/irrigation_endpoints#get-all-irrigated-fields","content":" GET /users/{leafUserId}/irrigation/fields Lists all fields that have received any irrigation at some point. It is possible to filter the results by passing some query parameters: Parameter (to filter by)\tValuesequipmentId\tLeaf equipment ID startTime\tReturns irrigation data from the startTime onward endTime\tReturns irrigation data until the endTime Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/irrigation/api/users/{leafUserId}/irrigation/fields' Response# Copy [ { \"fieldId\": \"95eb7d79-b93d-4fc2-877a-3f2b366f8beb\", \"lastIrrigationTime\": \"2024-02-18T23:59:59.000000Z\" } ] "},{"title":"Get an irrigated field","type":1,"pageTitle":"Irrigation Endpoints","url":"docs/irrigation_endpoints#get-an-irrigated-field","content":" GET /users/{leafUserId}/irrigation/fields/{fieldId} Gets information about irrigation performed in a specific field. It is valid for all existent field boundary from the Leaf user account. It is possible to filter the results by passing some query parameters: Parameter (to filter by)\tValuesirrigationId\tAs-applied irrigation ID provider\tLindsay or Valley startTime\tReturns irrigation data from the startTime onward endTime\tReturns irrigation data until the endTime Field boundary This functionality associates field boundaries from any provider with irrigation data, so there must be existing field boundaries in the integrated leaf user to access it. Valley does not provide field boundaries and Lindsay requires the FieldNET Advisor product to make them available. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/irrigation/api/users/{leafUserId}/irrigation/fields/{fieldId}' Response# Copy [ { \"id\": \"uuid\", \"fieldId\": \"uuid\", \"irrigationId\": [\"uuid\"], \"provider\": \"Lindsay\", \"standardGeojson\": \"url.json\", \"downloadStandardGeojson\": \"url.json\", \"leafUserId\": \"uuid\", \"apiOwnerUsername\": \"apiowner@withleaf.io\", \"summary\": { \"type\": \"Feature\", \"properties\": { \"depth\": { \"avg\": 4.87, \"sum\": 28.36, \"min\": 2.53, \"max\": 7.49, \"unit\": \"mm\" }, \"totalArea\": { \"value\": 49.48, \"unit\": \"ha\" }, \"totalVolume\": { \"value\": 1604.7, \"unit\": \"L\" }, \"totalPowerOn\": { \"value\": 16.7, \"unit\": \"hr\" }, \"coverage\": { \"value\": 81.51, \"unit\": \"percentage\" } }, \"geometry\": { } }, \"equipment\": [ { \"id\": \"uuid\", \"name\": \"My Pivot\", \"type\": \"pivot\", \"providerEquipmentId\": \"d0245010-157d-4988-96a2-5f3637098475\" } ], \"createdTime\": \"2024-03-04T00:31:25.497Z\", \"startTime\": \"2024-01-07T00:00:00Z\", \"endTime\": \"2024-01-07T23:59:59Z\" } ] Properties# These are the properties available: Property\tDescriptionid\tThe record identifier leafUserId\tThe Leaf User identifier apiOwnerUsername\tThe API Owner username startTime\tThe start of the irrigation period, typically the first hour of the day endTime\tThe end of the irrigation period, typically the last hour of the day provider\tThe irrigation data provider. It can be Lindsay or Valley equipment\tThe list of equipment that performed irrigation, may contain the id, name, type and the identifier of the equipment at the provider (providerEquipmentId) createdTime\tThe time the record was created in Leaf Summary# Each record shows a summary of the day, with the following properties: Property\tUnit\tDescriptiondepth\tmm or in\tBasic statistics on the amount of water applied totalArea\tha or ac\tTotal irrigated area for that given field totalVolume\tL or gal\tTotal volume applied totalPowerOn\thr\tTotal time the pivot was ON for the given day coverage\t%\tThe percentage of field area covered by irrigation - the wetted area geometry\t-\tThe geometry that represents the field irrigated area * The unit of measure can be defined by the unitMeasurement configuration.  Irrigated field StandardGeojson# The GeoJSON file available for the irrigated field will show all irrigated areas within the field ​​from an equipment for a given day. Each geometry is represented as multi polygons and is clipped by the field boundary geometry and represents the total volume of water applied to the location (the depth property).  "},{"title":"Get an irrigated field activity","type":1,"pageTitle":"Irrigation Endpoints","url":"docs/irrigation_endpoints#get-an-irrigated-field-activity","content":" GET /users/{leafUserId}/irrigation/fields/{fieldId}/irrigated/{id} Gets information about an irrigation activity performed in a specific field. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/irrigation/api/users/{leafUserId}/irrigation/fields/{fieldId}/irrigated/{id}' Response# Copy { \"id\": \"uuid\", \"fieldId\": \"uuid\", \"irrigationId\": [\"uuid\"], \"provider\": \"Lindsay\", \"standardGeojson\": \"url.json\", \"downloadStandardGeojson\": \"url.json\", \"leafUserId\": \"uuid\", \"apiOwnerUsername\": \"apiowner@withleaf.io\", \"summary\": { \"type\": \"Feature\", \"properties\": { \"depth\": { \"avg\": 4.87, \"sum\": 28.36, \"min\": 2.53, \"max\": 7.49, \"unit\": \"mm\" }, \"totalArea\": { \"value\": 49.48, \"unit\": \"ha\" }, \"totalVolume\": { \"value\": 1604.7, \"unit\": \"L\" }, \"totalPowerOn\": { \"value\": 16.7, \"unit\": \"hr\" }, \"coverage\": { \"value\": 81.51, \"unit\": \"percentage\" } }, \"geometry\": { } }, \"equipment\": [ { \"id\": \"uuid\", \"name\": \"My Pivot\", \"type\": \"pivot\", \"providerEquipmentId\": \"d0245010-157d-4988-96a2-5f3637098475\" } ], \"createdTime\": \"2024-03-04T00:31:25.497Z\", \"startTime\": \"2024-01-07T00:00:00Z\", \"endTime\": \"2024-01-07T23:59:59Z\" } "},{"title":"Leaf File Upload Link","type":0,"sectionRef":"#","url":"docs/Link_file_upload","content":"","keywords":""},{"title":"Overview","type":1,"pageTitle":"Leaf File Upload Link","url":"docs/Link_file_upload#overview","content":"Leaf's File Upload Link is a widget that allows your customers to upload different machine file formats. These files will then get converted into a consistent output using the Leaf API.  "},{"title":"How it works","type":1,"pageTitle":"Leaf File Upload Link","url":"docs/Link_file_upload#how-it-works","content":"The user can add files using the file picker from the Browse button or drop files in the Drag & drop zone. Your files must be in a zip file. During the upload, the users can see the progress of the upload and they are able to cancel the upload process for the pending files. Requirements In addition to being authenticated, you must have at least one Leaf user created. Learn more here. "},{"title":"Get started","type":1,"pageTitle":"Leaf File Upload Link","url":"docs/Link_file_upload#get-started","content":""},{"title":"1. Sign in with a Leaf account","type":1,"pageTitle":"Leaf File Upload Link","url":"docs/Link_file_upload#1-sign-in-with-a-leaf-account","content":"You will need a Leaf account. If you don't have one yet, you can create it here. "},{"title":"2. Get an access token","type":1,"pageTitle":"Leaf File Upload Link","url":"docs/Link_file_upload#2-get-an-access-token","content":"To use the widget you will need a Leaf token. Use our authentication guide to know how it works. "},{"title":"Tutorial","type":1,"pageTitle":"Leaf File Upload Link","url":"docs/Link_file_upload#tutorial","content":""},{"title":"Angular","type":1,"pageTitle":"Leaf File Upload Link","url":"docs/Link_file_upload#angular","content":"tip Here you can run a live use case demo! It will only be necessary to replace your information in the .html component. To add this Leaf widget in an Angular application, you can use the @withleaf/leaf-link-angular library, which is a JavaScript library that provides all Leaf UI Widgets. Here are the general steps to get started: Install the @withleaf/leaf-link-angular package using npm: Copy npm i @withleaf/leaf-link-angular Import the library in your component or module file: Copy import { FileUploadModule } from '@withleaf/leaf-link-angular'; Add the component to the HTML. Make sure you already created the Leaf user API key (apiKey); you need to specify both the Leaf User API Key and the Leaf User ID (leafUser) in the required properties in the HTML component. Check all the properties available on the reference here. Copy <div class=\"content\" role=\"main\"> <file-upload apiKey=\"Your_API_Key\" leafUser=\"Your_Leaf_User\" title=\"Your_Title\" [filesTimeRange]=\"30\" companyName=\"Your_Company_Name\" companyLogo=\"assets/leafLogo.svg\" ></file-upload> </div> "},{"title":"React","type":1,"pageTitle":"Leaf File Upload Link","url":"docs/Link_file_upload#react","content":"tip Here you can run a live use case demo! It will only be necessary to replace your information in the App.tsx file. To add this Leaf widget in a React application, you can use the @withleaf/leaf-link-react library, which is a JavaScript library that provides all Leaf UI Widgets. Here are the general steps to get started: Install the @withleaf.io/leaf-link-react package using npm: Copy npm i @withleaf/leaf-link-react Import the component in your *.tsx file: Copy import { FileUpload } from '@withleaf/leaf-link-react' Add the component to the *.tsx file. Make sure you already created the Leaf user API key (apiKey); you need to specify both the Leaf User API Key and the Leaf User ID (leafUser) in the required properties in the tsx component. Check all the properties available on the reference here. Copy function App() { const IS_DARK_MODE: boolean = true; const LEAF_USER: string = \"Your_Leaf_User\"; const API_KEY: string = \"Your_API_Key\"; const COMPANY_NAME: string = \"Your_Company\"; const COMPANY_LOGO: string = \"Your_Company_Logo\"; const FILES_TIME_RANGE: number = 30; return ( <FileUpload isDarkMode={IS_DARK_MODE} companyName={COMPANY_NAME} companyLogo={COMPANY_LOGO} filesTimeRange={FILES_TIME_RANGE} leafUser={LEAF_USER} apiKey={API_KEY} /> ); } "},{"title":"Reference","type":1,"pageTitle":"Leaf File Upload Link","url":"docs/Link_file_upload#reference","content":"It is valid only for the React version. "},{"title":"Property Overview","type":1,"pageTitle":"Leaf File Upload Link","url":"docs/Link_file_upload#property-overview","content":"Name\tType\tSummaryapiKey\tString\tThe authentication API Key companyLogoUrl\tString\tCustomization: a link to the company logo companyName\tString\tCustomization: the name of the company filesTimeRange\tNumber\tTime to get the historical of uploaded files isDarkMode\tBoolean\tEnables/disables the dark mode leafUser\tString\tThe Leaf User ID locale\tString\tForces the widget language title\tString\tCustomization: a link to the company logo Property Details# apiKey# The apiKey is the authentication key that will allow the use of the widget. It can be created and managed here. companyLogoUrl# The URL to the company logo. It will be displayed in the landing screen. It can be a PNG, JPEG or SVG. companyName# The company name. It will be displayed in the landing screen and in each reference about the customer. filesTimeRange# It sets the interval in days to display files already processed in the past. For example, if set to 30, it will display the list of files sent and processed in the last 30 days. isDarkMode# If set to true, it will enable the widget dark mode.  leafUser# The Leaf User ID. Check this page for more info about the Leaf User. locale# By default, the widget sets the language based on the user's browser configuration, but to force a language, use this property with one of the possible values: en_US, pt_BR, es_ES, or fr_FR. title# The text to display on the top of the widget. "},{"title":"Hooks Overview","type":1,"pageTitle":"Leaf File Upload Link","url":"docs/Link_file_upload#hooks-overview","content":"Leaf Link also have hooks that can improve the developer experience when using the widgets. Name\tType\tDescriptionleafBatchIds\tArray<{ batchId: string }>\tProvide the array with the batchId of the uploaded files Hooks Details# leafBatchIds# Provides the array with the batchId for each uploaded file. A new ID is added after each successful upload. How to use it# Angular# Use the getLeafBatchData property to reference a function in your component. Copy <div> <file-upload [apiKey]=\"apiKey\" [leafUser]=\"leafUser\" [title]=\"Your_Title\" [filesTimeRange]=\"30\" [companyName]=\"companyName\" [companyLogo]=\"companyLogo\" (getLeafBatchData)=\"yourFunctionNameHere($event)\"> </file-upload> </div> From the component, you can get the leafBatchIds array in the referenced function. Copy import { Component } from '@angular/core'; @Component({ selector: 'app-root', templateUrl: './app.component.html', styleUrls: ['./app.component.css'] }) export class AppComponent { apiKey: string = 'apiKey'; leafUser: string = 'leafUserId'; companyName: string = 'companyName'; companyLogo: string = 'companyLogo'; yourFunctionNameHere(leafBatchIds: any) { console.log(leafBatchIds); } } React# In the index.tsx will be necessary import the component Leaf. Copy import { Leaf } from '@withleaf/leaf-link-react'; And this component should be organized like this: Copy <React.StrictMode> <Leaf> <App /> </Leaf> </React.StrictMode> Additionally, you will need to import the useLeaf function as well: Copy import { FileUpload, useLeaf } from \"@withleaf/leaf-link-react\"; So will be necessary adjust the function in the App.tsx file: Copy function App() { const IS_DARK_MODE: boolean = true; const COMPANY_NAME: string = \"Your_Company\"; const LEAF_USER: string = \"Your_Leaf_User_Id\"; const API_KEY: string = \"Your_API_Key\"; const COMPANY_LOGO: string = YourCompanyLogo; const FILES_TIME_RANGE: number = 30; const { leafBatchIds } = useLeaf(); useMemo(() => { console.log(leafBatchIds); }, [leafBatchIds]); In this example we use the useMemo but you can use another hooks. "},{"title":"Leaf Provider Connection Link","type":0,"sectionRef":"#","url":"docs/Link_provider_connection","content":"","keywords":""},{"title":"Overview","type":1,"pageTitle":"Leaf Provider Connection Link","url":"docs/Link_provider_connection#overview","content":"Leaf's Provider Connection Link is a widget that you can install with minimal setup and a few lines of code. This widget enables your customers to connect their existing provider accounts, which associates it with their Leaf User.  "},{"title":"Get started","type":1,"pageTitle":"Leaf Provider Connection Link","url":"docs/Link_provider_connection#get-started","content":""},{"title":"1. Sign in with a Leaf account","type":1,"pageTitle":"Leaf Provider Connection Link","url":"docs/Link_provider_connection#1-sign-in-with-a-leaf-account","content":"You will need a Leaf account. If you don't have one yet, you can create one by contacting Leaf support. "},{"title":"2. Get to know the Leaf user entity","type":1,"pageTitle":"Leaf Provider Connection Link","url":"docs/Link_provider_connection#2-get-to-know-the-leaf-user-entity","content":"All control of connected providers is done at the Leaf user level (usually it represents the user of your application), so it's important to know more about it here. "},{"title":"3. Create the user application tokens","type":1,"pageTitle":"Leaf Provider Connection Link","url":"docs/Link_provider_connection#3-create-the-user-application-tokens","content":"Since the connection is at Leaf user level, the widget uses a different authentication method. We will required to create an API key for each Leaf user. This will ensure that the Leaf user only accesses its own resources. The endpoints to manage those application tokens are here. "},{"title":"Set up","type":1,"pageTitle":"Leaf Provider Connection Link","url":"docs/Link_provider_connection#set-up","content":"To use the widget you will need to enable the providers. Don't worry, you only need to set it up once. "},{"title":"John Deere","type":1,"pageTitle":"Leaf Provider Connection Link","url":"docs/Link_provider_connection#john-deere","content":"To enable John Deere as a provider in the widget you need your application already registed with John Deere. You can find more info on how to create a developer account here. Redirect URI# The first step is to add our widget URL in the \"Redirect URI\" section: Copy https://widget.withleaf.io In the My applications page, select your application and edit it to add the URL here  Application info# To allow the users to authenticate with John Deere, you will need to send your application info to this endpoint POST /usermanagement/api/app-keys/JohnDeere/{appName}/{clientEnvironment} For John Deere, it is necessary to inform the: clientKey (Application Id)clientSecret (Secret) You can set the appName and the clientEnvironmentas the environment your application is enabled on John Deere: STAGE or PRODUCTION. Here is a request example: cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"clientKey\": \"string\", \"clientSecret\": \"string\" }' 'https://api.withleaf.io/services/usermanagement/api/app-keys/JohnDeere/LeafWidget/PRODUCTION' "},{"title":"Climate FieldView","type":1,"pageTitle":"Leaf Provider Connection Link","url":"docs/Link_provider_connection#climate-fieldview","content":"To enable Climate FieldView as a provider in the widget you need your application credentials from Climate. You can find more info on how to create a developer account here. Application info# To allow the users to authenticate with Climate FieldView, you will need to send your application info to this endpoint POST /usermanagement/api/app-keys/ClimateFieldView/{appName} For Climate FieldView, it is necessary to inform the: apiKeyclientIdclientSecret You can set the appName. Here is a request example: cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"apiKey\": \"string\", \"clientId\": \"string\", \"clientSecret\": \"string\" }' 'https://api.withleaf.io/services/usermanagement/api/app-keys/ClimateFieldView/LeafWidget' "},{"title":"CNHi","type":1,"pageTitle":"Leaf Provider Connection Link","url":"docs/Link_provider_connection#cnhi","content":"To enable CNHi as a provider in the widget you need your application credentials from CNHi. You can find more info on how to create a developer account here. OAuth Callback URL# The first step is to add our widget URL in the \"App OAuth Callback URL(s)\" section: Copy https://widget.withleaf.io In the Developer Dashboard page, select your application and edit it to add the URL here  Application info# To allow the users to authenticate with CNHi, you will need to send your application info to this endpoint POST /usermanagement/api/app-keys/CNHI/{appName}/{clientEnvironment} For CNHi, it is necessary to inform the: clientId (Client Id)clientSecret (Client Secret)subscriptionKey (Primary SubscriptionKey) You can set the appName and the clientEnvironment as the environment your application is enabled on CNHi: STAGE or PRODUCTION. Here is a request example: cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"clientId\": \"string\", \"clientSecret\": \"string\", \"subscriptionKey\": \"string\" }' 'https://api.withleaf.io/services/usermanagement/api/app-keys/CNHI/LeafWidget/PRODUCTION' "},{"title":"AgLeader","type":1,"pageTitle":"Leaf Provider Connection Link","url":"docs/Link_provider_connection#agleader","content":"To enable AgLeader as a provider in the widget you need your application credentials from AgLeader. You can find more info on how to create a developer account here. Redirection URL# The first step is to add our widget URL in the \"Redirection URL\" property: Copy https://widget.withleaf.io In the Consumer Keys page, select your application and click in the \"Edit Consumer Key Profile\" option to edit it add the URL here  Application info# To allow the users to authenticate with AgLeader, you will need to send your application info to this endpoint POST /usermanagement/api/app-keys/AgLeader/{appName} For AgLeader, it is necessary to inform the: privateKeypublicKey You can set the appName. Here is a request example: cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"privateKey\": \"string\", \"publicKey\": \"string\" }' 'https://api.withleaf.io/services/usermanagement/api/app-keys/AgLeader/LeafWidget' "},{"title":"Trimble","type":1,"pageTitle":"Leaf Provider Connection Link","url":"docs/Link_provider_connection#trimble","content":"To enable Trimble as a provider in the widget you need your application credentials from Trimble. You can find more info on how to create a developer account here. Authentication Callback URL# The first step is make sure our widget URL is registered in the \"Authentication Callback URLs\" section. It may be necessary to contact Trimble to request the change. Copy https://widget.withleaf.io Application info# To allow the users to authenticate with Trimble, you will need to send your application info to this endpoint POST /usermanagement/api/app-keys/Trimble/{appName} For Trimble, it is necessary to inform the: applicationNameclientIdclientSecret You can set the appName. Here is a request example: cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"applicationName\": \"string\", \"clientId\": \"string\", \"clientSecret\": \"string\" }' 'https://api.withleaf.io/services/usermanagement/api/app-keys/Trimble/LeafWidget' "},{"title":"Raven Slingshot","type":1,"pageTitle":"Leaf Provider Connection Link","url":"docs/Link_provider_connection#raven-slingshot","content":"To enable Raven Slingshot as a provider in the widget you need your apiKey and sharedSecret from Raven. You can find more info on creating a developer account here. Application info# To allow the users to authenticate with Raven Slingshot, you will need to send your application info to this endpoint POST /usermanagement/api/app-keys/RavenSlingshot/{appName} For Slingshot, it is necessary to inform the: apiKeysharedSecret You can set the appName. Here is a request example: cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"apiKey\": \"string\", \"sharedSecret\": \"string\" }' 'https://api.withleaf.io/services/usermanagement/api/app-keys/RavenSlingshot/LeafWidget' tip Remember your user will still need to provide the Access Key during the authentication process. "},{"title":"Stara","type":1,"pageTitle":"Leaf Provider Connection Link","url":"docs/Link_provider_connection#stara","content":"To enable Stara as a provider in the widget you need your developer user and pwd from Stara. You can find more info on creating a developer account here. info Stara is not yet available in Link Angular Application info# To allow the users to authenticate with Stara, you will need to send your application info to this endpoint POST /usermanagement/api/app-keys/Stara/{appName} For Stara, it is necessary to inform the: userpwd You can set the appName. Here is a request example: cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"user\": \"string\", \"pwd\": \"string\" }' 'https://api.withleaf.io/services/usermanagement/api/app-keys/Stara/LeafWidget' "},{"title":"Tutorial","type":1,"pageTitle":"Leaf Provider Connection Link","url":"docs/Link_provider_connection#tutorial","content":""},{"title":"Angular","type":1,"pageTitle":"Leaf Provider Connection Link","url":"docs/Link_provider_connection#angular","content":"tip Here you can run a live use case demo! It will only be necessary to replace your information in the .html component. To add this Leaf widget in an Angular application, you can use the @withleaf/leaf-link-angular library, which is a JavaScript library that provides all Leaf UI Widgets. Here are the general steps to get started: Install the @withleaf/leaf-link-angular package using npm: Copy npm i @withleaf/leaf-link-angular Import the library in your component or module file: Copy import { ProvidersModule } from '@withleaf/leaf-link-angular'; Add the component to the HTML. Make sure you already created the Leaf user API key (apiKey); you need to specify both the Leaf User API Key and the Leaf User ID (leafUser) in the required properties in the HTML component. Check all the properties available on the reference here. Copy <div class=\"content\" role=\"main\"> <providers apiKey=\"Your_API_Key\" leafUser=\"Your_Leaf_User\" title=\"Your_Title\" companyName=\"Your_Company_Name\" companyLogo=\"Your_Company_Logo\" ></providers> </div> "},{"title":"React","type":1,"pageTitle":"Leaf Provider Connection Link","url":"docs/Link_provider_connection#react","content":"tip Here you can run a live use case demo! It will only be necessary to replace your information in the App.tsx file. To add this Leaf widget in a React application, you can use the @withleaf/leaf-link-react library, which is a JavaScript library that provides all Leaf UI Widgets. Here are the general steps to get started: Install the @withleaf/leaf-link-react package using npm: Copy npm i @withleaf/leaf-link-react Import the component in your *.tsx file: Copy import { Providers } from '@withleaf/leaf-link-react'; Add the component to the *.tsx file. Make sure you already created the Leaf user API key (apiKey); you need to specify both the Leaf User API Key and the Leaf User ID (leafUser) in the required properties in the tsx component. Check all the properties available on the reference here. Copy function App() { return ( <Providers isDarkMode={true/false} companyName={companyName} companyLogo={companyLogoUrl} leafUser={leafUserId} apiKey={apiKey} /> ); } "},{"title":"Reference","type":1,"pageTitle":"Leaf Provider Connection Link","url":"docs/Link_provider_connection#reference","content":""},{"title":"Property Overview","type":1,"pageTitle":"Leaf Provider Connection Link","url":"docs/Link_provider_connection#property-overview","content":"Name\tType\tSummaryapiKey\tString\tThe authentication API Key companyLogoUrl\tString\tCustomization: a link to the company logo companyName\tString\tCustomization: the name of the company isDarkMode\tBoolean\tEnable/disable the dark mode leafUser\tString\tThe Leaf User ID locale\tString\tForces the widget language title\tString\tThe title of the widget showSearchbar\tString\tShow/hide the search bar title\tString\tThe title of the widget Property Details# apiKey# The apiKey is the authentication key that will allow the use of the widget. It can be created and managed here. companyLogoUrl# The URL to the company logo. It will be displayed in the landing screen. It can be a PNG, JPEG or SVG. companyName# The company name. It will be displayed in the landing screen and in each reference about the customer. isDarkMode# Toggles dark mode on and off. The default value is false. leafUser# The Leaf User ID. Check this page for more info about the Leaf User. locale# By default, the widget sets the language based on the user's browser configuration, but to force a language, use this property with one of the possible values: en_US, pt_BR, es_ES, or fr_FR. showSearchbar# Shows/hides the search bar for providers available for integration. The default is true, so the search bar will be displayed. title# The title displayed in the widget. The default is \"Select your integration\". Customized texts will not be automatically translated. "},{"title":"Hooks Overview","type":1,"pageTitle":"Leaf Provider Connection Link","url":"docs/Link_provider_connection#hooks-overview","content":"Leaf Link also have hooks that can improve the developer experience when using the widgets. Name\tType\tDescriptionprovidersConnected\tArray<{ provider: string; createdTime: string }>\tProvide the array of the provider connected and also the createdTime - available after finish the connection process providerWidgetStatus\t{ code: number; message: string }\tProvide the status code and the message from the current widget Status Hooks Details# providersConnected# Provides the array of the providers connected with the createdTime. It will be available after finish the connection process. providerWidgetStatus# Provides the status code and the message from the current widget status: Status Codes# Code\tMessage-1\tError 0\tStarted 1\tDone How to use it# Angular# Use the getWidgetStatus property to reference a function in your component. Copy <div> <providers [apiKey]=\"apiKey\" [leafUser]=\"leafUser\" [companyName]=\"companyName\" [companyLogo]=\"companyLogo\" (getWidgetStatus)=\"yourFunctionNameHere($event)\"> </providers> </div> From the component, you can get the status and the providers connected in the referenced function. Copy import { Component } from '@angular/core'; @Component({ selector: 'app-root', templateUrl: './app.component.html', styleUrls: ['./app.component.css'] }) export class AppComponent { apiKey: string = 'apiKey'; leafUser: string = 'leafUserId'; companyName: string = 'companyName'; companyLogo: string = 'companyLogo'; yourFunctionNameHere(value: any) { console.log(value.providersConnected); console.log(value.providerWidgetStatus); } } React# Copy import { Leaf } from '@withleaf/leaf-link-react'; { Leaf } import is the context that handle with the providers data. Considering you have a custom component that need to handle or just receive the data updates from Provider Widget: Copy import { useLeaf } from '@withleaf/leaf-link-react'; export const MyComponent = () => { // Import the states from the hook const { providerWidgetStatus, providersConnected } = useLeaf(); return ( <> <div> <p data-testid='hook-title' style={{fontSize: '22px',}}> {' '} Hook State Example </p> <p data-testid='status'> <span style={{fontWeight: 'bold', }} > Status Code: </span>{' '} {providerWidgetStatus.code} |{' '} <span style={{ fontWeight: 'bold', }} > Status Message: </span>{' '} {providerWidgetStatus.message} </p> </div> <hr /> <div> {providersConnected.length === 0 ? ( <p>Providers List is empty</p> ) : ( <> {providersConnected.map((provider, index) => ( <> <p data-testid={`${provider.provider}-testid`}> {' '} Provider: <span>{provider.provider}</span> </p> <p> {' '} Created Time: <span>{provider.createdTime}</span> </p> </> ))} </> )} </div> </> ); }; Then, wrap your component in the hook as a children Copy import { Leaf, Providers } from '@withleaf/leaf-link-react' const Example = () => { return ( <Leaf> <MyComponent /> <Providers isDarkMode={true} companyName={'My Company Name'} companyLogo={'url'} leafUser={'myLeafUser'} apiKey={'myApiKey'} locale={'locale'} /> </Leaf> ); }; From your top-level component can pass the current data to all components below, no matter how deep. This variables will be updated every time the Provider update the steps i.e move from one step to other. Tips# The way that the developer get the updated value from the hook can be different depending the of the application, personal preferences or the way it is architected. We suggest the following with useMemo but it can be also implemented with useEffect.useMemo runs the function and caches its result, which will only be recomputed if any value in the dependency array changes. It helps optimize performance by avoiding unnecessary recalculations. Example Copy useMemo(() => { //Something you want to update, as a state from the component. }, [providerConnected, providerWidgetStatus]) "},{"title":"Leaf Link > Endpoints","type":0,"sectionRef":"#","url":"docs/Link_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Leaf Link > Endpoints","url":"docs/Link_endpoints#about","content":"All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/usermanagement/api See below the REST resources and their endpoints available in this service. "},{"title":"API key","type":1,"pageTitle":"Leaf Link > Endpoints","url":"docs/Link_endpoints#api-key","content":"The API keys are the required authentication info for the Leaf widgets. It is created at a Leaf user level.  Endpoints  Description\tEndpointsGet all Leaf user API keys\tGET /api-keys Create a Leaf user API key\tPOST /api-keys Revoke a Leaf user API key\tDELETE /api-keys "},{"title":"Get all Leaf user API keys","type":1,"pageTitle":"Leaf Link > Endpoints","url":"docs/Link_endpoints#get-all-leaf-user-api-keys","content":" GET /api-keys Get all API keys from a Leaf user. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/api-keys?leafUserId={leafUserId}' Response# Copy [ { \"id\": \"uuid\", \"key\": \"xxxx...xxxx\", \"leafUserId\": \"uuid\", \"expiresAt\": \"2024-04-25T18:32:25.530259\", \"description\": \"test\", \"valid\": true }, { \"id\": \"uuid\", \"key\": \"xxxx...xxxx\", \"leafUserId\": \"uuid\", \"expiresAt\": \"2024-04-25T18:36:37.965906\", \"description\": \"test\", \"revokedAt\": \"2023-04-26T21:27:55.674731\", \"valid\": false } ] "},{"title":"Create a Leaf user API key","type":1,"pageTitle":"Leaf Link > Endpoints","url":"docs/Link_endpoints#create-a-leaf-user-api-key","content":" POST /api-keys Creates a Leaf user API key. Request body# It is requires few properties: Copy { \"leafUserId\": \"string\", \"expiresIn\": int, \"description\": \"string\" } leafUserId: leaf user IdexpiresIn: time to expiration, in seconds. The minimum allowed value is 900 (15 minutes). The default value is one year.description: description to identify the API Key Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"leafUserId\": \"string\", \"expiresIn\": 900, \"description\": \"string\" }' 'https://api.withleaf.io/services/usermanagement/api/api-keys' Response# Copy { \"key\": \"xxxxxxx\", \"expiresAt\": \"2024-04-25T18:36:37.965906\", \"valid\": true } "},{"title":"Revoke a Leaf user API key","type":1,"pageTitle":"Leaf Link > Endpoints","url":"docs/Link_endpoints#revoke-a-leaf-user-api-key","content":" DELETE /api-keys Revokes a Leaf user API key. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/api-keys/{apiKeyId}' "},{"title":"Providers application info","type":1,"pageTitle":"Leaf Link > Endpoints","url":"docs/Link_endpoints#providers-application-info","content":"This section is about your application information from the provider, basically related to the required properties for each one, like the client ID, keys, and secrets. Provider setup Setting up the provider application information is mandatory to use the provider in the authentication widgets/links from Leaf Link. "},{"title":"AgLeader","type":1,"pageTitle":"Leaf Link > Endpoints","url":"docs/Link_endpoints#agleader","content":"To enable AgLeader as a provider in the widget you need to have your application already registered with AgLeader. You can find more info on how to create a developer account here.  Endpoints  Description\tEndpointsGet all AgLeader app information\tGET /app-keys/AgLeader Get an AgLeader app information\tGET /app-keys/AgLeader/{appName} Create an AgLeader app information\tPOST /app-keys/AgLeader/{appName} Update an AgLeader app information\tPUT /app-keys/AgLeader/{appName} Delete an AgLeader app information\tDELETE /app-keys/AgLeader/{appName} Get all AgLeader app information#  GET /app-keys/AgLeader Get all AgLeader app information from the API Owner. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/app-keys/AgLeader' Response# Copy [ { \"provider\": \"providerName\", \"appName\": \"yourAppName\", \"clientEnvironment\": \"PRODUCTION\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" }, { \"provider\": \"providerName\", \"appName\": \"yourAppName\", \"clientEnvironment\": \"PRODUCTION\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" } ] Get an AgLeader app information#  GET /app-keys/AgLeader/{appName} Get an AgLeader app information from the API Owner. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/app-keys/AgLeader/{appName}' Response# Copy { \"provider\": \"providerName\", \"appName\": \"yourAppName\", \"clientEnvironment\": \"PRODUCTION\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" } Create an AgLeader app information#  POST /app-keys/AgLeader/{appName} Create an AgLeader app information. Request body# Copy { \"privateKey\": \"string\", \"publicKey\": \"string\" } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"privateKey\": \"string\", \"publicKey\": \"string\" }' 'https://api.withleaf.io/services/usermanagement/api/app-keys/AgLeader/{appName}' Update an AgLeader app information#  PUT /app-keys/AgLeader/{appName} Update an AgLeader app information. Request body# Copy { \"privateKey\": \"string\", \"publicKey\": \"string\" } Request examples# cURLPythonJavaScript Copy curl -X PUT \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"privateKey\": \"string\", \"publicKey\": \"string\" }' 'https://api.withleaf.io/services/usermanagement/api/app-keys/AgLeader/{appName}' Delete an AgLeader app information#  DELETE /app-keys/AgLeader/{appName} Delete an AgLeader app information. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/app-keys/AgLeader/{appName}' "},{"title":"Climate FieldView","type":1,"pageTitle":"Leaf Link > Endpoints","url":"docs/Link_endpoints#climate-fieldview","content":"To enable Climate FieldView as a provider in the widget you need to have your application already registered with Climate FieldView. You can find more info on how to create a developer account here.  Endpoints  Description\tEndpointsGet all Climate FieldView app information\tGET /app-keys/ClimateFieldView Get a Climate FieldView app information\tGET /app-keys/ClimateFieldView/{appName} Create a Climate FieldView app information\tPOST /app-keys/ClimateFieldView/{appName} Update a Climate FieldView app information\tPUT /app-keys/ClimateFieldView/{appName} Delete a Climate FieldView app information\tDELETE /app-keys/ClimateFieldView/{appName} Get all Climate FieldView app information#  GET /app-keys/ClimateFieldView Get all Climate FieldView app information from the API Owner. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/app-keys/ClimateFieldView' Response# Copy [ { \"provider\": \"providerName\", \"appName\": \"yourAppName\", \"clientEnvironment\": \"PRODUCTION\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" }, { \"provider\": \"providerName\", \"appName\": \"yourAppName\", \"clientEnvironment\": \"PRODUCTION\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" } ] Get a Climate FieldView app information#  GET /app-keys/ClimateFieldView/{appName} Get a Climate FieldView app information from the API Owner. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/app-keys/ClimateFieldView/{appName}' Response# Copy { \"provider\": \"providerName\", \"appName\": \"yourAppName\", \"clientEnvironment\": \"PRODUCTION\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" } Create a Climate FieldView app information#  POST /app-keys/ClimateFieldView/{appName} Create a Climate FieldView app information. Request body# Copy { \"apiKey\": \"string\", \"clientId\": \"string\", \"clientSecret\": \"string\" } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"apiKey\": \"string\", \"clientId\": \"string\", \"clientSecret\": \"string\" }' 'https://api.withleaf.io/services/usermanagement/api/app-keys/ClimateFieldView/{appName}' Scopes# If any additional permission is required during the authentication process, use the scopes parameter to require it as displayed below: Copy { \"apiKey\": \"string\", \"clientId\": \"string\", \"clientSecret\": \"string\", \"scopes\": [\"string\"] } Check the allowed values in this scopes table. Update a Climate FieldView app information#  PUT /app-keys/ClimateFieldView/{appName} Update a Climate FieldView app information. Request body# Copy { \"apiKey\": \"string\", \"clientId\": \"string\", \"clientSecret\": \"string\" } Request examples# cURLPythonJavaScript Copy curl -X PUT \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"apiKey\": \"string\", \"clientId\": \"string\", \"clientSecret\": \"string\" }' 'https://api.withleaf.io/services/usermanagement/api/app-keys/ClimateFieldView/{appName}' Delete a Climate FieldView app information#  DELETE /app-keys/ClimateFieldView/{appName} Delete a Climate FieldView app information. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/app-keys/ClimateFieldView/{appName}' "},{"title":"CNHI","type":1,"pageTitle":"Leaf Link > Endpoints","url":"docs/Link_endpoints#cnhi","content":"To enable CNHI as a provider in the widget you need to have your application already registered with CNHI. You can find more info on how to create a developer account here. Integration requirements Copy https://widget.withleaf.io The Leaf widget URL must be registered as a valid \"App OAuth Callback URL(s)\" in your CNHi application. Check this section for more information.  Endpoints  Description\tEndpointsGet all CNHI app information\tGET /app-keys/CNHI Get a CNHI app information\tGET /app-keys/CNHI/{appName}/{clientEnvironment} Create a CNHI app information\tPOST /app-keys/CNHI/{appName}/{clientEnvironment} Update a CNHI app information\tPUT /app-keys/CNHI/{appName}/{clientEnvironment} Delete a CNHI app information\tDELETE /app-keys/CNHI/{appName}/{clientEnvironment} Get all CNHI app information#  GET /app-keys/CNHI Get all CNHI app information from the API Owner. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/app-keys/CNHI' Response# Copy [ { \"provider\": \"providerName\", \"appName\": \"yourAppName\", \"clientEnvironment\": \"STAGE or PRODUCTION\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" }, { \"provider\": \"providerName\", \"appName\": \"yourAppName\", \"clientEnvironment\": \"STAGE or PRODUCTION\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" } ] Get a CNHI app information#  GET /app-keys/CNHI/{appName}/{clientEnvironment} Get a CNHI app information from the API Owner. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/app-keys/CNHI/{appName}/{clientEnvironment}' Response# Copy { \"provider\": \"providerName\", \"appName\": \"yourAppName\", \"clientEnvironment\": \"STAGE or PRODUCTION\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" } Create a CNHI app information#  POST /app-keys/CNHI/{appName}/{clientEnvironment} Create a CNHI app information. Request body# Copy { \"clientId\": \"string\", \"clientSecret\": \"string\", \"subscriptionKey\": \"string\" } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"clientId\": \"string\", \"clientSecret\": \"string\", \"subscriptionKey\": \"string\" }' 'https://api.withleaf.io/services/usermanagement/api/app-keys/CNHI/{appName}/{clientEnvironment}' Update a CNHI app information#  PUT /app-keys/CNHI/{appName}/{clientEnvironment} Update a CNHI app information. Request body# Copy { \"clientId\": \"string\", \"clientSecret\": \"string\", \"subscriptionKey\": \"string\" } Request examples# cURLPythonJavaScript Copy curl -X PUT \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"clientId\": \"string\", \"clientSecret\": \"string\", \"subscriptionKey\": \"string\" }' 'https://api.withleaf.io/services/usermanagement/api/app-keys/CNHI/{appName}/{clientEnvironment}' Delete a CNHI app information#  DELETE /app-keys/CNHI/{appName}/{clientEnvironment} Delete a CNHI app information. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/app-keys/CNHI/{appName}/{clientEnvironment}' "},{"title":"John Deere","type":1,"pageTitle":"Leaf Link > Endpoints","url":"docs/Link_endpoints#john-deere","content":"To enable John Deere as a provider in the widget you need to have your application already registered with John Deere. You can find more info on how to create a developer account here. Integration requirements Copy https://widget.withleaf.io The Leaf widget URL must be registered as a valid \"Redirect URI\" in your John Deere application. Check this section for more information.  Endpoints  Description\tEndpointsGet all John Deere app information\tGET /app-keys/JohnDeere Get a John Deere app information\tGET /app-keys/JohnDeere/{appName}/{clientEnvironment} Create a John Deere app information\tPOST /app-keys/JohnDeere/{appName}/{clientEnvironment} Update a John Deere app information\tPUT /app-keys/JohnDeere/{appName}/{clientEnvironment} Delete a John Deere app information\tDELETE /app-keys/JohnDeere/{appName}/{clientEnvironment} Get all John Deere app information#  GET /app-keys/JohnDeere Get all John Deere app information from the API Owner. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/app-keys/JohnDeere' Response# Copy [ { \"provider\": \"providerName\", \"appName\": \"yourAppName\", \"clientEnvironment\": \"STAGE or PRODUCTION\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" }, { \"provider\": \"providerName\", \"appName\": \"yourAppName\", \"clientEnvironment\": \"STAGE or PRODUCTION\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" } ] Get a John Deere app information#  GET /app-keys/JohnDeere/{appName}/{clientEnvironment} Get a John Deere app information from the API Owner. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/app-keys/JohnDeere/{appName}/{clientEnvironment}' Response# Copy { \"provider\": \"providerName\", \"appName\": \"yourAppName\", \"clientEnvironment\": \"STAGE or PRODUCTION\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" } Create a John Deere app information#  POST /app-keys/JohnDeere/{appName}/{clientEnvironment} Create a John Deere app information. Request body# Copy { \"clientKey\": \"string\", \"clientSecret\": \"string\" } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"clientKey\": \"string\", \"clientSecret\": \"string\" }' 'https://api.withleaf.io/services/usermanagement/api/app-keys/JohnDeere/{appName}/{clientEnvironment}' Update a John Deere app information#  PUT /app-keys/JohnDeere/{appName}/{clientEnvironment} Update a John Deere app information. Request body# Copy { \"clientKey\": \"string\", \"clientSecret\": \"string\" } Request examples# cURLPythonJavaScript Copy curl -X PUT \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"clientKey\": \"string\", \"clientSecret\": \"string\" }' 'https://api.withleaf.io/services/usermanagement/api/app-keys/JohnDeere/{appName}/{clientEnvironment}' Scopes# If any additional permission is required during the authentication process, use the scopes parameter to require it as displayed below: Copy { \"clientKey\": \"string\", \"clientSecret\": \"string\", \"scopes\": [\"string\"] } Check the allowed values in this scopes table. Delete a John Deere app information#  DELETE /app-keys/JohnDeere/{appName}/{clientEnvironment} Delete a John Deere app information. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/app-keys/JohnDeere/{appName}/{clientEnvironment}' "},{"title":"Trimble","type":1,"pageTitle":"Leaf Link > Endpoints","url":"docs/Link_endpoints#trimble","content":"To enable Trimble as a provider in the widget you need to have your application already registered with Trimble. You can find more info on how to create a developer account here. Integration requirements Copy https://widget.withleaf.io The Leaf widget URL must be registered as a valid \"Authentication Callback URL\" in your Trimble application. Check this section for more information.  Endpoints  Description\tEndpointsGet all Trimble app information\tGET /app-keys/Trimble Get a Trimble app information\tGET /app-keys/Trimble/{appName} Create a Trimble app information\tPOST /app-keys/Trimble/{appName} Update a Trimble app information\tPUT /app-keys/Trimble/{appName} Delete a Trimble app information\tDELETE /app-keys/Trimble/{appName} Get all Trimble app information#  GET /app-keys/Trimble Get all Trimble app information from the API Owner. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/app-keys/Trimble' Response# Copy [ { \"provider\": \"providerName\", \"appName\": \"yourAppName\", \"clientEnvironment\": \"PRODUCTION\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" }, { \"provider\": \"providerName\", \"appName\": \"yourAppName\", \"clientEnvironment\": \"PRODUCTION\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" } ] Get a Trimble app information#  GET /app-keys/Trimble/{appName} Get a Trimble app information from the API Owner. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/app-keys/Trimble/{appName}' Response# Copy { \"provider\": \"providerName\", \"appName\": \"yourAppName\", \"clientEnvironment\": \"PRODUCTION\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" } Create a Trimble app information#  POST /app-keys/Trimble/{appName} Create a Trimble app information. Request body# Copy { \"applicationName\": \"string\", \"clientId\": \"string\", \"clientSecret\": \"string\" } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"applicationName\": \"string\", \"clientId\": \"string\", \"clientSecret\": \"string\" }' 'https://api.withleaf.io/services/usermanagement/api/app-keys/Trimble/{appName}' Update a Trimble app information#  PUT /app-keys/Trimble/{appName} Update a Trimble app information. Request body# Copy { \"applicationName\": \"string\", \"clientId\": \"string\", \"clientSecret\": \"string\" } Request examples# cURLPythonJavaScript Copy curl -X PUT \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"applicationName\": \"string\", \"clientId\": \"string\", \"clientSecret\": \"string\" }' 'https://api.withleaf.io/services/usermanagement/api/app-keys/Trimble/{appName}' Delete a Trimble app information#  DELETE /app-keys/Trimble/{appName} Delete a Trimble app information. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/app-keys/Trimble/{appName}' "},{"title":"Raven Slingshot","type":1,"pageTitle":"Leaf Link > Endpoints","url":"docs/Link_endpoints#raven-slingshot","content":"To enable Raven Slingshot as a provider in the widget you need to have your application already registered with Raven Slingshot. You can find more info on how to create a developer account here.  Endpoints  Description\tEndpointsGet all Raven Slingshot app information\tGET /app-keys/RavenSlingshot Get a Raven Slingshot app information\tGET /app-keys/RavenSlingshot/{appName} Create a Raven Slingshot app information\tPOST /app-keys/RavenSlingshot/{appName} Update a Raven Slingshot app information\tPUT /app-keys/RavenSlingshot/{appName} Delete a Raven Slingshot app information\tDELETE /app-keys/RavenSlingshot/{appName} Get all Raven Slingshot app information#  GET /app-keys/RavenSlingshot Get all Raven Slingshot app information from the API Owner. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/app-keys/RavenSlingshot' Response# Copy [ { \"provider\": \"providerName\", \"appName\": \"yourAppName\", \"clientEnvironment\": \"PRODUCTION\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" }, { \"provider\": \"providerName\", \"appName\": \"yourAppName\", \"clientEnvironment\": \"PRODUCTION\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" } ] Get a Raven Slingshot app information#  GET /app-keys/RavenSlingshot/{appName} Get a Raven Slingshot app information from the API Owner. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/app-keys/RavenSlingshot/{appName}' Response# Copy { \"provider\": \"providerName\", \"appName\": \"yourAppName\", \"clientEnvironment\": \"PRODUCTION\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" } Create a Raven Slingshot app information#  POST /app-keys/RavenSlingshot/{appName} Create a Raven Slingshot app information. Request body# Copy { \"apiKey\": \"string\", \"sharedSecret\": \"string\" } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"apiKey\": \"string\", \"sharedSecret\": \"string\" }' 'https://api.withleaf.io/services/usermanagement/api/app-keys/RavenSlingshot/{appName}' Update a Raven Slingshot app information#  PUT /app-keys/RavenSlingshot/{appName} Update a Raven Slingshot app information. Request body# Copy { \"apiKey\": \"string\", \"sharedSecret\": \"string\" } Request examples# cURLPythonJavaScript Copy curl -X PUT \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"apiKey\": \"string\", \"sharedSecret\": \"string\" }' 'https://api.withleaf.io/services/usermanagement/api/app-keys/RavenSlingshot/{appName}' Delete a Raven Slingshot app information#  DELETE /app-keys/RavenSlingshot/{appName} Delete a Raven Slingshot app information. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/app-keys/RavenSlingshot/{appName}' "},{"title":"Stara","type":1,"pageTitle":"Leaf Link > Endpoints","url":"docs/Link_endpoints#stara","content":"To enable Stara as a provider in the widget you need to have your application already registered with Stara. You can find more info on how to create a developer account here. info Stara is not yet available in Link Angular  Endpoints  Description\tEndpointsGet all Stara app information\tGET /app-keys/Stara Get a Stara app information\tGET /app-keys/Stara/{appName} Create a Stara app information\tPOST /app-keys/Stara/{appName} Update a Stara app information\tPUT /app-keys/Stara/{appName} Delete a Stara app information\tDELETE /app-keys/Stara/{appName} Get all Stara app information#  GET /app-keys/Stara Get all Stara app information from the API Owner. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/app-keys/Stara' Response# Copy [ { \"provider\": \"providerName\", \"appName\": \"yourAppName\", \"clientEnvironment\": \"PRODUCTION\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" } ] Get a Stara app information#  GET /app-keys/Stara/{appName} Get a Stara app information from the API Owner. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/app-keys/Stara/{appName}' Response# Copy { \"provider\": \"providerName\", \"appName\": \"yourAppName\", \"clientEnvironment\": \"PRODUCTION\", \"createdTime\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\" } Create a Stara app information#  POST /app-keys/Stara/{appName} Create a Stara app information. Request body# Copy { \"user\": \"string\", \"pwd\": \"string\" } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"accessTokenClient\": \"string\" }' 'https://api.withleaf.io/services/usermanagement/api/app-keys/Stara/{appName}' Update a Stara app information#  PUT /app-keys/Stara/{appName} Update a Stara app information. Request body# Copy { \"accessTokenClient\": \"string\" } Request examples# cURLPythonJavaScript Copy curl -X PUT \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"accessTokenClient\": \"string\" }' 'https://api.withleaf.io/services/usermanagement/api/app-keys/Stara/{appName}' Delete a Stara app information#  DELETE /app-keys/Stara/{appName} Delete a Stara app information. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/app-keys/Stara/{appName}' "},{"title":"Crops Table","type":0,"sectionRef":"#","url":"docs/machine_file_conversion_crops_table","content":"","keywords":""},{"title":"Density","type":1,"pageTitle":"Crops Table","url":"docs/machine_file_conversion_crops_table#density","content":"Here we have a table containing the density for most of the crops extracted from Leaf's providers, where using these values we can generate volumetric representations of harvest yield from mass and vice-versa. "},{"title":"Standard Moisture","type":1,"pageTitle":"Crops Table","url":"docs/machine_file_conversion_crops_table#standard-moisture","content":"The standard moisture value is used to calculate the dry crop values. If the crop does not have a value defined in this table, then the API will not calculate the dry value and will repeat the wet values. Crops\tDensity (lb/bu)\tDry Moisture (%)alfalfa\t100\t13 annual ryegrass\t56\t14 apples\t48 arugula\t1 barley\t47.99\t15 basil\t1 bean, black\t60 bean, green\t78.81 bean, navy\t67.2\t15 bean, pinto\t60.99 beans, edible\t60\t15 bell pepper\t1 bent grass\t14 bentgrass\t1 bermuda grass\t1 black eyed peas\t60.01\t12 blue grass\t14 blueberry\t1 bok choy\t1 boot stage wcs\t60.01 borage\t60 buckwheat\t44\t14 camassia\t1 canna\t1 canola\t50\t10 canola polish\t52.01 cassava\t1 catnip\t1 chasmanthe\t1 cherries\t1\t13 chick peas\t60\t14 chickpeas\t60.98 chives\t4.5 clover\t60 coffee\t19.769\t1 colza\t71.09 coriander\t28 corn\t56\t15 corn, cob mix\t77.69\t13 corn, seed\t1 corn, silage\t49.80 corn, seed\t49.57 corn, white\t56.57\t15 cotton\t120.42 cranberry\t1 crimson clover\t60 downy bromegrass\t1\t12 durum wheat\t60\t13.5 edible bean lrg\t30 edible bean med\t30 edible bean sml\t30 edible beans\t60\t15 einkorn\t18.14\t13 els\t32 emmer\t18.14\t13 energy cane\t7.38 european barley 6\t47.99 european corn\t56 european oats\t31.99 european peas\t60.01 european popcorn\t60.01 european rye\t56 european spring barley\t47.99 european triticale\t57.98 european wheat feed\t60.01 european wheat wtr\t60.01\t14 european winter barley\t47.99 fababean\t62.15 faber beans\t60 fall barley\t48 fan spring barley\t48\t15 fenugreek\t1 festulolium\t1 field beans\t60 field peas\t60\t12 flax\t60\t10 forage mix\t1 fritillaria\t1 garlic\t1 girasol (aceite)\t71.85 grass\t14 grass alfalfa\t1\t13.5 grass clover\t1 grass dry\t110.40 grass half dry\t100 grass seeds\t22 grass wet\t100 green onions\t1 hard red spring wheat\t60.01\t13.5 hard red winter wheat\t60.01\t13.5 hard white spring wheat\t60.01\t13.5 hard white winter wheat\t60.01\t13.5 horseradish\t1 iceberg salad\t18.65 lentil chilean\t60.01 lentil crimson\t60.01 lentil eston\t60.01 lentil laird\t60.01 lentils\t60\t13 lucerne\t54.38 lupins\t60 macadamia\t1 maize\t56\t15.0 maize ccm\t56 maize long\t100 maize short\t100 meadowfoam\t60 millet\t50\t13 millet, pearl\t48 mint\t1 miscanthus\t100 montbretia\t1 mung bean\t60.01 mustard\t55\t9.5 mustard gisilba\t60.01 mustard, seed\t59.00 navy beans\t61.99\t15 oats\t32\t12 oilseed rape winter\t52.01 orchard grass\t14\t12 orchardgrass\t1 ornamental allium\t1 other grains\t40 parsnip\t22.7 pea trapper\t60.01 peanuts\t45 peas\t60 peas, green\t60 pecan\t1 per ryegrass\t56\t13 phacelia\t1 pineapple\t1\t13 popcorn\t100\t14 potatoes\t60 potatoes for chips\t60.01 potatoes for retail\t60.01 potatoes for starch\t60.01 pumpkins\t43.58 quinoa\t1 radish\t52.45 rape seed\t60 rapeseed\t52.01\t12.5 rapeseed e ind\t52.01 rapeseed e oil\t52.01 raspberry\t1 red clover\t1 red grass fescue\t14\t12 reed canary grass\t1\t12 rice\t45\t13 rice long\t45 rice medium\t45\t8 rutabaga\t1 rye\t56\t15 safflower\t38\t8 sesame\t46\t15 silage corn\t60.05\t10 silvergrass\t1 smooth bromegrass\t1\t12 soft red spring wheat\t60.01\t13.5 soft red winter wheat\t60.01\t13.5 soft white spring wheat\t60.01\t13.5 soft white winter wheat\t60.01\t13.5 sorghum\t56\t14 soybeans\t60\t13 spelt\t18.14\t13 spider lilies\t1 spring barley\t48\t15 spring rye\t56 spring wheat\t60\t13.5 sudangrass\t39.99 sudex\t1 sugar beet\t74.66 sugar cane\t80.87\t10 sunflower\t30\t13.5 sunflower e ind\t24.98 sunflower e oil\t24.98 sunflower oil\t28.97 sunflower stripe\t20 sunflower, seed\t51.04 sunflowers\t100\t10 sweet corn\t70\t15 sweet potatoes\t50 sweet sorghum\t100 tall fescue\t1\t12 timothy grass\t1\t12 triticale\t50\t13 turnip\t53.52 turnips\t55\t13.5 upland cotton\t32 walnut\t1 watermelon\t1 wheat\t60\t13.5 wheat (hrd rd spr)\t60\t13.5 wheat (hrd rd wtr)\t60\t13.5 wheat, canada prairie spring red\t60.01 wheat, canada prairie spring white\t60.01\t1 wheat, hard red spring\t60.01\t13.5 wheat, hard red winter\t60.01\t13.5 wheat, hard white spring\t60.01\t13.5 wheat, hard white winter\t60.01\t13.5 wheat, soft red spring\t60.01\t13.5 wheat, soft red winter\t60.01\t13.5 wheat, soft white spring\t60.01\t13.5 wheat, soft white winter\t60.01\t13.5 white beans\t55.16 white clover\t60 white popcorn\t60.01\t12.5 white wheat\t60.01 whole crop dry\t100 whole crop wet\t100 wild rice\t45 winter barley\t48 winter rye\t56\t15 winter wheat\t60\t13.5 wood\t100 yellow popcorn\t60.01 zantedeschia\t1 zucchini\t1\t If the specific variety of the crop from the file that you are trying to process is not present in this table, please contact our support team support@withleaf.io "},{"title":"Machine File Conversion Overview","type":0,"sectionRef":"#","url":"docs/machine_file_conversion_overview","content":"","keywords":""},{"title":"Ways to import machine data into Leaf","type":1,"pageTitle":"Machine File Conversion Overview","url":"docs/machine_file_conversion_overview#ways-to-import-machine-data-into-leaf","content":"Machine files can be imported via Leaf two ways: Uploading the files manually to Leaf: Manual file upload functionality can be useful for your customers if they’re not yet connected to a cloud account through their machinery provider. We provide a manual process or a pre-built file upload widget through Leaf Link to allow your end users to upload various machine file formats via Leaf, which we then process for you into a consistent file format. See previous section for getting started with manual file uploadConnecting to a provider: Leaf will immediately start to pool machine data from the authorized account and monitor new files to keep them updated. See previous section for getting started with provider authentication. "},{"title":"How does Leaf process machine files?","type":1,"pageTitle":"Machine File Conversion Overview","url":"docs/machine_file_conversion_overview#how-does-leaf-process-machine-files","content":"All files move through the following process: Raw proprietary format machine files are converted to a rawGeojson.The rawGeojson gets standardized to become a standardGeojson(Leaf’s proprietary format). The standardGeojson is also cleaned by default.Operations and operation summaries are created by merging machine files based on field boundaries and configuration settings (see operations for more information). File processing time will vary depending on the amount of data being processed on initial upload or sync. You should start to see data processing within a few minutes. After that, processing will happen continuously in the background every 24 hours. Once Leaf has processed files into a file summary, you will receive summarized information, such as averages, standard deviations, maximum and minimum values ​​for important properties, and more. This summary is usually used to get general information about the operation without the need to download and open the standardGeojson file. For example, you can display the area of the operation, how much was harvested and the date it happened, all without opening large files. "},{"title":"Summary geometry","type":1,"pageTitle":"Machine File Conversion Overview","url":"docs/machine_file_conversion_overview#summary-geometry","content":"Leaf API generates a geometry that best represents the coverage of an operation and makes it available in the operation summary. The geometry is created based on the buffer of the operation points.  "},{"title":"Machine file summary vs operation summary","type":1,"pageTitle":"Machine File Conversion Overview","url":"docs/machine_file_conversion_overview#machine-file-summary-vs-operation-summary","content":"Machine file summary: Basic information of files derived from the point data, processed and cleaned by Leaf. Data outputs will vary by task (planted, applied, harvested, tillage). You’ll find some sample responses here. Operation summary: The output of files merged to a field boundary that are processed and cleaned by Leaf. You’ll find some sample responses here. "},{"title":"Why does Leaf merge files?","type":1,"pageTitle":"Machine File Conversion Overview","url":"docs/machine_file_conversion_overview#why-does-leaf-merge-files","content":"Since one single operation can be represented in several (sometimes hundreds of) files by the provider, Leaf provides an auto-merge feature, which will identify files that belong to the same operation (planting, for example) and same field boundary and automatically merge them into a single operation. This works for both integrations and manual file uploads. Please keep in mind that merging files is processing-heavy and can take some time to finish. This process runs every 4 hours.  "},{"title":"Machine File Conversion Endpoints","type":0,"sectionRef":"#","url":"docs/machine_file_conversion_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Machine File Conversion Endpoints","url":"docs/machine_file_conversion_endpoints#about","content":"All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/operations/api This service has the following endpoints available: Description\tEndpointsGet all files\tGET /files Get a file\tGET /files/{id} Get a file summary\tGET /files/{id}/summary Get a file's images\tGET /files/{id}/images Get a file's units\tGET /files/{id}/units Get a file status\tGET /files/{id}/status Get a file's outsideFieldGeoJSON\tGET /files/{id}/outsideFieldGeojson Get all outsideFieldGeoJSON files\tGET /files/outsideFieldGeojson Get uncovered files\tGET /files/uncoveredFiles Merge files\tPOST /files/merge For easily testing these endpoints, we recommend using our Postman collection. requires Leaf User with credentials To have access to operation files, you will need a Leaf User with valid credentials from the provider you want to access data. If you don't have a Leaf User or you have not connected it with any provider yet, see how to create a Leaf Useror how to add credentials to a Leaf User for each of the providers. "},{"title":"Get all files","type":1,"pageTitle":"Machine File Conversion Endpoints","url":"docs/machine_file_conversion_endpoints#get-all-files","content":" GET /files Gets a paged list of files that belong to the current logged in user. It is possible to filter the results by passing some query parameters. They are listed below. Parameter (to filter by)\tValuesleafUserId\tuuid of one of your users provider\tCNHI, JohnDeere, Trimble, ClimateFieldView, AgLeader, RavenSlingshot, Stara or Leaf status\tprocessed, failed or processing origin\tprovider, automerged, merged or uploaded organizationId\tthe provider organizationId (only available for John Deere) batchId\tuuid of the upload response (only available for uploaded files) createdTime\tISO 8601 date. Returns operations from the createdTime onward startTime\tISO 8601 date. Returns operations from the startTime onward updatedTime\tISO 8601 date. Returns operations from the updatedTime onward endTime\tISO 8601 date. Returns operations until the endTime operationType\tapplied, planted, harvested or tillage minArea\ta number (Double) representing the minimum area (square meters) of the operations to be returned Also, for operationType: harvested we can process the yield properties related to the operation using the crop density and standard moisture available in this table. You can also pass some parameters used exclusively for paging through results. They are: page, an integer specifying the page being fetched (default is 0)size, an integer specifying the size of the page (max is 100)sort, the sorting order of the results; can be multi-value, where the first value to be passed will take priority over the next values; you can also specify the order as asc or desc with asc being the default. Example: id, desc Valid values for sorting are: id, fileName, createdTime, updatedTime, origin, leafUserId, sizeInBytes, provider, organizationId, fileFormat. the default value for page size is 20 If the parameters page and size are not set, the endpoint will return 20 results. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files' Response# The response is a JSON with the key \"operations\" referring to a list of files.Here's a link with sample responses for \"planted\", \"applied\", \"harvested\" and \"tillage\" operation files. "},{"title":"Get a file","type":1,"pageTitle":"Machine File Conversion Endpoints","url":"docs/machine_file_conversion_endpoints#get-a-file","content":" GET /files/{id} Gets a single file by its id. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files/{id}' Response# Here's a link with sample responses for \"planted\", \"applied\", \"harvested\" and \"tillage\" operation files. "},{"title":"Get a file summary","type":1,"pageTitle":"Machine File Conversion Endpoints","url":"docs/machine_file_conversion_endpoints#get-a-file-summary","content":" GET /files/{id}/summary Gets the summary, if available, for the file id. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files/{id}/summary' Response# Here's a link with sample responses for \"planted\", \"applied\", \"harvested\" and \"tillage\" operation files. "},{"title":"Get a file's images","type":1,"pageTitle":"Machine File Conversion Endpoints","url":"docs/machine_file_conversion_endpoints#get-a-files-images","content":" GET /files/{id}/images Gets a list of PNG images generated from the operation's file properties. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files/{id}/images' Response# Copy [ { \"property\": \"elevation\", \"ramp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [ 0, 230, 0], \"75%\": [ 0, 190, 0], \"100%\": [ 0, 130, 0], \"nv\": [ 0, 0, 0, 0] }, \"url\": \"URL\", \"downloadUrl\": \"URL\" }, .... ] The property refers to the property extracted from files' data to generate the image. In the example above, the image would represent the elevation. The ramp is the color ramp used to generate the image. The percentages correspond to the minimum (0%) and maximum (100%) values in the image. The listed values correspond to RGB values used. The nv refers to no value. It is used internally to make the image transparent on places without data. Currently, this ramp is the same in all images processed. We also generate an auxiliary xml with geographic information to handle this image on GIS environments. You just need to append the \".aux.xml\" string to the png url. "},{"title":"Get a file's units","type":1,"pageTitle":"Machine File Conversion Endpoints","url":"docs/machine_file_conversion_endpoints#get-a-files-units","content":" GET /files/{id}/units Gets the file's properties and their units. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files/{id}/units' Response# Here's a link with sample responses for \"planted\", \"applied\", \"harvested\" and \"tillage\" operation files. These properties vary depending on the operationType, but you can expect the same, standardized keys, across different providers. Units usually don't change for the same Leaf User, since the providers units configuration is based on their location. But keep in mind that it's best to always take the units into consideration, just to be sure. "},{"title":"Get a file status","type":1,"pageTitle":"Machine File Conversion Endpoints","url":"docs/machine_file_conversion_endpoints#get-a-file-status","content":" GET /files/{id}/status Get status by file processing step by id. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files/{id}/status' Response# Copy { \"rawGeojson\": { \"status\": \"processed\", \"message\": \"ok\" }, \"normalizedGeojson\": { \"status\": \"processed\", \"message\": \"ok\" }, \"standardGeojson\": { \"status\": \"processed\", \"message\": \"ok\" }, \"propertiesPNGs\": { \"status\": \"processed\", \"message\": \"ok\" }, \"areaAndYield\": { \"status\": \"processed\", \"message\": \"ok\" }, \"summary\": { \"status\": \"processed\", \"message\": \"ok\" }, \"units\": { \"status\": \"processed\", \"message\": \"ok\" }, \"originalFile\": { \"status\": \"processed\", \"message\": \"ok\" }, \"cleanupGeojson\": { \"status\": \"processed\", \"message\": \"ok\" } } "},{"title":"Get a file's outsideFieldGeoJSON","type":1,"pageTitle":"Machine File Conversion Endpoints","url":"docs/machine_file_conversion_endpoints#get-a-files-outsidefieldgeojson","content":" GET /files/{id}/outsideFieldGeojson Gets a GeoJSON file with all points not considered in any Field Operation for that Leaf user. This file depends on the splitOperationsByField and enableOutsideFieldGeojson configurations previously enabled. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files/{id}/outsideFieldGeojson' Response# Copy { \"fields\": [ \"uuid\" ], \"featureCount\": 21, \"outsideFieldGeojson\": \"url\", \"downloadOutsideFieldGeojson\": \"url\" } The response will show the number of points/features from the file in the property featureCount. The URL to get access to the file is available in the downloadOutsideFieldGeojson property. This response also shows, in the fields property, all the fields the entire file (from where the outside points were extracted) intersects. "},{"title":"Get all outsideFieldGeoJSON files","type":1,"pageTitle":"Machine File Conversion Endpoints","url":"docs/machine_file_conversion_endpoints#get-all-outsidefieldgeojson-files","content":" GET /files/outsideFieldGeojson Gets a list off all outside GeoJSON files with points not considered in any Field Operation for that Leaf user. This information depends on the splitOperationsByField and enableOutsideFieldGeojson configurations previously enabled. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files/outsideFieldGeojson' Response# Copy [ { \"id\": \"uuid\", \"fields\": [ \"uuid\" ], \"featureCount\": 21, \"outsideFieldGeojson\": \"url\", \"downloadOutsideFieldGeojson\": \"url\" } ] The response will show a list of files that has outside points. For each one, the property featureCount will show the number of points/features from the file. The URL to get access to the file is available in the downloadOutsideFieldGeojson property. This response also shows, in the fields property, all the fields the entire file (from where the outside points were extracted) intersects. "},{"title":"Get uncovered files","type":1,"pageTitle":"Machine File Conversion Endpoints","url":"docs/machine_file_conversion_endpoints#get-uncovered-files","content":" GET /files/uncoveredFiles?leafUserId={leafUserId} Get a list of files that did not generate Field Operations, as they do not intersect with any field. The returned IDs can be consulted in the Get a file endpoint. This endpoint requires the leafUserId filter. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files/uncoveredFiles?leafUserId={leafUserId}' Response# Copy { \"files\": [ \"c3ad6c7b-19b8-4cd7-580a-dfab82043465\", \"c3ad6c7b-c472-49e9-aab2-7ad222843465\", \"9aa68735-5a04-42ef-0983-dbdd2bcdfa16\" ] } "},{"title":"Merge files","type":1,"pageTitle":"Machine File Conversion Endpoints","url":"docs/machine_file_conversion_endpoints#merge-files","content":" POST /files/merge Posts a merge operation to our server. A merge operation is performed asynchronously. This call will return immediately with the newly created file entry, but at this point, the file is not already processed and available. You will need to make a new GET /files request for the new id and check the status. A status value of processed means the file is done merging. A merge process has some validations, the files passed must belong to the same leafUserId, be of the same operation type and have the status as processed. If any of those filters fail, the endpoint will result in HTTP 400 error. It receives a single JSON object with the ids entry. Request body# Copy { \"ids\": [ \"id1\", \"id2\", \"so on\" ] } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"ids\": [ \"id1\", \"id2\" ] }' 'https://api.withleaf.io/services/operations/api/files/merge' Response# Copy { \"id\": \"id\", \"status\": \"SENT_TO_MERGE\" } After a few minutes, you can consult the result of Leaf processing over this file by performing GET consults in this. "},{"title":"Alerts","type":1,"pageTitle":"Machine File Conversion Endpoints","url":"docs/machine_file_conversion_endpoints#alerts","content":"With Alerts you can be notified when something happens or changes instead of needing to repeatedly query for changes. Leaf Alerts support events that happen within Leaf and events that happen within supported 3rd party software. "},{"title":"List of Operations Events","type":1,"pageTitle":"Machine File Conversion Endpoints","url":"docs/machine_file_conversion_endpoints#list-of-operations-events","content":"Leaf Operations Service can Alert you on these events: list of Operations Events "},{"title":"Troubleshooting","type":1,"pageTitle":"Machine File Conversion Endpoints","url":"docs/machine_file_conversion_endpoints#troubleshooting","content":"If a file fails to process, more information about the cause of the failure can be obtained from the status endpoint, as in the example below. Copy { \"zippedPNGs\": { \"status\": \"failed\", \"message\": \"skipped\" }, \"originalFile\": { \"status\": \"processed\", \"message\": \"ok\" }, \"filteredGeojson\": { \"status\": \"failed\", \"message\": \"skipped\" }, \"propertiesPNGs\": { \"status\": \"failed\", \"message\": \"skipped\" }, \"summary\": { \"status\": \"failed\", \"message\": \"skipped\" }, \"rawGeojson\": { \"status\": \"processed\", \"message\": \"ok\" }, \"standardGeojson\": { \"status\": \"failed\", \"message\": \"no points passed the filter\" }, \"units\": { \"status\": \"processed\", \"message\": \"ok\" } } The outermost key indicates the conversion step at which the file passed. The possible status are: processed: the step worked well.failed: the process failed at the current step.skipped: the step was skipped because a failure occurred before or a configuration prevents it from being executed. More information is available in the message property and here are the most common messages: Message\tDetailsno points passed the filter\tWhat it means: Our cleaning process checks every point against a set of criteria which we use to determine if the point is a valid point. When you see this error message it means that no points remained after the cleaning process. Why it occurs: In most cases, the incoming files have 0 points to process and therefore fail the criteria of even having valid points. This file is not strictly a failed file; we are intentionally canceling it given the configuration in place. What you can do: The cleaning process can be turned on/off with the cleanupStandardGeojson configuration. unsupported operation type: {type}\tWhat it means: One of the first things our pipeline does is determine what operation type the file represents. When you see this message it means the operation type detected in the file doesn’t match one of our supported types. Our supported operations are: planting, applications, harvesting and tillage. Examples of unsupported types include: datacollection, datagathering, guidance and unknown. Why it occurs: This typically happens when files are mislabeled or involve an operation not recognized by Leaf. What you can do: Double check with your customer what operation type the file should be. missing required properties: {properties}\tWhat it means: One or more required properties from the Leaf standard format weren’t identified in the file. The message lists the missing properties (e.g., appliedRate, products, seedRate). Why it occurs: Often due to incomplete data or discrepancies in formatting between the uploaded file and Leaf’s expected standards and detection rules we have in place. What you can do: Double check with your customer that the data exists with the provider and if possible send us a screenshot of the correct values. Failed to convert file on provider batch processing\tWhat it means: When we are unable to extract any valid JSON from the provider files, these files are marked as failed to avoid repeated attempts. This file is not strictly a failed file. Why it occurs: Invalid or unrecognizable data structures prevent successful extraction of JSON content. What you can do: Make sure the original data follows the standard structure and file format like naming convention and folder structure. "},{"title":"Units of Measurement and Properties","type":0,"sectionRef":"#","url":"docs/machine_file_conversion_units","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Units of Measurement and Properties","url":"docs/machine_file_conversion_units#about","content":"This page lists the units of measurements and properties across all machine file/operation types (tillage, planting, applied, harvest). If you have any questions or feedback, reach out to our team at help@withleaf.io. Units are determined by the unitMeasurement configuration where you can select IMPERIAL or METRIC. The default is DEFAULT. DefaultImperialMetric These are the units of measurement for the DEFAULT configuration. All typesPlantedAppliedHarvestedTillage Property\tUnit of measurement\tDescriptionstartTime\t-\tAll dates follow ISO 8601 format. Specifically, all dates should be in the format \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\". finishTime\t-\tAll dates follow ISO 8601 format. Specifically, all dates should be in the format \"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\". operationType\t-\tThis field will tell you what type of operation it is e.g. \"planted\", \"harvested\", \"applied\" or \"tillage\". crop\t-\tIndicates the type of crop being grown where the operation is happening e.g. corn. varieties\t-\tIndicates the type of variety being grown where the operation is happening e.g. P1309WAM is a variety of corn. This property also comes with seed rate, count and area information. machinery\t-\tShows the type of machinery used including the name, type, brand and serial number. geometry\t-\tShows where the operation happened and the shape of the area covered, includes geometry type and coordinates. speed\tImperial: ft/s or m/s\tFeet or meters per second. How fast did the tractor travel? totalDistance\tImperial: ft, Metric: m\tFeet or meters. How far did the tractor travel? elevation\tImperial: ft, Metric: m\tFeet or meters. What was the elevation of the landscape? equipmentWidth\tImperial: ft, Metric: m\tFeet or meters. How wide is the equipment? totalArea\tm²\tTotal area covered in square meters. The m² is a common area measurement that's then calculated into another number such as acres (ac) or hectares (ha). "},{"title":"Magic Link Endpoints","type":0,"sectionRef":"#","url":"docs/Magic_link_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Magic Link Endpoints","url":"docs/Magic_link_endpoints#about","content":"All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/widgets/api "},{"title":"Magic Link","type":1,"pageTitle":"Magic Link Endpoints","url":"docs/Magic_link_endpoints#magic-link","content":""},{"title":"Provider","type":1,"pageTitle":"Magic Link Endpoints","url":"docs/Magic_link_endpoints#provider","content":"This is a link to authenticate with multiple providers.  Endpoints  Description\tEndpointsGet all provider Magic Links\tGET /magic-link/provider Get a provider Magic Link\tGET /magic-link/provider/{magicLinkId} Create a provider Magic Link\tPOST /magic-link/users/{leafUserId}/provider Delete a provider Magic Link\tDELETE /magic-link/provider/{magicLinkId} Get all provider Magic Link#  GET /magic-link/provider Get all created links for authentication across multiple providers. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/widgets/api/magic-link/provider' Response# Copy [ { \"id\": \"magicLinkId\", \"link\": \"https://magic-link.withleaf.io/{magicLinkId}\", \"createdAt\": \"2023-11-02T19:17:16.494Z\", \"expiresAt\": \"2024-10-26T14:23:56.584Z\", \"lastAccessedAt\": \"2023-11-02T19:17:18.906Z\", \"leafUserId\": \"UUID\", \"maxUsage\": 3, \"usageCount\": 0, \"widget\": \"PROVIDER\", \"settings\": { \"backgroundColor\": \"codeColor\", \"headerImage\": \"URL\", \"companyLogo\": \"URL\", \"companyName\": \"companyName\", \"showLeafUserName\": \"boolean\", \"disconnectEnabled\": \"boolean\" }, \"allowedProviders\": [ \"Other\" ] }, .... ] Get a provider Magic Link#  GET /magic-link/provider/{magicLinkId} Get a created link for authentication across multiple providers. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/widgets/api/magic-link/provider/{magicLinkId}' Response# Copy { \"id\": \"magicLinkId\", \"link\": \"https://magic-link.withleaf.io/{magicLinkId}\", \"createdAt\": \"2023-11-02T19:17:16.494Z\", \"expiresAt\": \"2024-10-26T14:23:56.584Z\", \"lastAccessedAt\": \"2023-11-02T19:17:18.906Z\", \"leafUserId\": \"UUID\", \"maxUsage\": 3, \"usageCount\": 0, \"widget\": \"PROVIDER\", \"settings\": { \"backgroundColor\": \"codeColor\", \"headerImage\": \"URL\", \"companyLogo\": \"URL\", \"companyName\": \"companyName\", \"showLeafUserName\": \"boolean\", \"disconnectEnabled\": \"boolean\" }, \"allowedProviders\": [ \"Other\" ] } Create a provider Magic Link#  POST /magic-link/users/{leafUserId}/provider Provider application info Make sure you set up your provider application first. More info here. Creates a link for authentication across multiple providers. allowedProviders: the list of providers allowed in the authentication process. It can be one or more of the following: JohnDeere, ClimateFieldView, CNHI, AgLeader, Trimble, RavenSlingshot, and Stara.expiresIn: an integer number for the expiration time, in seconds. This parameter is optional and the default value is 900 (minimum) and the maximum is the equivalent to 1 year. Request body# Copy { \"expiresIn\": int, \"allowedProviders\": [ \"providerName\" ] } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"expiresIn\": int, \"allowedProviders\": [\"providerName\"], \"settings\": { \"backgroundColor\": \"codeColor\", \"headerImage\": \"URL\", \"companyLogo\": \"URL\", \"companyName\": \"companyName\", \"showLeafUserName\": \"boolean\", \"disconnectEnabled\": \"boolean\" } }' 'https://api.withleaf.io/services/widgets/api/magic-link/users/{leafUserId}/provider' Response# Copy { \"id\": \"magicLinkId\", \"leafUserId\": \"UUID\", \"link\": \"https://magic-link.withleaf.io/{magicLinkId}\", \"expiresAt\": \"2010-10-10T10:10:10.000000000Z\" } Delete a provider Magic Link#  DELETE /magic-link/provider/{magicLinkId} Delete a link for authentication across multiple providers. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/widgets/api/magic-link/provider/{magicLinkId}' "},{"title":"Authentication","type":1,"pageTitle":"Magic Link Endpoints","url":"docs/Magic_link_endpoints#authentication","content":"This is a link to authenticate with a single provider.  Endpoints  Description\tEndpointsGet all authentication Magic Links\tGET /magic-link/authentication Get an authentication Magic Link\tGET /magic-link/authentication/{magicLinkId} Create an authentication Magic Link\tPOST /magic-link/users/{leafUserId}/authentication Delete an authentication Magic Link\tDELETE /magic-link/authentication/{magicLinkId} Get all authentication Magic Links#  GET /magic-link/authentication Get all created links for authentication with a single provider. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/widgets/api/magic-link/authentication' Response# Copy [ { \"id\": \"magicLinkId\", \"link\": \"https://magic-link.withleaf.io/{magicLinkId}\", \"createdAt\": \"2023-11-02T19:17:16.494Z\", \"expiresAt\": \"2024-10-26T14:23:56.584Z\", \"lastAccessedAt\": \"2023-11-02T19:17:18.906Z\", \"leafUserId\": \"UUID\", \"maxUsage\": 3, \"usageCount\": 0, \"widget\": \"AUTHENTICATION\", \"settings\": { \"backgroundColor\": \"codeColor\", \"headerImage\": \"URL\", \"companyLogo\": \"URL\", \"companyName\": \"companyName\", \"showLeafUserName\": \"boolean\", \"disconnectEnabled\": \"boolean\" }, \"provider\": \"providerName\" }, .... ] Get an authentication Magic Link#  GET /magic-link/authentication/{magicLinkId} Get a created link for authentication with a single provider. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/widgets/api/magic-link/authentication/{magicLinkId}' Response# Copy { \"id\": \"magicLinkId\", \"link\": \"https://magic-link.withleaf.io/{magicLinkId}\", \"createdAt\": \"2023-11-02T19:17:16.494Z\", \"expiresAt\": \"2024-10-26T14:23:56.584Z\", \"lastAccessedAt\": \"2023-11-02T19:17:18.906Z\", \"leafUserId\": \"UUID\", \"maxUsage\": 3, \"usageCount\": 0, \"widget\": \"AUTHENTICATION\", \"settings\": { \"backgroundColor\": \"codeColor\", \"headerImage\": \"URL\", \"companyLogo\": \"URL\", \"companyName\": \"companyName\", \"showLeafUserName\": \"boolean\", \"disconnectEnabled\": \"boolean\" }, \"provider\": \"providerName\" } Create an authentication Magic Link#  POST /magic-link/users/{leafUserId}/authentication Provider application info Make sure you set up your provider application first. More info here. Creates a link for authentication with a single provider. provider: the provider to be used in the authentication process. It can be: JohnDeere, ClimateFieldView, CNHI, AgLeader, Trimble, RavenSlingshot, or Stara.expiresIn: an integer number for the expiration time, in seconds. This parameter is optional and the default value is 900 (minimum) and the maximum is the equivalent to 1 year. Request body# Copy { \"expiresIn\": int, \"provider\": \"providerName\" } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"expiresIn\": int, \"provider\": \"providerName\", \"settings\": { \"backgroundColor\": \"codeColor\", \"headerImage\": \"URL\", \"companyLogo\": \"URL\", \"companyName\": \"companyName\", \"showLeafUserName\": \"boolean\", \"disconnectEnabled\": \"boolean\" } }' 'https://api.withleaf.io/services/widgets/api/magic-link/users/{leafUserId}/authentication' Response# Copy { \"id\": \"magicLinkId\", \"leafUserId\": \"UUID\", \"link\": \"https://magic-link.withleaf.io/{magicLinkId}\", \"expiresAt\": \"2010-10-10T10:10:10.000000000Z\" } Delete an authentication Magic Link#  DELETE /magic-link/authentication/{magicLinkId} Delete a link for authentication with a single provider. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/widgets/api/magic-link/authentication/{magicLinkId}' "},{"title":"File upload","type":1,"pageTitle":"Magic Link Endpoints","url":"docs/Magic_link_endpoints#file-upload","content":"This is a link to upload machine files.  Endpoints  Description\tEndpointsGet all file upload Magic Links\tGET /magic-link/file-upload Get a file upload Magic Link\tGET /magic-link/file-upload/{magicLinkId} Create a file upload Magic Link\tPOST /magic-link/users/{leafUserId}/file-upload Delete a file upload Magic Link\tDELETE /magic-link/file-upload/{magicLinkId} Get all file upload Magic Links#  GET /magic-link/file-upload Get all file upload created links. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/widgets/api/magic-link/file-upload' Response# Copy [ { \"id\": \"magicLinkId\", \"link\": \"https://magic-link.withleaf.io/{magicLinkId}\", \"createdAt\": \"2023-10-30T20:47:22.630Z\", \"expiresAt\": \"2023-10-30T21:02:22.729Z\", \"lastAccessedAt\": \"2023-10-30T20:47:28.209Z\", \"leafUserId\": \"UUID\", \"maxUsage\": 3, \"usageCount\": 0, \"widget\": \"FILEUPLOAD\", \"settings\": { \"backgroundColor\": \"codeColor\", \"headerImage\": \"URL\", \"companyLogo\": \"URL\", \"companyName\": \"companyName\", \"showLeafUserName\": \"boolean\", \"disconnectEnabled\": \"boolean\" } }, .... ] Get a file upload Magic Link#  GET /magic-link/file-upload/{magicLinkId} Get a file upload created link. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/widgets/api/magic-link/file-upload/{magicLinkId}' Response# Copy { \"id\": \"magicLinkId\", \"link\": \"https://magic-link.withleaf.io/{magicLinkId}\", \"createdAt\": \"2023-10-30T20:47:22.630Z\", \"expiresAt\": \"2023-10-30T21:02:22.729Z\", \"lastAccessedAt\": \"2023-10-30T20:47:28.209Z\", \"leafUserId\": \"UUID\", \"maxUsage\": 3, \"usageCount\": 0, \"widget\": \"FILEUPLOAD\", \"settings\": { \"backgroundColor\": \"codeColor\", \"headerImage\": \"URL\", \"companyLogo\": \"URL\", \"companyName\": \"companyName\", \"showLeafUserName\": \"boolean\", \"disconnectEnabled\": \"boolean\" } } Create a file upload Magic Link#  POST /magic-link/users/{leafUserId}/file-upload Creates a file upload link. expiresIn: an integer number for the expiration time, in seconds. This parameter is optional and the default value is 900 (minimum) and the maximum is the equivalent to 1 year. Request body# Copy { \"expiresIn\": int } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"expiresIn\": int, \"settings\": { \"backgroundColor\": \"codeColor\", \"headerImage\": \"URL\", \"companyLogo\": \"URL\", \"companyName\": \"companyName\", \"showLeafUserName\": \"boolean\", \"disconnectEnabled\": \"boolean\" } }' 'https://api.withleaf.io/services/widgets/api/magic-link/users/{leafUserId}/file-upload' Response# Copy { \"id\": \"magicLinkId\", \"leafUserId\": \"UUID\", \"link\": \"https://magic-link.withleaf.io/{magicLinkId}\", \"expiresAt\": \"2010-10-10T10:10:10.000000000Z\" } Delete a file upload Magic Link#  DELETE /magic-link/file-upload/{magicLinkId} Delete a file upload link. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/widgets/api/magic-link/file-upload/{magicLinkId}' "},{"title":"Magic Link with Leaf User Creation","type":1,"pageTitle":"Magic Link Endpoints","url":"docs/Magic_link_endpoints#magic-link-with-leaf-user-creation","content":"This option enables the creation of Leaf users automatically during the Magic Link creation process. The uniqueness of leaf users can be achieved using a mandatory external identifier, the externalId, which can be an ID already used in your application.  Endpoints  Description\tEndpointsCreate a Provider Magic Link\tPOST /magic-link/provider Create an Authentication Magic Link\tPOST /magic-link/authentication Create a File Upload Magic Link\tPOST /magic-link/file-upload "},{"title":"Create a Provider Magic Link","type":1,"pageTitle":"Magic Link Endpoints","url":"docs/Magic_link_endpoints#create-a-provider-magic-link-1","content":" POST /magic-link/provider Provider application info Make sure you set up your provider application first. More info here. Creates a link for authentication across multiple providers. The leaf user will be created during this process based on the externalId. provider: the provider to be used in the authentication process. It can be: JohnDeere, ClimateFieldView, CNHI, AgLeader, Trimble, RavenSlingshot, or Stara.expiresIn: an integer number for the expiration time, in seconds. This parameter is optional and the default value is 900 (minimum) and the maximum is the equivalent to 1 year.externalId: the client side user unique IDname: it will be the name of the leaf user that we will be created. Updates in this property must be done in the Leaf user endpoints.email: it will be the email of the leaf user that we will be created. Updates in this property must be done in the Leaf user endpoints. info The name and email parameters are optional, they will fill in the leaf user information that we will create, when they are not informed, we will fill in the name and email with the externalId information. Request body# Copy { \"name\": \"user_name\", \"email\": \"user_email\", \"externalId\": \"external_id\", \"expiresIn\": 900, \"allowedProviders\": [ \"provider_name\" ] } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"name\": \"user_name\", \"email\": \"user_email\", \"externalId\": \"external_id\", \"expiresIn\": int, \"allowedProviders\": [\"providerName\"], \"settings\": { \"backgroundColor\": \"codeColor\", \"headerImage\": \"URL\", \"companyLogo\": \"URL\", \"companyName\": \"companyName\", \"showLeafUserName\": \"boolean\", \"disconnectEnabled\": \"boolean\" } }' 'https://api.withleaf.io/services/widgets/api/magic-link/provider' Response# Copy { \"id\": \"magicLinkId\", \"leafUserId\": \"UUID\", \"link\": \"https://magic-link.withleaf.io/{magicLinkId}\", \"expiresAt\": \"2010-10-10T10:10:10.000000000Z\" } "},{"title":"Create an Authentication Magic Link","type":1,"pageTitle":"Magic Link Endpoints","url":"docs/Magic_link_endpoints#create-an-authentication-magic-link-1","content":" POST /magic-link/authentication Provider application info Make sure you set up your provider application first. More info here. Creates a link for authentication with a single provider. The leaf user will be created during this process based on the externalId. provider: the provider to be used in the authentication process. It can be: JohnDeere, ClimateFieldView, CNHI, AgLeader, Trimble, RavenSlingshot, or Stara.expiresIn: an integer number for the expiration time, in seconds. This parameter is optional and the default value is 900 (minimum) and the maximum is the equivalent to 1 year.externalId: the client side user unique IDname: it will be the name of the leaf user that we will be created. Updates in this property must be done in the Leaf user endpoints.email: it will be the email of the leaf user that we will be created. Updates in this property must be done in the Leaf user endpoints. info The name and email parameters are optional, they will fill in the leaf user information that we will create, when they are not informed, we will fill in the name and email with the externalId information. Request body# Copy { \"name\": \"user_name\", \"email\": \"user_email\", \"externalId\": \"external_id\", \"expiresIn\": 900, \"provider\": \"provider_name\" } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"name\": \"user_name\", \"email\": \"user_email\", \"externalId\": \"external_id\", \"expiresIn\": int, \"provider\": \"provider_name\", \"settings\": { \"backgroundColor\": \"codeColor\", \"headerImage\": \"URL\", \"companyLogo\": \"URL\", \"companyName\": \"companyName\", \"showLeafUserName\": \"boolean\", \"disconnectEnabled\": \"boolean\" } }' 'https://api.withleaf.io/services/widgets/api/magic-link/authentication' Response# Copy { \"id\": \"magicLinkId\", \"leafUserId\": \"UUID\", \"link\": \"https://magic-link.withleaf.io/{magicLinkId}\", \"expiresAt\": \"2010-10-10T10:10:10.000000000Z\" } "},{"title":"Create a File Upload Magic Link","type":1,"pageTitle":"Magic Link Endpoints","url":"docs/Magic_link_endpoints#create-a-file-upload-magic-link-1","content":" POST /magic-link/file-upload Create a file upload link. The leaf user will be created during this process based on the externalId. expiresIn: an integer number for the expiration time, in seconds. This parameter is optional and the default value is 900 (minimum) and the maximum is the equivalent to 1 year.externalId: the client side user unique IDname: it will be the name of the leaf user that we will be created. Updates in this property must be done in the Leaf user endpoints.email: it will be the email of the leaf user that we will be created. Updates in this property must be done in the Leaf user endpoints. info The name and email parameters are optional, they will fill in the leaf user information that we will create, when they are not informed, we will fill in the name and email with the externalId information. Request body# Copy { \"name\": \"user_name\", \"email\": \"user_email\", \"externalId\": \"external_id\", \"expiresIn\": 900 } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"name\": \"user_name\", \"email\": \"user_email\", \"externalId\": \"external_id\", \"expiresIn\": int, \"settings\": { \"backgroundColor\": \"codeColor\", \"headerImage\": \"URL\", \"companyLogo\": \"URL\", \"companyName\": \"companyName\", \"showLeafUserName\": \"boolean\", \"disconnectEnabled\": \"boolean\" } }' 'https://api.withleaf.io/services/widgets/api/magic-link/file-upload' Response# Copy { \"id\": \"magicLinkId\", \"leafUserId\": \"UUID\", \"link\": \"https://magic-link.withleaf.io/{magicLinkId}\", \"expiresAt\": \"2010-10-10T10:10:10.000000000Z\" } "},{"title":"Link customization","type":1,"pageTitle":"Magic Link Endpoints","url":"docs/Magic_link_endpoints#link-customization","content":"The links can be customized using some properties described below. Simply fill in the settings property when creating the link.  \tProperty\tType\tDescription1\tbackgroundColor\tstring\tThe application's background color in hexadecimal format, for example: \"#c0392b\" or \"#27ae60\". The default is #F5F5F5. 2\tcompanyLogo\tstring\tURL for the company logo. 3\tcompanyName\tstring\tThe company name. 4\theaderImage\tstring\tURL to an image that will be used as a header in the application. 5\tshowLeafUserName\tboolean\tIndicates whether the Leaf user name will be displayed or not. It can be true or false. The default is false. 6\tdisconnectedEnabled\tboolean\tOnly enabled for provider and authentication Magic Link. Enables the option for the user to choose to disconnect from the provider at the end of the authentication process. It can be true or false. The default is false. Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"expiresIn\": int, \"allowedProviders\": [\"Other\"], \"settings\": { \"backgroundColor\": \"codeColor\", \"headerImage\": \"URL\", \"companyLogo\": \"URL\", \"companyName\": \"companyName\", \"showLeafUserName\": \"boolean\", \"disconnectEnabled\": \"boolean\" } }' 'https://api.withleaf.io/services/widgets/api/magic-link/users/{leafUserId}/provider' "},{"title":"Magic Link Overview","type":0,"sectionRef":"#","url":"docs/Magic_link_overview","content":"","keywords":""},{"title":"Authenticate with Magic Link","type":1,"pageTitle":"Magic Link Overview","url":"docs/Magic_link_overview#authenticate-with-magic-link","content":" "},{"title":"Multiple providers","type":1,"pageTitle":"Magic Link Overview","url":"docs/Magic_link_overview#multiple-providers","content":"The Magic Link Provider is a feature that allows the user to authenticate with several providers using a single link. It is necessary to have previously created the respective application info for these providers. "},{"title":"Single provider","type":1,"pageTitle":"Magic Link Overview","url":"docs/Magic_link_overview#single-provider","content":"The Magic Link Authentication is a feature to authenticate with only one provider at a time. It is necessary to have previously created the application info for this provider. "},{"title":"Upload file with Magic Link","type":1,"pageTitle":"Magic Link Overview","url":"docs/Magic_link_overview#upload-file-with-magic-link","content":" "},{"title":"File upload","type":1,"pageTitle":"Magic Link Overview","url":"docs/Magic_link_overview#file-upload","content":"The Magic Link File upload is a feature that allows the user to upload machine files to the Leaf API. "},{"title":"Machine File Conversion Sample Responses","type":0,"sectionRef":"#","url":"docs/machine_file_conversion_sample_output","content":"","keywords":""},{"title":"Overview","type":1,"pageTitle":"Machine File Conversion Sample Responses","url":"docs/machine_file_conversion_sample_output#overview","content":"This page shows and describes sample responses from Leaf's API, along with a list of what properties you can expect for each type of data. "},{"title":"Machine Files","type":1,"pageTitle":"Machine File Conversion Sample Responses","url":"docs/machine_file_conversion_sample_output#machine-files","content":"Leaf returns operation file in a standardized format. Summaries use the point data to derive basic information about the operation and include links to the original files and images of an operation. Naturally, different types of operations contain different properties. For instance, an appliedoperation will contain appliedRate, whereas a harvested operation will contain wetMass and other Yield properties. The resource below shows a typical return. A list of all properties is available here. A list of the properties as well as a sample summary response for an operation file is included below. An operation returned by Leaf can be an individual file or contain multiple individual files (uploaded, merged or uploaded). If the operation contains more than one individual file, another key is added to the resource, the \"sources\" key, that is a list of individual file ids. If the operation was created by an upload on the /batch endpoint, the \"batchId\"key will be added to the resource with the corresponding uuid. "},{"title":"Machine File Sample","type":1,"pageTitle":"Machine File Conversion Sample Responses","url":"docs/machine_file_conversion_sample_output#machine-file-sample","content":"You can move through the four tabs below to see a sample of how Leaf returns each of the operation types. PlantedAppliedHarvestedTillage This is an example of a summary for a \"harvested\" operation Copy { \"id\": \"7b525b72-a8e7-4d34-80bb-9ea2dde87a09\", \"provider\": \"providerName\", \"fields\": [ \"696b5df6-e401-4d13-bafe-3d2689723254\" ], \"fileFormat\": \"CN1\", \"fileName\": \"testFile.zip\", \"originalFile\": \"url\", \"downloadOriginalFile\": \"url\", \"rawGeojson\": \"url\", \"downloadRawGeojson\": \"url\", \"standardGeojson\": \"url\", \"downloadStandardGeojson\": \"url\", \"leafUserId\": \"286eeb50-8e85-4e33-9f2d-1b9dcf0e56d7\", \"apiOwnerUsername\": \"test\", \"summary\": { \"type\": \"Feature\", \"properties\": { \"totalDryMass\": { \"value\": 69707.74072725822, \"unit\": \"lb\" }, \"dryVolume\": { \"avg\": 0.10060462979191162, \"min\": 0.0006342037622996388, \"max\": 0.19444628348991, \"unit\": \"bu\" }, \"totalDryVolume\": { \"value\": 1244.7810844153173, \"unit\": \"bu\" }, \"wetMassPerArea\": { \"avg\": 11752.315810068158, \"min\": 87.79542055062868, \"max\": 40340.87999553387, \"unit\": \"lb/ac\" }, \"speed\": { \"avg\": 4.926574796479164, \"min\": 2.430000066757202, \"max\": 6.389999866485596, \"unit\": \"mi/hr\" }, \"totalWetVolume\": { \"value\": 1294.538978069886, \"unit\": \"bu\" }, \"originalOperationType\": \"Harvesting\", \"startTime\": \"2015-09-23T00:00:00Z\", \"totalDistance\": { \"value\": 17978.417202127104, \"unit\": \"ft\" }, \"wetMass\": { \"avg\": 5.859062698772619, \"min\": 0.03795335565182652, \"max\": 11.06340317250743, \"unit\": \"lb\" }, \"elevation\": { \"avg\": 155.78382768932352, \"min\": 147.6, \"max\": 162.4, \"unit\": \"ft\" }, \"harvestMoisture\": { \"avg\": 18.224961609957166, \"min\": 12.75, \"max\": 21.18, \"unit\": \"percentage\" }, \"dryVolumePerArea\": { \"avg\": 201.7963353621763, \"min\": 1.467068855167438, \"max\": 687.8289538734305, \"unit\": \"bu/ac\" }, \"wetVolume\": { \"avg\": 0.10462611962093962, \"min\": 0.0006777384937826164, \"max\": 0.19756077093763266, \"unit\": \"bu\" }, \"wetVolumePerArea\": { \"avg\": 209.86278232264567, \"min\": 1.5677753669755121, \"max\": 720.3728570631048, \"unit\": \"bu/ac\" }, \"dryMassPerArea\": { \"avg\": 11300.594780281874, \"min\": 82.15585588937653, \"max\": 38518.421416912104, \"unit\": \"lb/ac\" }, \"totalWetMass\": { \"value\": 72494.18277191388, \"unit\": \"lb\" }, \"totalFuelUsed\": { \"value\": 196.25137347639, \"unit\": \"gal\" }, \"varieties\": [ { \"harvestMoisture\": { \"avg\": 18.224961609957166, \"min\": 12.75, \"max\": 21.18, \"unit\": \"percentage\" }, \"wetMass\": { \"value\": 72494.18277191388, \"unit\": \"lb\" }, \"wetMassPerArea\": { \"value\": 2.904060481369501, \"unit\": \"lb/ac\" }, \"wetVolume\": { \"value\": 1294.538978069886, \"unit\": \"bu\" }, \"area\": { \"value\": 24963.041657357968, \"unit\": \"m2\" }, \"dryVolume\": { \"value\": 1244.7810844153173, \"unit\": \"bu\" }, \"dryMassPerArea\": { \"value\": 2.7924377839874155, \"unit\": \"lb/ac\" }, \"dryMass\": { \"value\": 69707.74072725822, \"unit\": \"lb\" }, \"name\": \"Corn\" } ], \"originalOperationData\": { \"originalOperationType\": \"Harvesting\" }, \"operationType\": \"harvested\", \"dryMass\": { \"avg\": 5.6338592683470505, \"min\": 0.035515410688779774, \"max\": 10.88899187543496, \"unit\": \"lb\" }, \"endTime\": \"2015-09-24T00:36:55.8Z\", \"crop\": [ \"corn\" ], \"totalArea\": { \"value\": 24963.041657357968, \"unit\": \"m2\" }, \"machinery\": [ { \"name\": \"Case IH X010 Series 7010\", \"type\": \"machine\", \"serialNumber\": \"8227260\", \"brand\": \"Case IH\" }, { \"name\": \"Case IH Corn Head 15ft 6row\", \"type\": \"implement\", \"brand\": \"Case IH\" } ] }, \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [[[ [-89.80434894561768,40.47791686563837], [-89.80756759643555,40.4757623387113], [-89.80746030807495,40.47302011353734], [-89.80475664138794,40.47070219301965], [-89.80080842971802,40.47068586935202], [-89.79797601699828,40.472709973879255], [-89.7978687286377,40.47569704893722], [-89.80117321014404,40.47808008455794], [-89.80434894561768,40.47791686563837] ]]] } } } "},{"title":"Properties by Operation Type","type":1,"pageTitle":"Machine File Conversion Sample Responses","url":"docs/machine_file_conversion_sample_output#properties-by-operation-type","content":"Select the tab you want to see: \"planted\", \"applied\", \"harvested\", or \"tillage\". PlantedAppliedHarvestedTillage key\tpresence\ttypecrop\t*\tstring seedRate\t*\tdict operationType\t*\tstring \"planted\" originalOperationType\t**\tstring totalArea\t*\tfloat elevation\t*\tdict varieties\t**\tdict seedRateTarget\t**\tdict seedDepth\t**\tdict machinery\t**\tlist of machineInfo objects speed\t**\tdict totalPlanted\t**\tint (number of seeds) operationDescription\t**\tstring downForce\t**\tdict singulation\t**\tdict totalFuelUsed\t**\tdict * = Always in response ** = Usually in response but not required to pass tests "},{"title":"Standard Geojson","type":1,"pageTitle":"Machine File Conversion Sample Responses","url":"docs/machine_file_conversion_sample_output#standard-geojson","content":"When the data is present in the original file, Leaf standardizes names and units to create the standardGeojson. Below we list all the properties in the standardGeojson. "},{"title":"Summary Response Sample","type":1,"pageTitle":"Machine File Conversion Sample Responses","url":"docs/machine_file_conversion_sample_output#summary-response-sample","content":"Each operation file returns with a \"standardgeojson\" URL that allows you to download a full point dataset from the operation in a standardized geojson format. Below is an example of the format of each point in these files. PlantedAppliedHarvestedTillage Copy { \"type\": \"Feature\", \"geometry\": { \"type\": \"Point\", \"coordinates\": [-74.83762110788625, 28.686604864693564] }, \"properties\": { \"distance\": \"float\", \"heading\": \"float\", \"speed\": \"float\", \"elevation\": \"float\", \"equipmentWidth\": \"float\", \"recordingStatus\": \"string\", \"machinery\": [\"string\"], \"sectionId\" : \"int\", \"timestamp\": \"string\", \"operationType\": \"planted\", \"originalOperationType\": \"name of the operation as returned by the provider\", \"crop\": \"string\", \"variety\": \"string\", \"area\": \"float\", \"seedRate\": \"int\", \"seedRateTarget\": \"int\", \"seedDepth\": \"float\", \"downForce\": \"float\", \"singulation\": \"float\", \"skips\": \"float\", \"doubles\": \"float\", \"fuelUsed\": \"float\" } } "},{"title":"Properties","type":1,"pageTitle":"Machine File Conversion Sample Responses","url":"docs/machine_file_conversion_sample_output#properties","content":"PlantedAppliedHarvestedTillage key\tpresence\ttype\texample units\tdescriptioncoords\t*\tPoint (x,y)\t-\tPoint (x,y) timestamp\t*\tstring\t-\tISO 8601 date, complete and with Z. example: 2011-10-05T14:48:00.000Z crop\t*\tstring\t-\tCrop type (normalized) area\t*\tfloat\tft² or m²\tArea represented by point heading\t*\tfloat\tdegrees\tHeading of machine at point distance\t*\tfloat\tft or m\tDistance traveled since previous point elevation\t*\tfloat\tft or m\tDistance to sea level operationType\t*\tstring\t-\tstring \"planted\" originalOperationType\t**\tstring\t-\tstring equipmentWidth\t*\tfloat\tft or m\tWidth of implement recordingStatus\t**\tBoolean\t-\tRecording status of machine at point seedRate\t*\tint\tseeds/m² or seeds/ac\tThe rate of seeds planted at point variety\t**\tstring\t-\tThe variety of seed being planted speed\t**\tfloat\tft/s or m/s\tSpeed of machine at point sectionId\t**\tint\t-\tID of implement sensor section machinery\t**\tlist of machineInfo objects\t-\tname of machine & implement seedRateTarget\t**\tint\tseeds/m² or seeds/ac\tThe target rate of seeds to be planted at the point seedDepth\t**\tfloat\tcm\tThe depth at which seeds were planted at point productIndex\t**\tint\t-\tIndex of the applied product downForce\t**\tfloat\tlbf\tThe weight detected by the down force sensor on each row that has one singulation\t**\tfloat\t%\tThe performance of each meter on the planter xOffset\t**\tfloat\tm\tVertical offset from the instrumentation sensor and the monitor GPS system yOffset\t**\tfloat\tm\tHorizontal offset from the instrumentation sensor and the monitor GPS system fuelUsed\t**\tfloat\tL or gal\tThe fuel consumed * = Always in response ** = Usually in response but not required to pass tests $ = Not available when the crop is sugarcane Despite the example units, Leaf's API will push through every unit, if the processed file contains the required (marked with *) properties. "},{"title":"Valid points","type":1,"pageTitle":"Machine File Conversion Sample Responses","url":"docs/machine_file_conversion_sample_output#valid-points","content":"The points in the standardGeoJSON are considered valid if all the following rules are true: property\trulewetMass\t> 0.0 wetMassPerArea\t> 0.0 wetVolume\t> 0.0 wetVolumePerArea\t> 0.0 harvestMoisture\t> 0.0 and <100.0 appliedRate\t> 0.0 seedRate\t> 0.0 tillageDepthActual\t>= 0.0 recordingStatus\t= \"On\" The API will automatically clean the invalid points when the cleanupStandardGeojson configuration is enabled. "},{"title":"Images","type":1,"pageTitle":"Machine File Conversion Sample Responses","url":"docs/machine_file_conversion_sample_output#images","content":"Also, Leaf displays all the numerical properties across all operation types via a png file. Here's a sample response from a Leaf harvested file. Copy [ { \"property\": \"area\", \"ramp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0 ] }, \"url\": \"https://png-files-bucket-dev.s3.us-east-1.amazonaws.com/uuid.png\" }, { \"property\": \"wetMass\", \"ramp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0 ] }, \"url\": \"https://png-files-bucket-dev.s3.us-east-1.amazonaws.com/uuid.png\" }, { \"property\": \"wetVolume\", \"ramp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0 ] }, \"url\": \"https://png-files-bucket-dev.s3.us-east-1.amazonaws.com/uuid.png\" }, { \"property\": \"distance\", \"ramp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0 ] }, \"url\": \"https://png-files-bucket-dev.s3.us-east-1.amazonaws.com/uuid.png\" }, { \"property\": \"wetVolumePerArea\", \"ramp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0 ] }, \"url\": \"https://png-files-bucket-dev.s3.us-east-1.amazonaws.com/uuid.png\" }, { \"property\": \"equipmentWidth\", \"ramp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0 ] }, \"url\": \"https://png-files-bucket-dev.s3.us-east-1.amazonaws.com/uuid.png\" }, { \"property\": \"wetMassPerArea\", \"ramp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0 ] }, \"url\": \"https://png-files-bucket-dev.s3.us-east-1.amazonaws.com/uuid.png\" }, { \"property\": \"sectionId\", \"ramp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0 ] }, \"url\": \"https://png-files-bucket-dev.s3.us-east-1.amazonaws.com/uuid.png\" }, { \"property\": \"elevation\", \"ramp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0 ] }, \"url\": \"https://png-files-bucket-dev.s3.us-east-1.amazonaws.com/uuid.png\" }, { \"property\": \"harvestMoisture\", \"ramp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0 ] }, \"url\": \"https://png-files-bucket-dev.s3.us-east-1.amazonaws.com/uuid.png\" }, { \"property\": \"heading\", \"ramp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0 ] }, \"url\": \"https://png-files-bucket-dev.s3.us-east-1.amazonaws.com/uuid.png\" }, { \"property\": \"dryMass\", \"ramp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0 ] }, \"url\": \"https://png-files-bucket-dev.s3.us-east-1.amazonaws.com/uuid.png\" }, { \"property\": \"dryMassPerArea\", \"ramp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0 ] }, \"url\": \"https://png-files-bucket-dev.s3.us-east-1.amazonaws.com/uuid.png\" }, { \"property\": \"dryVolume\", \"ramp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0 ] }, \"url\": \"https://png-files-bucket-dev.s3.us-east-1.amazonaws.com/uuid.png\" }, { \"property\": \"dryVolumePerArea\", \"ramp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [0, 230, 0], \"75%\": [0, 190, 0], \"100%\": [0, 130, 0], \"nv\": [0, 0, 0, 0 ] }, \"url\": \"https://png-files-bucket-dev.s3.us-east-1.amazonaws.com/uuid.png\" } ] "},{"title":"Machine Files Units","type":1,"pageTitle":"Machine File Conversion Sample Responses","url":"docs/machine_file_conversion_sample_output#machine-files-units","content":"Here is an example of Units from the numerical properties of the Machine Files. PlantedHarvestedAppliedTillage Copy { \"elevation\": \"ft\", \"area\": \"m2\", \"harvestMoisture\": \"percentage\", \"dryVolumePerArea\": \"bu/ac\", \"distance\": \"ft\", \"heading\": \"arcdeg\", \"dryVolume\": \"bu\", \"wetVolume\": \"bu\", \"wetVolumePerArea\": \"bu/ac\", \"dryMassPerArea\": \"lb/ac\", \"wetMassPerArea\": \"lb/ac\", \"speed\": \"mi/hr\", \"equipmentWidth\": \"ft\", \"dryMass\": \"lb\", \"wetMass\": \"lb\" } "},{"title":"Field Operations Overview","type":0,"sectionRef":"#","url":"docs/operations_overview","content":"","keywords":""},{"title":"Operations","type":1,"pageTitle":"Field Operations Overview","url":"docs/operations_overview#operations","content":"Leaf operations provide a way to get unified, consistent and standardized data from tasks (planting, tillage, application and harvest) performed in a given field, across all the provider(s) you integrate. For all operations processed through Leaf, you will receive: A standardGeoJsonFiltered GeoJson (if enabled)Relevant images of the operation (if enabled)File summary Leaf automatically processes operation files and merges them into field operations. You can find more information on how to extract operations data through the Operations endpoint page. IMPORTANT NOTE: The process of creating operations starts at Machine File Conversion so please make sure you read and understand the conversion process before continuing.You MUST have field boundaries in order to create operations.It is important to set up configurations to ensure you customize your setup to your needs.Also, alerts should be set up (webhooks) to ensure that you are notified when there are updates to your data and that data processing is finished.  "},{"title":"Prescriptions > Operations Planning Endpoints","type":0,"sectionRef":"#","url":"docs/operations_planning_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Prescriptions > Operations Planning Endpoints","url":"docs/operations_planning_endpoints#about","content":"All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/prescription/api See below the REST resources and their endpoints available in this service. "},{"title":"Operations planning","type":1,"pageTitle":"Prescriptions > Operations Planning Endpoints","url":"docs/operations_planning_endpoints#operations-planning","content":"This feature has the following endpoints available: Description\tEndpointsCreate operation planning on John Deere\tPOST /users/{leafUserId}/operationsPlanning/JohnDeere Get all operation planning\tGET /users/{leafUserId}/operationsPlanning "},{"title":"Create operation planning on John Deere","type":1,"pageTitle":"Prescriptions > Operations Planning Endpoints","url":"docs/operations_planning_endpoints#create-operation-planning-on-john-deere","content":" POST /users/{leafUserId}/operationsPlanning/JohnDeere Creates an operation planning on John Deere, it is the equivalent to John Deere Work Plans. Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"fieldId\": \"UUID\", \"applicationPrescriptions\": [ { \"prescriptionId\": \"UUID\", \"prescriptionUnits\": \"String\", \"prescriptionUse\": \"String\", \"productId\": \"UUID\" }], \"instructions\": \"String\", \"seedingPrescriptions\": [ { \"prescriptionId\": \"UUID\", \"prescriptionUnits\": \"String\", \"prescriptionUse\": \"String\", \"varietyId\": \"String\" } ], \"workOrder\": \"String\", \"instructions\": \"string\", \"year\": 2024 }' \\ 'https://api.withleaf.io/services/prescription/api/users/{leafUserId}/operationsPlanning/JohnDeere' Response# Copy { \"id\": \"UUID\", \"leafUserId\": \"UUID\", \"provider\": \"String\", \"providerPlanId\": \"UUID\", \"createdAt\": \"ISO Date\", \"organizationId\": \"Integer\", \"fieldId\": \"UUID\", \"applicationPrescriptions\": [ { \"prescriptionId\": \"UUID\", \"prescriptionUnits\": \"String\", \"prescriptionUse\": \"String\", \"productId\": \"UUID\" } ], \"instructions\": \"String\", \"seedingPrescriptions\": [ { \"prescriptionId\": \"UUID\", \"prescriptionUnits\": \"String\", \"prescriptionUse\": \"String\", \"varietyId\": \"String\" } ], \"workOrder\": \"String\", \"instructions\": \"string\", \"year\": 2024 } "},{"title":"Get all operation planning","type":1,"pageTitle":"Prescriptions > Operations Planning Endpoints","url":"docs/operations_planning_endpoints#get-all-operation-planning","content":" GET /users/{leafUserId}/operationsPlanning List the existing operation plans. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/beta/prescription/api/users/{leafUserId}/operationsPlanning' Response# Copy [ { \"id\": \"UUID\", \"leafUserId\": \"UUID\", \"provider\": \"String\", \"providerPlanId\": \"UUID\", \"createdAt\": \"ISO Date\", \"organizationId\": \"Integer\", \"fieldId\": \"UUID\", \"applicationPrescriptions\": [ { \"prescriptionId\": \"UUID\", \"prescriptionUnits\": \"String\", \"prescriptionUse\": \"String\", \"productId\": \"UUID\" } ], \"instructions\": \"String\", \"seedingPrescriptions\": [ { \"prescriptionId\": \"UUID\", \"prescriptionUnits\": \"String\", \"prescriptionUse\": \"String\", \"varietyId\": \"String\" } ], \"workOrder\": \"String\", \"instructions\": \"string\", \"year\": \"Integer\" } ] "},{"title":"Field Operations Endpoints","type":0,"sectionRef":"#","url":"docs/operations_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Field Operations Endpoints","url":"docs/operations_endpoints#about","content":"All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/operations/api This service has the following endpoints available: Description\tEndpointsGet all operations\tGET /operations Get an operation\tGET /operations/{id} Get the operation's summary\tGET /operations/{id}/summary Get the operation's standardGeojson\tGET /operations/{id}/standardGeojson Get the operation's standardGeoParquet\tGET /operations/{id}/standardGeoparquet Get the operation's filteredGeojson\tGET /operations/{id}/filteredGeojson Get the operation's filteredGeoParquet\tGET /operations/{id}/filteredGeoparquet Get operation's images\tGET /operations/{id}/images Get operation's images V2\tGET /operations/{id}/imagesV2 Get operation's geotiff images\tGET /operations/{id}/geotiffImages Get the operation's units\tGET /operations/{id}/units Get the operation's machines\tGET /operations/{id}/machines Get the operation's implements\tGET /operations/{id}/implements Get the operation's operators\tGET /operations/{id}/operators Get the operation's sessions\tGET /operations/{id}/sessions Crop operation by field\tPOST /operations/cropOperationByField Reprocess an operation\tPOST /operations/{id}/reprocess Get files from an operation\tGET /operations/{id}/files For easily testing these endpoints, we recommend using our Postman collection. "},{"title":"Get all operations","type":1,"pageTitle":"Field Operations Endpoints","url":"docs/operations_endpoints#get-all-operations","content":" GET /operations Gets a paged list of operations that belong to the current logged in user. It is possible to filter the results by passing some query parameters. They are listed below. Parameter (to filter by)\tValuesleafUserId\tuuid of one of your users provider\tCNHI, JohnDeere, Trimble, ClimateFieldView, AgLeader, Stara or Leaf startTime\tISO 8601 date. Returns operations from the startTime onward updatedTime\tISO 8601 date. Returns operations from the updatedTime onward endTime\tISO 8601 date. Returns operations until the endTime operationType\tapplied, planted, harvested or tillage fieldId\tthe field where the operation happened You can also pass some parameters used exclusively for paging through results. They are: page, an integer specifying the page being fetched (default is 0)size, an integer specifying the size of the page (max is 100)sort, the sorting order of the results; can be multi-value, where the first value to be passed will have preference in ordering over the next ones; you can also specify the order as asc or desc with asc being the default. Example: id, desc Valid values for sorting are: id, leafUserId, startTime, endTime, type and updatedTime. the default value for page size is 20 If the parameters page and size are not set, the endpoint will return 20 results. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/operations' Response# Copy [ { \"id\": \"5c8fdb34-4dc4-4b96-bfd5-53e6206ce971\", \"apiOwnerUsername\": \"test\", \"leafUserId\": \"7494c90e-28b8-4bb2-9ede-95c1cc894349\", \"startTime\": \"2015-04-18T19:31:27Z\", \"endTime\": \"2015-04-18T19:58:50Z\", \"updatedTime\": \"2021-08-24T16:00:15.062Z\", \"type\": \"planted\", \"files\": [ \"a10b85c2-ac2e-4b0f-8e65-74edbd2ca53e\", \"759e1b62-dc69-4332-b618-6449a37470fa\" ], \"fields\": [ { \"id\": \"0071484f-4a75-4190-9fd0-f5995d241c2c\" } ], \"providers\": [ \"providerName\" ] }, .... ] "},{"title":"Get an operation","type":1,"pageTitle":"Field Operations Endpoints","url":"docs/operations_endpoints#get-an-operation","content":" GET /operations/{id} Gets a single operation by its id. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/operations/{id}' Response# Copy { \"id\": \"5c8fdb34-4dc4-4b96-bfd5-53e6206ce971\", \"apiOwnerUsername\": \"test\", \"leafUserId\": \"7494c90e-28b8-4bb2-9ede-95c1cc894349\", \"startTime\": \"2015-04-18T19:31:27Z\", \"endTime\": \"2015-04-18T19:58:50Z\", \"updatedTime\": \"2021-08-24T16:00:15.062Z\", \"type\": \"planted\", \"files\": [ \"a10b85c2-ac2e-4b0f-8e65-74edbd2ca53e\", \"759e1b62-dc69-4332-b618-6449a37470fa\" ], \"fields\": [ { \"id\": \"0071484f-4a75-4190-9fd0-f5995d241c2c\" } ], \"providers\": [ \"providerName\" ] } "},{"title":"Get the operation's summary","type":1,"pageTitle":"Field Operations Endpoints","url":"docs/operations_endpoints#get-the-operations-summary","content":" GET /operations/{id}/summary Gets the summary, if available, for the operation id. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/operations/{id}/summary' Response# Here's a link with sample responses for \"planted\", \"applied\", \"harvested\" and \"tillage\" operations. "},{"title":"Get the operation's standardGeojson","type":1,"pageTitle":"Field Operations Endpoints","url":"docs/operations_endpoints#get-the-operations-standardgeojson","content":" GET /operations/{id}/standardGeojson Get the standardGeojson file URL relative to the operation. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/operations/{id}/standardGeojson' Response# Copy { \"standardGeojson\": \"URL\", \"downloadStandardGeojson\": \"URL\" } "},{"title":"Get the operation's standardGeoparquet","type":1,"pageTitle":"Field Operations Endpoints","url":"docs/operations_endpoints#get-the-operations-standardgeoparquet","content":" GET /operations/{id}/standardGeoparquet Get the standard GeoParquet file URL relative to the operation. tip To use this option, enableGeoparquetOutput configuration must be enabled. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/operations/{id}/standardGeoparquet' Response# Copy { \"downloadStandardGeoparquet\": \"URL\" } "},{"title":"Get the operation's filteredGeojson","type":1,"pageTitle":"Field Operations Endpoints","url":"docs/operations_endpoints#get-the-operations-filteredgeojson","content":" GET /operations/{id}/filteredGeojson Get the filteredGeojson file URL relative to the operation. tip To use this option, the operationsFilteredGeojson configuration must be enabled. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/operations/{id}/filteredGeojson' Response# Copy { \"filteredGeojson\": \"URL\", \"downloadFilteredGeojson\": \"URL\" } "},{"title":"Get the operation's filteredGeoparquet","type":1,"pageTitle":"Field Operations Endpoints","url":"docs/operations_endpoints#get-the-operations-filteredgeoparquet","content":" GET /operations/{id}/filteredGeoparquet Get the filtered GeoParquet file URL relative to the operation. tip To use this option, the operationsFilteredGeojson and enableGeoparquetOutput configuration must be enabled. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/operations/{id}/filteredGeoparquet' Response# Copy { \"downloadFilteredGeoparquet\": \"URL\" } "},{"title":"Get operation's images","type":1,"pageTitle":"Field Operations Endpoints","url":"docs/operations_endpoints#get-operations-images","content":" GET /operations/{id}/images Gets a list of PNG images generated from the operation's properties. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/operations/{id}/images' Response# Copy [ { \"property\": \"elevation\", \"ramp\": { \"0%\": [200, 0, 0], \"35%\": [255, 40, 0], \"45%\": [255, 150, 0], \"55%\": [255, 240, 0], \"65%\": [ 0, 230, 0], \"75%\": [ 0, 190, 0], \"100%\": [ 0, 130, 0], \"nv\": [ 0, 0, 0, 0] }, \"url\": \"URL\", \"downloadUrl\": \"URL\" }, .... ] The property refers to the property extracted from operations' data to generate the image. In the example above, the image would represent the elevation. The ramp is the color ramp used to generate the image. The percentages correspond to the minimum (0%) and maximum (100%) values in the image. The listed values correspond to RGB values used. The nv refers to no value. It is used internally to make the image transparent on places without data. Currently, this ramp is the same in all images processed. We also generate an auxiliary xml with geographic information to handle this image on GIS environments. You just need to append the \".aux.xml\" string to the png url. "},{"title":"Get operation's images V2","type":1,"pageTitle":"Field Operations Endpoints","url":"docs/operations_endpoints#get-operations-images-v2","content":" GET /operations/{id}/imagesV2 Gets a list of PNG images generated from the operation's properties with improvements in the generation process. These images are based on the filteredGeojson. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/operations/{id}/imagesV2' Response# Copy [ { \"property\": \"string\", \"legend\": { \"ranges\": [ { \"colorCode\": \"#C80000\", \"max\": 20, \"min\": 0 }, { \"colorCode\": \"#FF2800\", \"max\": 50, \"min\": 20 }, { \"colorCode\": \"#FF9600\", \"max\": 100, \"min\": 50 }, { \"colorCode\": \"#FFF000\", \"max\": 250, \"min\": 100 }, { \"colorCode\": \"#00E600\", \"max\": 340, \"min\": 250 }, { \"colorCode\": \"#00BE00\", \"max\": 480, \"min\": 340 }, { \"colorCode\": \"#008200\", \"max\": 570, \"min\": 480 } ] }, \"extent\": { \"xmin\": 0, \"xmax\": 0, \"ymin\": 0, \"ymax\": 0 }, \"url\": \"URL\", \"downloadUrl\": \"URL\" } ] The property refers to the property extracted from operations' data to generate the image. The legend represents the values distributed in 7 classes, classified by the quantile and symbolized by the standard color ramp. The extent is the coordinates of the image, mainly used for plotting images in map applications. More information here. "},{"title":"Get operation's geotiff images","type":1,"pageTitle":"Field Operations Endpoints","url":"docs/operations_endpoints#get-operations-geotiff-images","content":" GET /operations/{id}/geotiffImages Gets a list of TIFF images generated from the operation's properties with improvements in the generation process. These images are based on the filteredGeojson. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/operations/{id}/geotiffImages' Response# Copy [ { \"property\": \"distance\", \"url\": \"URL\", \"downloadUrl\": \"URL\" }, { \"property\": \"wetVolumePerArea\", \"url\": \"URL\", \"downloadUrl\": \"URL\" }, { \"property\": \"dryMassPerArea\", \"url\": \"URL\", \"downloadUrl\": \"URL\" }, { \"property\": \"dryVolumePerArea\", \"url\": \"URL\", \"downloadUrl\": \"URL\" } ] "},{"title":"Get the operation's units","type":1,"pageTitle":"Field Operations Endpoints","url":"docs/operations_endpoints#get-the-operations-units","content":" GET /operations/{id}/units Gets the operations's properties and their units. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/operations/{id}/units' Response# Here's a link with sample responses for \"planted\", \"applied\", \"harvested\" and \"tillage\" operations. These properties vary depending on the operationType, but you can expect the same, standardized keys, across different providers. Units usually don't change for the same Leaf User, since the providers units configuration is based on their location. But keep in mind that it's best to always take the units into consideration, just to be sure. "},{"title":"Get the operation's machines","type":1,"pageTitle":"Field Operations Endpoints","url":"docs/operations_endpoints#get-the-operations-machines","content":" GET /operations/{id}/machines Gets the machines used in the given operation. The IDs returned can be used to fetch more information about the machine in the Get a machine endpoint. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/operations/{id}/machines' Response# Copy { \"machines\": [ \"77385069-7666-4867-8d72-72c2584e2b4e\", \"baad537c-69e3-4d86-a99b-92d5b716b574\" ] } "},{"title":"Get the operation's implements","type":1,"pageTitle":"Field Operations Endpoints","url":"docs/operations_endpoints#get-the-operations-implements","content":" GET /operations/{id}/implements Gets the implements used in the given operation. The IDs returned can be used to fetch more information about the implement in the Get an implement endpoint. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/operations/{id}/implements' Response# Copy { \"implements\": [ \"1190bc0d-e94c-407a-8aba-ac4c6a1cd29b\" ] } "},{"title":"Get the operation's operators","type":1,"pageTitle":"Field Operations Endpoints","url":"docs/operations_endpoints#get-the-operations-operators","content":" GET /operations/{id}/operators Gets the operators that performed the given operation. The IDs returned can be used to fetch more information about the operator in the Get an operator endpoint. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/operations/{id}/operators' Response# Copy { \"operators\": [ \"f2f4723a-2bfe-472b-b6f7-7874c8500208\" ] } "},{"title":"Get the operation's sessions","type":1,"pageTitle":"Field Operations Endpoints","url":"docs/operations_endpoints#get-the-operations-sessions","content":" GET /operations/{id}/sessions Get compiled machine, implement and operator data for a management view with total area covered and working hours. Important It requires the enableOperationsSession configuration enabled to create this data. Currently, this information is only available for John Deere operations. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/operations/{id}/sessions' Response# Copy [ { \"machineId\": \"uuid\", \"serialNumber\": \"SERIALNUMBER001\", \"sessions\": [ { \"id\": \"sessionId\", \"startTime\": \"2023-11-29T11:03:42.000Z\", \"endTime\": \"2023-11-29T20:58:36.000Z\", \"operator\": { \"id\": \"operatorId\", \"name\": \"SIDINEY BATISTA\" }, \"area\": { \"value\": 18.215, \"unit\": \"ha\" } } ] }, { \"machineId\": \"uuid\", \"serialNumber\": \"SERIALNUMBER002\", \"sessions\": [ { \"id\": \"sessionId\", \"startTime\": \"2010-10-10T10:10:10.000000000Z\", \"endTime\": \"2010-10-10T10:10:10.000000000Z\", \"operator\": { \"id\": \"uuid\", \"name\": \"Operator A\" }, \"area\": { \"value\": 26.019, \"unit\": \"ha\" } } ] }, { \"machineId\": \"machineId\", \"serialNumber\": \"1RW9640DKNA075787\", \"sessions\": [ { \"id\": \"sessionId\", \"startTime\": \"2010-10-10T10:10:10.000000000Z\", \"endTime\": \"2010-10-10T10:10:10.000000000Z\", \"operator\": { \"id\": \"uuid\", \"name\": \"Operator A\" }, \"implement\": { \"id\": \"uuid\", \"name\": \"Implement 1\" }, \"area\": { \"value\": 39.410, \"unit\": \"ha\" } } ] } ] "},{"title":"Crop operation by field","type":1,"pageTitle":"Field Operations Endpoints","url":"docs/operations_endpoints#crop-operation-by-field","content":" POST /operations/cropOperationByField This endpoint can be used to remove points from the operation standardGeojson that are outside of the field geometry. Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"id\": \"operationId\"}' \\ 'https://api.withleaf.io/services/operations/api/operations/cropOperationByField' Response# Copy { \"id\": \"1162a1c6-9872-4d7f-9833-5d48add8eed4\", \"message\": \"Sent operation to be processed.\", \"leafFileId\": \"33020f03-5889-4c0f-b465-7a7e2c03a91d\" } You could monitor the processing status using the leafFileId by our Alerts Service. "},{"title":"Get files from an operation","type":1,"pageTitle":"Field Operations Endpoints","url":"docs/operations_endpoints#get-files-from-an-operation","content":" GET /operations/{id}/files Allow the user to fetch all files resources that were aggregated to generate an Field Operation. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/operations/{id}/files' Response# Check our sample response to have complete represention on the expected output. "},{"title":"Reprocess an operation","type":1,"pageTitle":"Field Operations Endpoints","url":"docs/operations_endpoints#reprocess-an-operation","content":" POST /operations/{id}/reprocess Allows reprocessing an operation already created, starting from the merge step. The standardGeoJSON, filteredGeoJSON, summary and images will be updated. Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/operations/{id}/reprocess' You could monitor the processing status by our Alerts Service. "},{"title":"Alerts","type":1,"pageTitle":"Field Operations Endpoints","url":"docs/operations_endpoints#alerts","content":"With Alerts you can be notified when something happens or changes instead of needing to repeatedly query for changes. Leaf Alerts support events that happen within Leaf and events that happen within supported 3rd party software. "},{"title":"List of Operations Events","type":1,"pageTitle":"Field Operations Endpoints","url":"docs/operations_endpoints#list-of-operations-events","content":"Leaf Operations Service can Alert you on these events: list of Operations Events "},{"title":"Planet Overview","type":0,"sectionRef":"#","url":"docs/planet_overview","content":"Documentation update! We are updating our documentation and this page was moved to here.","keywords":""},{"title":"Provider Organizations","type":0,"sectionRef":"#","url":"docs/provider_organizations","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Provider Organizations","url":"docs/provider_organizations#about","content":"The endpoints described here are divided into two categories. The Organizations List provides tools for listing organizations that have or have not granted access to Leaf. The Organization Sync offers tools for managing organizations to be processed, which in turn impacts associated resources such as field boundaries, operations, and assets. All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/usermanagement/api See below the REST resources and their endpoints available in this service. Endpoints Description\tEndpointsGet Provider Organizations\tGET /users/{leafUserId}/organizations/{provider} Get All Provider Organizations\tGET /users/{leafUserId}/{provider}/organizations Get a Provider Organization\tGET /users/{leafUserId}/{provider}/organizations/{provider_org_id} Update a Provider Organization Status\tPATCH /users/{leafUserId}/{provider}/organizations/{provider_org_id} Sync Provider Organizations\tPOST /users/{leafUserId}/{provider}/organizations/sync "},{"title":"Organizations List","type":1,"pageTitle":"Provider Organizations","url":"docs/provider_organizations#organizations-list","content":""},{"title":"Get Provider Organizations","type":1,"pageTitle":"Provider Organizations","url":"docs/provider_organizations#get-provider-organizations","content":" GET /users/{leafUserId}/organizations/{provider}  Get provider connected and disconnected organizations from Leaf User.  provider: can be JohnDeere or Trimble. info At Trimble it is not possible to differentiate which organizations are connected or not. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/organizations/{provider}' Response# Copy { \"connectedOrganizations\": [ { \"id\": \"organization_id_1\", \"name\": \"Organization Name 1\", \"managementUri\": \"https://connections.deere.com/connections/clientKey/connections-dialog?orgId=organization_id_1\" } ], \"notConnectedOrganizations\": [ { \"id\": \"organization_id_2\", \"name\": \"Organization Name 2\", \"managementUri\": \"https://connections.deere.com/connections/clientKey/connections-dialog?orgId=organization_id_2\" } ] } "},{"title":"Organizations Sync","type":1,"pageTitle":"Provider Organizations","url":"docs/provider_organizations#organizations-sync","content":"info The provider property value can be only be JohnDeere "},{"title":"Resource","type":1,"pageTitle":"Provider Organizations","url":"docs/provider_organizations#resource","content":"The properties available for a Provider Organization are. Copy { \"providerOrgId\": \"520674381\", \"providerOrgName\": \"Leaf Farms\", \"status\": \"SELECTED\", \"managementUri\": \"https://connections.deere.com/connections/clientKey/connections-dialog?orgId=Leaf Farms\" } The providerOrgId property references the organization ID value from the provider. For example, if the John Deere organization ID is 12345, then the providerOrgId should be 12345.The providerOrgName property references the value of the organization name from the provider.The managementUri property references the connection between your John Deere Application and the Provider Organization. If the URL alias contains the connections-dialog property then the connection is establshied with your JD Application, these Organizations can be updated between SELECTED and PREVIEW, if the management URL contains the select-organizations property then your setup with the JD Application is not complete.The status property represents the current state of the resource. The state of the resource can be either PREVIEW, SELECTED, or BLOCKED. If the status property has the value SELECTED, all available resources will be fetched from the provider and processed.If the status property has the value PREVIEW, no resources beyond the organization itself will be processed.If the status property has the value BLOCKED, the organization does not have the required permissions or does not have the connection, which can be checked with the managementUri to be processed by Leaf. To troubleshoot this issue please review Step 3 of the John Deere Authentication Guide, once the setup is complete, the resource will be available with the PREVIEW status. For any additional troubleshooting options, please reach out to help@withleaf.io "},{"title":"Get All Provider Organizations","type":1,"pageTitle":"Provider Organizations","url":"docs/provider_organizations#get-all-provider-organizations","content":" GET /users/{leafUserId}/{provider}/organizations  With this endpoint users can retrieve all organizations.  You can also pass some parameters used exclusively for paging through results. They are: page, an integer specifying the page being fetched (default is 0)size, an integer specifying the size of the page (default is 20, max is 100) Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/{provider}/organizations' Response# Copy [ { \"providerOrgId\": \"01011000\", \"providerOrgName\": \"Leaf Organization\", \"status\": \"SELECTED\", \"managementUri\": \"https://connections.deere.com/connections/clientKey/connections-dialog?orgId=Leaf Agriculture\" }, { \"providerOrgId\": \"123321\", \"providerOrgName\": \"Agriculture Organization\", \"status\": \"PREVIEW\", \"managementUri\": \"https://connections.deere.com/connections/clientKey/connections-dialog?orgId=Agriculture Organization\" }, { \"providerOrgId\": \"123321\", \"providerOrgName\": \"Agriculture Farm\", \"status\": \"BLOCKED\", \"managementUri\": \"https://connections.deere.com/connections/clientKey/select-organizations\" } ] "},{"title":"Get a Provider Organization","type":1,"pageTitle":"Provider Organizations","url":"docs/provider_organizations#get-a-provider-organization","content":" GET /users/{leafUserId}/{provider}/organizations  With this endpoint users can retrieve individual provider organizations.  Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/{provider}/organizations/{providerOrgId}' Response# Copy { \"providerOrgId\": \"123321\", \"providerOrgName\": \"Agriculture Organization\", \"status\": \"PREVIEW\", \"managementUri\": \"https://connections.deere.com/connections/clientKey/connections-dialog?orgId=Agriculture Organization\" } "},{"title":"Patch a Provider Organization","type":1,"pageTitle":"Provider Organizations","url":"docs/provider_organizations#patch-a-provider-organization","content":" PATCH /users/{leafUserId}/{provider}/organizations  With this endpoint, users can change the status of a provider organization. You can only change the status of a provider organization between SELECTED or PREVIEW. Also, as mentioned before, provider organizations with the BLOCKED status cannot be changed.  Request examples# cURLPythonJavaScript Copy curl -X PATCH \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/{provider}/organizations/{providerOrgId}/{status}' Response# Copy { \"providerOrgId\": \"123321\", \"providerOrgName\": \"Agriculture Organization\", \"status\": \"SELECTED\", \"managementUri\": \"https://connections.deere.com/connections/clientKey/connections-dialog?orgId=Agriculture Organization\" } "},{"title":"Sync Provider Organizations","type":1,"pageTitle":"Provider Organizations","url":"docs/provider_organizations#sync-provider-organizations","content":" POST users/{leafUserId}/{provider}/organizations/sync  With this endpoint, users can sync their organizations to reflect the current setup on the Provider Account into Leaf's resources.  Request examples# cURLPythonJavaScript Copy curl -X PATCH \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{leafUserId}/{provider}/organizations/sync' This endpoint could be used on the following scenarios: When updating the Organization Connection using the managementUri property from the Provider Organization. Provider Organizations should have the status changed from BLOCKED to PREVIEW if the cnnection setup is correct, after the /sync.If the user changes the organizationDataSync value from ALL to SELECTED_ONLY to the specfied Leaf User.In case of one or more missing Provider Organizations from the List, using the endpoint will trigger the process of fethcing the latest resources avaialble. "},{"title":"Field Operations sample responses","type":0,"sectionRef":"#","url":"docs/operations_sample_output","content":"","keywords":""},{"title":"Overview","type":1,"pageTitle":"Field Operations sample responses","url":"docs/operations_sample_output#overview","content":"This page shows and describes sample responses from Leaf API, along with a list of what properties you can expect for each type of data. "},{"title":"Field Operations","type":1,"pageTitle":"Field Operations sample responses","url":"docs/operations_sample_output#field-operations","content":"A Field Operation processed by Leaf's API returns a list of content that contains most of the basic info related to the authenticated user, and also the Field Boundaries and File Operations attached to each other by the background processing. Here's an example of a Field Operation Copy { \"id\": \"uuid\", \"apiOwnerUsername\": \"leaf@withleaf.io\", \"leafUserId\": \"uuid\", \"startTime\": \"yyyy-MM-ddTHH:mm:ss.SZ\", \"endTime\": \"yyyy-MM-ddTHH:mm:ss.SZ\", \"updatedTime\": \"yyyy-MM-ddTHH:mm:ss.SZ\", \"type\": \"string\", \"files\": [ \"uuid\" ], \"fields\": [ { \"id\": \"uuid\", \"coverage\": \"float\" } ], \"providers\": [ \"string\" ] } Field operations have many features that can be accessed via /featureName added to the base url, ranging from the standardized data to the operation units. Here's a sample response of each of these features. "},{"title":"Field Operations Standard GeoJSON","type":1,"pageTitle":"Field Operations sample responses","url":"docs/operations_sample_output#field-operations-standard-geojson","content":"Here's an example of a standard geojson from a Field Operation Copy { \"standardGeojson\": \"URL\" } "},{"title":"Field Operations Filtered GeoJSON","type":1,"pageTitle":"Field Operations sample responses","url":"docs/operations_sample_output#field-operations-filtered-geojson","content":"tip To use this option, the operationsFilteredGeojson configuration must be enabled. Here's an example of a filtered geojson from a Field Operation that can be access from the /operations/{id}/filteredGeojsonendpoint. Copy { \"filteredGeojson\": \"URL\" } The filtered GeoJSON is the file that went through the data cleaning process, removing the points with the following criteria: speed less than 0.5 m/s (for all operation types) The generated files will be used as a basis for generating new operations images. Outliers# To remove outliers in harvest data, you can use configurations to clean the filteredGeoJSON based on standard deviation.  All points with the harvested volume value far 3 standard deviation from the mean will be excluded. This is the default value and can be changed in the operationsOutliersLimit configuration. To disable the removal of outliers just use the operationsRemoveOutliers configuration. "},{"title":"Field Operations Summary","type":1,"pageTitle":"Field Operations sample responses","url":"docs/operations_sample_output#field-operations-summary","content":"Here's an example of a summary from a Field Operation. It's important to mention that the output displayed in the Field Operation Summary is heavily impacted by the operationType property. You can move through the four tabs below to see a sample of how Leaf returns each of the operation types. PlantedHarvestedAppliedTillage Copy { \"type\": \"Feature\", \"properties\": { \"totalDistance\": { \"value\": 21062.354662275786, \"unit\": \"ft\" }, \"speed\": { \"avg\": 3.441336296949484, \"min\": 0.006131406407803297, \"max\": 6.3555588722229, \"unit\": \"mi/hr\" }, \"startTime\": \"2016-09-19T18:30:51.640+00:00\", \"endTime\": \"2016-09-21T21:48:25.000+00:00\", \"totalArea\": { \"value\": 61820.13638528271, \"unit\": \"m2\" }, \"elevation\": { \"avg\": 59.13738317757009, \"min\": 58.9, \"max\": 59.6, \"unit\": \"ft\" }, \"crop\": [ \"soybeans\" ], \"operationType\": \"harvested\", \"wetMass\": { \"avg\": 17.492758207524563, \"min\": 0.01, \"max\": 29.59, \"unit\": \"lb\" }, \"totalWetMass\": { \"value\": 72997.28000000014, \"unit\": \"lb\" }, \"dryMass\": { \"avg\": 17.112920091943007, \"min\": 0.01, \"max\": 29.59, \"unit\": \"lb\" }, \"totalDryMass\": { \"value\": 71412.21554367829, \"unit\": \"lb\" }, \"wetMassPerArea\": { \"avg\": 4778.532184798924, \"min\": 3.2892456102410352, \"max\": 235466.19310582182, \"unit\": \"lb/ac\" }, \"dryMassPerArea\": { \"avg\": 4674.771037540907, \"min\": 3.2892456102410352, \"max\": 232434.9041830802, \"unit\": \"lb/ac\" }, \"wetVolume\": { \"avg\": 0.2915459701254094, \"min\": 0.00016666666666666666, \"max\": 0.49316666666666664, \"unit\": \"bu\" }, \"totalWetVolume\": { \"value\": 1216.6213333333362, \"unit\": \"bu\" }, \"dryVolume\": { \"avg\": 0.28521533486571676, \"min\": 0.00016666666666666666, \"max\": 0.49316666666666664, \"unit\": \"bu\" }, \"totalDryVolume\": { \"value\": 1190.2035923946364, \"unit\": \"bu\" }, \"wetVolumePerArea\": { \"avg\": 79.64220307998207, \"min\": 0.05482076017068392, \"max\": 3924.4365517636966, \"unit\": \"bu/ac\" }, \"dryVolumePerArea\": { \"avg\": 77.91285062568178, \"min\": 0.05482076017068392, \"max\": 3873.915069718003, \"unit\": \"bu/ac\" }, \"harvestMoisture\": { \"avg\": 14.221756530074288, \"min\": 1.36, \"max\": 21.05, \"unit\": \"percentage\" }, \"varieties\": [ { \"harvestMoisture\": { \"avg\": 14.221756530074288, \"min\": 1.36, \"max\": 21.05, \"unit\": \"percentage\" }, \"wetMass\": { \"value\": 72997.28000000014, \"unit\": \"lb\" }, \"wetMassPerArea\": { \"value\": 1.1808010183778619, \"unit\": \"lb/ac\" }, \"wetVolume\": { \"value\": 1216.6213333333362, \"unit\": \"bu\" }, \"area\": { \"value\": 61820.13638528271, \"unit\": \"m2\" }, \"dryVolume\": { \"value\": 1190.2035923946364, \"unit\": \"bu\" }, \"dryMassPerArea\": { \"value\": 1.1551610805031989, \"unit\": \"lb/ac\" }, \"dryMass\": { \"value\": 71412.21554367829, \"unit\": \"lb\" }, \"name\": \"Soybeans\" } ], \"originalOperationType\": \"Harvesting\", \"machinery\": [ { \"name\": \"Case IH Soybeans Head 35.000018900000015ft 8row\", \"type\": \"implement\", \"brand\": \"Case IH\" }, { \"name\": \"Case IH 8120\", \"type\": \"machine\", \"serialNumber\": \"8000001\", \"brand\": \"Case IH\" } ], \"originalOperationData\": { \"originalOperationFarm\": \"Farm Green\", \"originalOperationField\": \"Field A\", \"originalOperationGrower\": \"Grower\", \"originalOperationType\": \"CropOriginal\" } }, \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [[[ [-89.80434894561768,40.47791686563837], [-89.80756759643555,40.4757623387113], [-89.80746030807495,40.47302011353734], [-89.80475664138794,40.47070219301965], [-89.80080842971802,40.47068586935202], [-89.79797601699828,40.472709973879255], [-89.7978687286377,40.47569704893722], [-89.80117321014404,40.47808008455794], [-89.80434894561768,40.47791686563837] ]]] } } "},{"title":"Field Operations Images","type":1,"pageTitle":"Field Operations sample responses","url":"docs/operations_sample_output#field-operations-images","content":"Here is an example of Images from Field Operations. Copy [ { \"property\": \"string\", \"ramp\" : { \"0%\" : [ 200, 0, 0 ], \"35%\" : [ 255, 40, 0 ], \"45%\" : [ 255, 150, 0 ], \"55%\" : [ 255, 240, 0 ], \"65%\" : [ 0, 230, 0 ], \"75%\" : [ 0, 190, 0 ], \"100%\" : [ 0, 130, 0 ], \"nv\" : [ 0, 0, 0, 0 ] }, \"url\": \"URL\" } ] Field Operations Images V2# This endpoint version produces images based on the filteredGeoJSON, therefore it will be active whenever the data filter option is active. The new images have considerable improvements over the previous one. They are generated with a standard fixed color ramp and the data is automatically distributed into 7 classes using quantile classification. Note that the return is different from the previous version, with extent and legend attributes now available. Copy [ { \"property\": \"string\", \"legend\": { \"ranges\": [ { \"colorCode\": \"#C80000\", \"max\": 20, \"min\": 0 }, { \"colorCode\": \"#FF2800\", \"max\": 50, \"min\": 20 }, { \"colorCode\": \"#FF9600\", \"max\": 100, \"min\": 50 }, { \"colorCode\": \"#FFF000\", \"max\": 250, \"min\": 100 }, { \"colorCode\": \"#00E600\", \"max\": 340, \"min\": 250 }, { \"colorCode\": \"#00BE00\", \"max\": 480, \"min\": 340 }, { \"colorCode\": \"#008200\", \"max\": 570, \"min\": 480 } ] }, \"extent\": { \"xmin\": 0.0, \"xmax\": 0.0, \"ymin\": 0.0, \"ymax\": 0.0 }, \"url\": \"URL\" } ] If the filteredGeoJSON fails to process, images will continue to be generated from the standardGeoJSON. tip Important: once active, the images will be available for access only via the /imagesV2 endpoint. Field Operations GeoTIFF Images# This endpoint produces images based on the filteredGeoJSON. To access the images, besides having the data filter option active, it is required the operationsImageAsGeoTiff configuration enabled as well. In the result we displayed a list of the GeoTIFF images for each property available. Copy [ { \"property\": \"distance\", \"url\": \"https://s3-url-to-geotiff/geotiff-cca01ca7-75eb-4028-83ad-3a9af8a08667.tif\" }, { \"property\": \"dryMass\", \"url\": \"https://s3-url-to-geotiff/geotiff-f1604ea5-ee0a-44a1-ac11-03a0c275cecb.tif\" }, { \"property\": \"elevation\", \"url\": \"https://s3-url-to-geotiff/geotiff-45efa9d2-9f60-4704-ae91-d7edd72388bd.tif\" }, { \"property\": \"heading\", \"url\": \"https://s3-url-to-geotiff/geotiff-08f2f811-55a6-4028-8197-3ca535f93b46.tif\" }, { \"property\": \"speed\", \"url\": \"https://s3-url-to-geotiff/geotiff-e52c9f2f-399b-4e03-9d81-0abbacdc51f7.tif\" }, { \"property\": \"wetMassPerArea\", \"url\": \"https://s3-url-to-geotiff/geotiff-184b7394-6f86-41c2-8742-fd27bfc82ffc.tif\" }, { \"property\": \"dryVolume\", \"url\": \"https://s3-url-to-geotiff/geotiff-8248c5e2-5853-4f64-8b7a-3c7f3a16cfe0.tif\" }, { \"property\": \"wetVolumePerArea\", \"url\": \"https://s3-url-to-geotiff/geotiff-27f721e8-7ba6-41ba-8acb-6d038c87d87d.tif\" }, { \"property\": \"harvestMoisture\", \"url\": \"https://s3-url-to-geotiff/geotiff-b00a39b1-4ac6-4ba6-a5bf-e5798d9f8393.tif\" }, { \"property\": \"dryMassPerArea\", \"url\": \"https://s3-url-to-geotiff/geotiff-5d027967-6488-4339-a4b6-1e2f8b25e05f.tif\" }, { \"property\": \"fuelRate\", \"url\": \"https://s3-url-to-geotiff/geotiff-18f8f9e9-3e43-4074-a3d4-70098db365c9.tif\" }, { \"property\": \"equipmentWidth\", \"url\": \"https://s3-url-to-geotiff/geotiff-d49900a3-ceaf-4c6f-8348-7f9977f2751d.tif\" }, { \"property\": \"area\", \"url\": \"https://s3-url-to-geotiff/geotiff-1f81a342-eb2b-4623-b580-53d5296888aa.tif\" }, { \"property\": \"wetMass\", \"url\": \"https://s3-url-to-geotiff/geotiff-3332529c-01d3-4c13-ac12-10341bcc3ade.tif\" }, { \"property\": \"dryVolumePerArea\", \"url\": \"https://s3-url-to-geotiff/geotiff-aaf2f4ab-a0e0-4280-96a3-7df443779af8.tif\" }, { \"property\": \"wetVolume\", \"url\": \"https://s3-url-to-geotiff/geotiff-69570599-76f1-49ab-b3cc-9926705da2c9.tif\" } ] "},{"title":"Field Operations Units","type":1,"pageTitle":"Field Operations sample responses","url":"docs/operations_sample_output#field-operations-units","content":"Here is an example of Units from the numerical properties of the Field Operations. PlantedHarvestedAppliedTillage Copy { \"elevation\": \"ft\", \"area\": \"m2\", \"harvestMoisture\": \"percentage\", \"dryVolumePerArea\": \"bu/ac\", \"distance\": \"ft\", \"heading\": \"arcdeg\", \"dryVolume\": \"bu\", \"wetVolume\": \"bu\", \"wetVolumePerArea\": \"bu/ac\", \"dryMassPerArea\": \"lb/ac\", \"wetMassPerArea\": \"lb/ac\", \"speed\": \"mi/hr\", \"equipmentWidth\": \"ft\", \"dryMass\": \"lb\", \"wetMass\": \"lb\" } "},{"title":"Provider Authentication Overview","type":0,"sectionRef":"#","url":"docs/provider-authentication-overview","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Provider Authentication Overview","url":"docs/provider-authentication-overview#about","content":"By the end of this section, the objective is to successfully authenticate your application and link provider credentials to Leaf, enabling you to start integrating standardized data from major agricultural providers. Ultimately you'll want your customers to be able to integrate their (user-permissioned) data from their providers into your application. So in order to set this up at the user level, you'll need to attach the user token from the provider to the Leaf User. TIP: Once you get to the stage of building the user authentication UI for your customers integrating their providers, we recommend using our pre-built Leaf Link widget. "},{"title":"Provider authentication process with Leaf","type":1,"pageTitle":"Provider Authentication Overview","url":"docs/provider-authentication-overview#provider-authentication-process-with-leaf","content":"Each data provider's authentication flow is slightly different. Please refer to the tutorials below for the steps: AgLeader authentication with LeafClimate Fieldview authentication with LeafCNHi authentication with LeafJohn Deere authentication with LeafRaven Slingshot authentication with LeafStara authentication with LeafTrimble authentication with LeafIntegrating Sentera layers and imageryFor more crop monitoring or weather providers, head to the relevant documentation sections. If you still don't see your provider, contact us at help@withleaf.io for more information.  This authentication flow has to be done only once in most cases. Leaf will manage the tokens and refresh them when needed. "},{"title":"Provider environments","type":1,"pageTitle":"Provider Authentication Overview","url":"docs/provider-authentication-overview#provider-environments","content":"Some providers utilize distinct environments, which Leaf categorizes as STAGE (also known as Sandbox or Test) and PRODUCTION. It's crucial to align the clientEnvironment setting in your Leaf credentials request with your application's status and the type of provider accounts you intend to use: STAGE: Use this environment for development and testing. It typically requires corresponding test accounts from the provider. Real customer accounts usually won't work in this environment. Leaf often defaults to this environment.PRODUCTION: Use this environment only when your application has received production access approval from the provider. This environment works with real customer accounts, but test/sandbox accounts often won't function here. Ensure your application has the necessary permissions from the provider for the environment you select (especially for Production). Mismatched environments or permissions will likely result in non-functional credentials. Refer to specific provider documentation (like John Deere's or CNHI's) for details on their environment requirements and approval processes. "},{"title":"Provider scopes","type":1,"pageTitle":"Provider Authentication Overview","url":"docs/provider-authentication-overview#provider-scopes","content":"Some providers like John Deere and Climate FieldView keep their resources under specific permissions, which means the user needs to grant access during the authentication process mentioned before. The allowed permissions are grouped in Leaf products as described below: Scope\tDescriptionFIELDS:READ\tRequests permission to access the field boundaries entities from the provider FIELDS:WRITE\tRequests permission to create field boundary entities in the provider OPERATIONS:READ\tRequests permission to fetch and download operation data and files from the provider PRESCRIPTION:READ\tRequests permission to fetch and download prescription data and files from the provider PRESCRIPTION:WRITE\tRequests permission to upload prescription files to the provider ASSETS:READ\tRequests permission to get asset information like machines, implements, and operators from the provider PRODUCTS:READ\tRequests permission to get products and varieties information from the provider, like fertilizers, and chemicals ZONES:READ\tRequests permission to get zone information from the provider The scopes can be used in the Leaf authentication URL helper or in the application key information from Leaf Link. "},{"title":"Provider credentials endpoints","type":1,"pageTitle":"Provider Authentication Overview","url":"docs/provider-authentication-overview#provider-credentials-endpoints","content":"For more details about provider credentials endpoints, see below for: AgLeaderAgVanceClimate FielviewCNHiJohn DeereLindsayRavenRaven SlingshotSenteraStaraTrimbleValley Also, we recommend use our Providers Integrations Resources endpoint to debrief the ingested resources from the authenticated account. With the Providers Integrations Resources, you can access all the relevant information between the authentication and the processing of your resources ingested into Leaf's API. The resource summary gives you more visibility on what and how many resources are being processed. Integrations Resources Need more guidance? Contact us at help@withleaf.io. "},{"title":"Release notes","type":0,"sectionRef":"#","url":"docs/release_notes","content":"We moved to monthly release notes, you’ll find them in our blog’s ‘What’s New’ section here. If you'd like to stay up to date with news from Leaf, make sure to follow us on social media!","keywords":""},{"title":"Quickstart","type":0,"sectionRef":"#","url":"docs/quickstart","content":"","keywords":""},{"title":"Leaf Quickstart","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#leaf-quickstart","content":"This quickstart tutorial is written help you quickly experience and start building with Leaf. First, please contact your CSM to receive your credentials. We've included sample data in your account so you can begin querying data via Leaf immediately. Leaf's Postman collection Below you'll find instructions using curl and python, and we've also built a Postman collection to accompany this tutorial. Please find it here: Leaf Postman collection "},{"title":"Authentication","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#authentication","content":"After creating and confirming your account, the first step is to authenticate with your email and password to retrieve a Leaf token. This token is what we'll use in subsequent steps to talk to the API. Be sure to keep a copy of this token for the remaining steps. cURLPythonJavaScript Copy curl -X POST \\ -H 'Content-Type: application/json' \\ -d '{ \"username\":\"username\", \"password\":\"password\", \"rememberMe\":\"true\" }' \\ 'https://api.withleaf.io/api/authenticate' note: Your Leaf Token lasts for 30 days with \"rememberMe\": \"true\" in the json. If you want it to last only 24h, feel free to set \"rememberMe\" to \"false\". After expiration, just make the same request to the same endpoint and you will get a new access token.  "},{"title":"Get sample Field with attached operations","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#get-sample-field-with-attached-operations","content":"Inside your account, we've created a sample LeafUser and populated it with data. Let's take a look at the fields endpoint to see the sample field: cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN' \\ 'https://api.withleaf.io/services/fields/api/fields' It returns a JSON object representing the Fields and you can see that there are operations ids attached. Next section will explain how to get the operations by those ids. "},{"title":"Get all sample operation files","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#get-all-sample-operation-files","content":"Next, let's look at operations data. 'Operations' refers to the data collected when a machine and any implements performed an operation on a farm. This command will list operations files available across your whole account: cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files' "},{"title":"Get specific sample operation file","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#get-specific-sample-operation-file","content":"Now that you have a file ID, you can query for the operations data itself and a summary as well. cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files/{id}' "},{"title":"Get sample operation file summary","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#get-sample-operation-file-summary","content":"cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files/{id}/summary' "},{"title":"Get sample operation file image","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#get-sample-operation-file-image","content":"You may have already noticed that we're seeing a lot of operations files for this one field and the timestamps span just a few days. This is because we're looking at multiple files output from a machine that effectively represent one large operation - a harvest. Before we talk about merging these pieces into a single operation, let's look at an image from one of the pieces: cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files/{id}/images' "},{"title":"Get sample merged operation file","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#get-sample-merged-operation-file","content":"A single strip appears in that image which is no mistake. It's also not as useful as seeing the whole operation across the whole field! To solve this, we allow you to request a merge of operations data and produce images for data of the same type and timeframe. The sample data already includes a merged file. Let's take a look at that merged harvesting image which is colored to indicate the range of wet mass collected. First, let's find the merged file by simply adding a parameter to filter to origin=merged cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files?origin=merged' And finally, use that file ID to retrieve a list of images, one for each operation property. From this response, you can load one of the sample images: cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN' \\ 'https://api.withleaf.io/services/operations/api/files/{id}/images' "},{"title":"Get sample satellite imagery","type":1,"pageTitle":"Quickstart","url":"docs/quickstart#get-sample-satellite-imagery","content":"Finally, let's take a look at some satellite imagery. Using data from Sentinel-2, we produce NDVI images for fields you define to be monitored. First we'll list the fields being monitored from the satellite service: cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN' \\ 'https://api.withleaf.io/services/satellite/api/fields/' And then we can pull up the sample NDVI image of the sample field like this: cURLPython Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_LEAF_TOKEN' \\ 'https://api.withleaf.io/services/satellite/api/fields/{field_id}/processes' "},{"title":"Endpoints","type":0,"sectionRef":"#","url":"docs/satellite_endpoints","content":"Documentation update! We are updating our documentation and this page was moved to here.","keywords":""},{"title":"Overview","type":0,"sectionRef":"#","url":"docs/satellite_overview","content":"Documentation update! We are updating our documentation and this page was moved to here.","keywords":""},{"title":"Sentinel Overview","type":0,"sectionRef":"#","url":"docs/sentinel_overview","content":"Documentation update! We are updating our documentation and this page was moved to here.","keywords":""},{"title":"Leaf Connect","type":0,"sectionRef":"#","url":"docs/sharedata","content":"Documentation update! We are updating our documentation and this page was moved to here.","keywords":""},{"title":"General Setup Information","type":0,"sectionRef":"#","url":"docs/setup_information","content":"","keywords":""},{"title":"Pagination","type":1,"pageTitle":"General Setup Information","url":"docs/setup_information#pagination","content":"All endpoints that return a list of resources are paginated. You can select the size of the page and which page to get by using the query parameters size and page. size - Defines the size of the page. Defaults to 20. Max size is 100.page - Defines which page to fetch, considering each page has size elements. The first page is page 0. Defaults to 0. The X-Total-Count header in the response indicate the total existent items, and the Link header can provide the link for the first, next and last pages available: Copy <api/fields?page=1&size=20>;rel=\"next\", <api/fields?page=398&size=20>;rel=\"last\", <api/fields?page=0&size=20>;rel=\"first\" "},{"title":"Date format","type":1,"pageTitle":"General Setup Information","url":"docs/setup_information#date-format","content":"All the dates follow ISO 8601 format. Specifically, all the dates should be in the format \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\". "},{"title":"File archiving","type":1,"pageTitle":"General Setup Information","url":"docs/setup_information#file-archiving","content":"By default, our API archives files to slower storage after 180 days of no access. The file will only be available again upon a support request. "},{"title":"Error codes","type":1,"pageTitle":"General Setup Information","url":"docs/setup_information#error-codes","content":"Service\tEndpoint\tMessage\tHTTP Status\tReasonField Operations\tUpload a file\tBad Request\t400\tThe uploaded file is bigger than 3 GB  "},{"title":"Downloading files from Leaf","type":1,"pageTitle":"General Setup Information","url":"docs/setup_information#downloading-files-from-leaf","content":"To provide greater security all files provided by Leaf must be accessed using your Leaf token. info Unauthenticated or direct to S3 download links will be deprecated on December 1st, 2024. We strongly recommended that you use the authenticated download links which can be identified with the prefix download- and which point to api.withleaf.io. "},{"title":"Authentication sample","type":1,"pageTitle":"General Setup Information","url":"docs/setup_information#authentication-sample","content":"cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'downloadUrl' "},{"title":"Leaf User Overview","type":0,"sectionRef":"#","url":"docs/user_management_overview","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Leaf User Overview","url":"docs/user_management_overview#about","content":"For Leaf to be able to access, process and return standardized files from providers, you first need to create a ‘Leaf User’, which you’ll later connect to your customers’ preferred data provider(s). "},{"title":"What is a Leaf user?","type":1,"pageTitle":"Leaf User Overview","url":"docs/user_management_overview#what-is-a-leaf-user","content":"A Leaf User provides a way to keep your customers' data organized under your API owner. You'll attach 3rd party credentials to these entities.A Leaf User is equivalent to a customer/grower account. The same Leaf User/grower can integrate with multiple providers via a user-authentication process for each provider.   "},{"title":"Where to next?","type":1,"pageTitle":"Leaf User Overview","url":"docs/user_management_overview#where-to-next","content":""},{"title":"If integrating a provider via Leaf’s API","type":1,"pageTitle":"Leaf User Overview","url":"docs/user_management_overview#if-integrating-a-provider-via-leafs-api","content":"Once you’ve created a Leaf User (after setting up configurations and alerts), proceed to provider authentication. There we will show you how to integrate a provider and attach the provider credentials to your Leaf User so you can start receiving standardized data via Leaf. "},{"title":"If implementing manual file upload","type":1,"pageTitle":"Leaf User Overview","url":"docs/user_management_overview#if-implementing-manual-file-upload","content":"If you’re looking to implement manual file upload functionality for thumb drive data, click here next. Need more guidance? Contact us at help@withleaf.io. "},{"title":"Leaf User Endpoints","type":0,"sectionRef":"#","url":"docs/user_management_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Leaf User Endpoints","url":"docs/user_management_endpoints#about","content":"To briefly recap the Leaf User overview: a Leaf User is equivalent to the end user of your application (e.g. a grower). A Leaf User provides a way to keep your customers' data organized under your API owner. As a developer, you’ll need to create a Leaf User and connect the provider(s) you wish to integrate your platform with. All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/usermanagement/api See below the REST resources and their endpoints available in this service. Leaf Users Resources# Form of a Leaf User resource: Copy { \"id\": \"UUID\", \"name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\", \"externalId\": \"str\", \"trimbleCredentials\": {\"Object\"}, \"cnhiCredentials\": {\"Object\"}, \"johnDeereCredentials\": {\"Object\"}, \"ravenCredentials\": {\"Object\"}, \"climateFieldViewCredentials\": {\"Object\"}, \"staraCredentials\": {\"Object\"}, \"agLeaderCredentials\": {\"Object\"}, \"ravenSlingshotCredentials\": {\"Object\"}, \"lindsayCredentials\": {\"Object\"}, \"valleyCredentials\": {\"Object\"} } Check the providers credentials endpoints for more details about the credentials object. The following endpoints are available: Description\tEndpointsGet all Leaf Users\tGET /users/ Get a Leaf User\tGET /users/{id} Create a Leaf User\tPOST /users Update a Leaf User\tPUT /users Delete a Leaf User\tDELETE /users/{id} "},{"title":"User Endpoints","type":1,"pageTitle":"Leaf User Endpoints","url":"docs/user_management_endpoints#user-endpoints","content":""},{"title":"Get all Leaf Users","type":1,"pageTitle":"Leaf User Endpoints","url":"docs/user_management_endpoints#get-all-leaf-users","content":" GET /users Get all Leaf Users. Gets a paged list of Leaf Users that belong to the current logged in user. It is possible to filter the results by passing some query parameters. They are listed below. Parameter (to filter by)\tValuesemail\temail of one of your users name\tname of one of your users externalId\tthe externalId of one of your users You can also pass parameters to page through results: page, an integer specifying the page being fetched (default is 0)size, an integer specifying the size of the page (max is 100) Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users' Response# Copy [ { \"id\": \"UUID\", \"name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\", \"externalId\": \"str\", \"trimbleCredentials\": {\"Object\"}, \"cnhiCredentials\": {\"Object\"}, \"johnDeereCredentials\": {\"Object\"}, \"ravenCredentials\": {\"Object\"}, \"climateFieldViewCredentials\": {\"Object\"}, \"staraCredentials\": {\"Object\"}, \"agLeaderCredentials\": {\"Object\"}, \"ravenSlingshotCredentials\": {\"Object\"} }, .... ] Check the providers credentials endpoints for more details about the credentials object. "},{"title":"Get a Leaf User","type":1,"pageTitle":"Leaf User Endpoints","url":"docs/user_management_endpoints#get-a-leaf-user","content":" GET /users/{id} Get a Leaf User by its id. This request looks up an individual Leaf User (such as a grower) and returns the details associated with their account, including provider credentials such as ID, created date and tokens. Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{id}' Response# Copy { \"id\": \"UUID\", \"name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\", \"externalId\": \"str\", \"trimbleCredentials\": {\"Object\"}, \"cnhiCredentials\": {\"Object\"}, \"johnDeereCredentials\": {\"Object\"}, \"ravenCredentials\": {\"Object\"}, \"climateFieldViewCredentials\": {\"Object\"}, \"staraCredentials\": {\"Object\"}, \"agLeaderCredentials\": {\"Object\"}, \"ravenSlingshotCredentials\": {\"Object\"} } "},{"title":"Create a Leaf User","type":1,"pageTitle":"Leaf User Endpoints","url":"docs/user_management_endpoints#create-a-leaf-user","content":" POST /users Creates a Leaf User. You will need to create a Leaf User when linking a provider for the first time. Request body# Copy { \"name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\" } The optional externalId property can be informed to identify the Leaf User with an existing user ID, facilitating matching between Leaf and the client application. Besides the four properties of the example above, once you have created credentials for a provider like John Deere, you can add an entry like the following. Specifying the ID of the credentials object previously created will link it to the Leaf User being created. This will enable you to start querying farm data from the provider. Check theproviders credentials endpoints for more details about the credentials object. Copy \"johnDeereCredentials\": { \"id\": \"UUID\" } Request examples# cURLPythonJavaScript Copy curl -X POST \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\"}' \\ 'https://api.withleaf.io/services/usermanagement/api/users' Response# Copy { \"id\": \"UUID\", \"name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\" } "},{"title":"Update a Leaf User","type":1,"pageTitle":"Leaf User Endpoints","url":"docs/user_management_endpoints#update-a-leaf-user","content":" PUT /users Edits an existing Leaf User by submitting a new one. Request body# Copy { \"id\": \"UUID\", \"name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\" } Note that if the existing resource has credentials and you don't include them in the body, the new Leaf User will have no credentials. Said that, for keeping the credentials or updating them, include in the JSON above an entry. Check the providers credentials endpoints for more details about the credentials object. Copy \"johnDeereCredentials\": { \"id\": \"UUID\" } Request examples# cURLPythonJavaScript Copy curl -X PUT \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ -d '{ \"id\": \"UUID\", name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\"}' \\ 'https://api.withleaf.io/services/usermanagement/api/users' Response# Copy { \"id\": \"UUID\", \"name\": \"str\", \"email\": \"help@withleaf.io\", \"phone\": \"str\", \"address\": \"str\" } "},{"title":"Delete a Leaf User","type":1,"pageTitle":"Leaf User Endpoints","url":"docs/user_management_endpoints#delete-a-leaf-user","content":" DELETE /users/{id} Deletes an existing Leaf User by id. Request examples# cURLPythonJavaScript Copy curl -X DELETE \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/usermanagement/api/users/{id}' "},{"title":"Providers credentials endpoints","type":1,"pageTitle":"Leaf User Endpoints","url":"docs/user_management_endpoints#providers-credentials-endpoints","content":"John DeereClimate FielviewTrimbleCNHiStaraRavenAgLeaderRaven SlingshotSenteraAgVance After connecting with a provider, a summary of the available resources can be accessed using the Integration resource endpoint. tip Please don't hesitate to contact us at help@withleaf.io to schedule a demo, ask a question, request sample data, or suggest a feature! "},{"title":"Weather Overview","type":0,"sectionRef":"#","url":"docs/weather_overview","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Weather Overview","url":"docs/weather_overview#about","content":"With Leaf Weather, you can access unified weather data at a field level. Below you’ll find more about what forecasted and historical weather variables are available and which data sources are supported through Leaf’s API. "},{"title":"Forecast","type":1,"pageTitle":"Weather Overview","url":"docs/weather_overview#forecast","content":"Leaf’s weather forecast service provides access to forecasted weather data for the past 5 days - up to 10 days in the future. The data can be fetched daily or hourly. "},{"title":"Properties","type":1,"pageTitle":"Weather Overview","url":"docs/weather_overview#properties","content":"Cloud coverDew-point (2 m)EvapotranspirationPrecipitationRainRelative Humidity (2 m)Short Wave RadiationLong Wave RadiationSnowfallSunriseSunsetTemperature (2 m)Soil Temperature (0 cm)Soil Moisture (0-1 cm; 1-3 cm; 3-9 cm; 9-27 cm; 27-81 cm)Wind Direction (10 m)Wind Gusts (10 m)Wind Speed (10 m) "},{"title":"Data sources","type":1,"pageTitle":"Weather Overview","url":"docs/weather_overview#data-sources","content":"Weather Model\tNational Weather Provider\tOrigin Country\tResolution\tForecast Length\tUpdate FrequencyICON\tDeutscher Wetterdienst (DWD)\tGermany\t2 - 11 km\t7.5 days\tEvery 3 hours GFS\tNOAA\tUnited States\t3 - 25 km\t16 days\tEvery hour Arpege & Arome\tMeteoFrance\tFrance\t1 - 40 km\t4 days\tEvery 6 hours IFS\tECMWF\tEuropean Union\t44 km\t7 days\tEvery 6 hours JMA\tJMA\tJapan\t5 - 55 km\t11 days\tEvery 3 hours GEM\tCanadian Weather Service\tCanada\t2.5 km\t10 days\tEvery 6 hours Warning The service uses an option to provide the best forecast for any given location worldwide, based on the models available. "},{"title":"Availability by Weather Model","type":1,"pageTitle":"Weather Overview","url":"docs/weather_overview#availability-by-weather-model","content":"ICONGFSArpege & AromeIFSJMAGEM Property\tUnit of measurement\tDescriptionmeanTemperature\tImperial: ºF; Metric: ºC\tMean daily air temperature at 2 meters above ground. minTemperature\tImperial: ºF; Metric: ºC\tMinimum daily air temperature at 2 meters above ground. maxTemperature\tImperial: ºF; Metric: ºC\tMaximum daily air temperature at 2 meters above ground. meanSoilTemperature\tImperial: ºF; Metric: ºC\tMean surface temperature (0 cm deep), which can be water or land. minSoilTemperature\tImperial: ºF; Metric: ºC\tMinimum surface temperature (0 cm deep), which can be water or land. maxSoilTemperature\tImperial: ºF; Metric: ºC\tMaximum surface temperature (0 cm deep), which can be water or land. soilMoisture\tm³/m³\tAverage soil water content as volumetric mixing ratio at 0-1, 1-3, 3-9, 9-27 and 27-81 cm depths. sunrise\tiso8601\tSunrise time. sunset\tiso8601\tSunset time. maxWindspeed\tImperial: mph, Metric: km/h\tMaximum wind speed on a day. maxWindgusts\tImperial: mph, Metric: km/h\tMaximum wind gusts on a day. windDirection\tº\tDominant wind direction. evapotranspiration\tImperial: inch, Metric: mm\tDaily sum of ET₀ Reference Evapotranspiration of a well watered grass field. rainSum\tImperial: inch, Metric: mm\tSum of daily rain. snowfallSum\tImperial: inch, Metric: cm\tSum of daily snowfall. precipitationSum\tImperial: inch, Metric: mm\tSum of daily precipitation (including rain, showers and snowfall). dewpoint\tImperial: ºF, Metric: ºC\tDew point temperature at 2 meters above ground. longwaveRadiation\tW/m²\tLongwave radiation refers to thermal or infrared radiation emitted by the Earth back into space. shortwaveRadiation\tW/m²\tShortwave radiation is often quantified as solar irradiation incident on the Earth's atmosphere or surface. cloudcover\t%\tTotal cloud cover as an area fraction. relativeHumidity\t%\tRelative humidity at 2 meters above ground. tip Sunrise and sunset variables are only available for daily forecast. Dew point, longwave radiation, shortwave radiation, cloud cover, soil moisture and relative humidity are only available for hourly forecast. The other variables have their corresponding values in both hourly and daily. "},{"title":"Historical Data","type":1,"pageTitle":"Weather Overview","url":"docs/weather_overview#historical-data","content":"Leaf's historical weather service provides access to data from 1940 onwards when available. The data can be fetched daily or hourly. Please note, historical weather data from less than 5 days ago is unavailable. If you’re wanting historical weather data within the last 5 days, you can use the forecast service to get this information. "},{"title":"Properties","type":1,"pageTitle":"Weather Overview","url":"docs/weather_overview#properties-1","content":"Cloud coverDew-point (2 m)EvapotranspirationPrecipitationRainRelative Humidity (2 m)Short Wave RadiationLong Wave RadiationSnowfallSunriseSunsetTemperature (2 m)Soil Temperature (0 - 7 cm)Soil Moisture (0-7 cm; 7-28 cm; 28-100 cm; 100-255 cm)Wind Direction (10 m)Wind Gusts (10 m)Wind Speed (10 m) "},{"title":"Data sources","type":1,"pageTitle":"Weather Overview","url":"docs/weather_overview#data-sources-1","content":"Reanalysis Model\tRegion\tSpatial Resolution\tTemporal Resolution\tData Availability\tUpdate FrequencyERA5\tGlobal\t0.25° (~25 km)\tHourly\t1940 to present\tDaily with 5 days delay ERA5-Land\tGlobal\t0.1° (~11 km)\tHourly\t1950 to present\tDaily with 5 days delay "},{"title":"Availability by Weather Model","type":1,"pageTitle":"Weather Overview","url":"docs/weather_overview#availability-by-weather-model-1","content":"ERA5ERA5-Land Property\tUnit of measurement\tDescriptionmeanTemperature\tImperial: ºF; Metric: ºC\tMean daily air temperature at 2 meters above ground. minTemperature\tImperial: ºF; Metric: ºC\tMinimum daily air temperature at 2 meters above ground. maxTemperature\tImperial: ºF; Metric: ºC\tMaximum daily air temperature at 2 meters above ground. meanSoilTemperature\tImperial: ºF; Metric: ºC\tMean surface temperature (0 cm deep), which can be water or land. minSoilTemperature\tImperial: ºF; Metric: ºC\tMinimum surface temperature (0 cm deep), which can be water or land. maxSoilTemperature\tImperial: ºF; Metric: ºC\tMaximum surface temperature (0 cm deep), which can be water or land. soilMoisture\tm³/m³\tAverage soil water content as volumetric mixing ratio at 0-7, 7-28, 28-100 and 100-255 cm depths. sunrise\tiso8601\tSunrise time. sunset\tiso8601\tSunset time. maxWindspeed\tImperial: mph, Metric: km/h\tMaximum wind speed on a day. maxWindgusts\tImperial: mph, Metric: km/h\tMaximum wind gusts on a day. windDirection\tº\tDominant wind direction. evapotranspiration\tImperial: inch, Metric: mm\tDaily sum of ET₀ Reference Evapotranspiration of a well watered grass field. rainSum\tImperial: inch, Metric: mm\tSum of daily rain. snowfallSum\tImperial: inch, Metric: cm\tSum of daily snowfall. precipitationSum\tImperial: inch, Metric: mm\tSum of daily precipitation (including rain, showers and snowfall). dewpoint\tImperial: ºF, Metric: ºC\tDew point temperature at 2 meters above ground. longwaveRadiation\tW/m²\tLongwave radiation refers to thermal or infrared radiation emitted by the Earth back into space. shortwaveRadiation\tW/m²\tShortwave radiation is often quantified as solar irradiation incident on the Earth's atmosphere or surface. cloudcover\t%\tTotal cloud cover as an area fraction. relativeHumidity\t%\tRelative humidity at 2 meters above ground. tip Sunrise and sunset variables are only available for daily forecast. Dew point, longwave radiation, shortwave radiation, cloud cover, soil moisture and relative humidity are only available for hourly historical. The other variables have their corresponding values in both hourly and daily. "},{"title":"Weather Endpoints","type":0,"sectionRef":"#","url":"docs/weather_endpoints","content":"","keywords":""},{"title":"About","type":1,"pageTitle":"Weather Endpoints","url":"docs/weather_endpoints#about","content":"Here we list all the available endpoints from Leaf's Weather API. For an easy way to call them, we recommend using Leaf's Postman collection. All HTTP methods should be prepended by this service's endpoint: Copy https://api.withleaf.io/services/weather/api This service has the following endpoints available: Description\tEndpointsGet Daily Forecast\tGET /users/{leafUserId}/weather/forecast/field/{fieldId}/daily Get Hourly Forecast\tGET /users/{leafUserId}/weather/forecast/field/{fieldId}/hourly Get Daily Forecast for lat/long\tGET /weather/forecast/daily/{lat},{lon} Get Hourly Forecast for lat/long\tGET /weather/forecast/hourly/{lat},{lon} Get Daily Historical\tGET /users/{leafUserId}/weather/historical/field/{fieldId}/daily Get Hourly Historical\tGET /users/{leafUserId}/weather/historical/field/{fieldId}/hourly Get Daily Historical for lat/long\tGET /weather/historical/daily/{lat},{lon} Get Hourly Historical for lat/long\tGET /weather/historical/hourly/{lat},{lon} Note Daily data endpoints are limited to a request of one year (366 days), so endTime - startTime <= 366. Hourly data endpoints are limited to an interval of 30 days per request, so endTime - startTime <= 30. "},{"title":"Endpoints","type":1,"pageTitle":"Weather Endpoints","url":"docs/weather_endpoints#endpoints","content":""},{"title":"Get Daily Forecast","type":1,"pageTitle":"Weather Endpoints","url":"docs/weather_endpoints#get-daily-forecast","content":" GET /users/{leafUserId}/weather/forecast/field/{fieldId}/daily Get daily forecasted weather data by leaf user and field. If dates are not set on the endpoint, the response will return forecast data for the next seven days by default. Parameter (to filter by)\tvaluesendTime\tLocal date. Returns operations until the endTime startTime\tLocal date. Returns operations from the startTime onward model\tWeather model data: icon, gfs, ifs, jma, gem or arpegeArome. The default is gfs units\tSystem of units: imperial or metric. The default is metric Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/weather/api/users/{leafUserId}/weather/forecast/field/{fieldId}/daily' Response# Copy { \"type\": \"Feature\", \"properties\": { \"maxTemperature\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 28.8 }, { \"time\": \"2023-07-22T00:00:00\", \"value\": 28.1 }, .... ], \"unit\": \"ºC\" }, \"meanSoilTemperature\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 25.3 }, { \"time\": \"2023-07-22T00:00:00\", \"value\": 25.1 }, .... ], \"unit\": \"°C\" }, \"minSoilTemperature\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 18.7 }, { \"time\": \"2023-07-22T00:00:00\", \"value\": 17.2 }, .... ], \"unit\": \"°C\" }, \"maxSoilTemperature\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 28.9 }, { \"time\": \"2023-07-22T00:00:00\", \"value\": 27.9 }, .... ], \"unit\": \"°C\" }, \"sunrise\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": \"2023-07-21T10:52\" }, { \"time\": \"2023-07-22T00:00:00\", \"value\": \"2023-07-22T10:53\" }, .... ], \"unit\": \"iso8601\" }, \"snowfallSum\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 0.0 }, { \"time\": \"2023-07-22T00:00:00\", \"value\": 0.0 }, .... ], \"unit\": \"cm\" }, \"precipitationSum\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 0.0 }, { \"time\": \"2023-07-22T00:00:00\", \"value\": 0.0 }, .... ], \"unit\": \"cm\" }, \"maxWindspeed\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 15.2 }, { \"time\": \"2023-07-22T00:00:00\", \"value\": 19.9 }, .... ], \"unit\": \"km/h\" }, \"evapotranspiration\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 3.76 }, { \"time\": \"2023-07-22T00:00:00\", \"value\": 4.93 }, .... ], \"unit\": \"mm\" }, \"processedTime\": \"2023-07-21T13:01:11.662397\", \"rainSum\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 0.0 }, { \"time\": \"2023-07-22T00:00:00\", \"value\": 0.0 }, .... ], \"unit\": \"mm\" }, \"maxWindgusts\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 27.0 }, { \"time\": \"2023-07-22T00:00:00\", \"value\": 24.1 }, .... ], \"unit\": \"km/h\" }, \"meanTemperature\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 25.0 }, { \"time\": \"2023-07-22T00:00:00\", \"value\": 23.6 }, .... ], \"unit\": \"ºC\" }, \"minTemperature\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 21.1 }, { \"time\": \"2023-07-22T00:00:00\", \"value\": 18.9 }, .... ], \"unit\": \"ºC\" }, \"sunset\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": \"2023-07-22T01:11\" }, { \"time\": \"2023-07-22T00:00:00\", \"value\": \"2023-07-23T01:10\" }, .... ], \"unit\": \"iso8601\" }, \"windDirection\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 350.0 }, { \"time\": \"2023-07-22T00:00:00\", \"value\": 332.0 }, .... ], \"unit\": \"°\" } }, \"geometry\": { \"type\": \"Point\", \"coordinates\": [ -89.64355775454169, 39.802794365611476 ] } } "},{"title":"Get Hourly Forecast","type":1,"pageTitle":"Weather Endpoints","url":"docs/weather_endpoints#get-hourly-forecast","content":" GET /users/{leafUserId}/weather/forecast/field/{fieldId}/hourly Get hourly forecasted weather data by Leaf User and field. If dates are not set on the endpoint, the response will return forecast data for the next seven days by default. Parameter (to filter by)\tvaluesendTime\tLocal date. Returns operations until the endTime startTime\tLocal date. Returns operations from the startTime onward model\tWeather model data: icon, gfs, ifs, jma, gem or arpegeArome. The default is gfs units\tSystem of units: imperial or metric. The default is metric Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/weather/api/users/{leafUserId}/weather/forecast/field/{fieldId}/hourly' Response# Copy { \"type\": \"Feature\", \"properties\": { \"rain\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 0.0 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 0.0 }, .... ], \"unit\": \"mm\" }, \"soilTemperature\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 28.2 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 27.9 }, .... ], \"unit\": \"°C\" }, \"soilMoisture 0-1\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 0.1 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 0.1 }, .... ], \"unit\": \"m³/m³\" }, \"soilMoisture 1-3\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 0.2 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 0.2 }, .... ], \"unit\": \"m³/m³\" }, \"soilMoisture 3-9\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 0.3 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 0.3 }, .... ], \"unit\": \"m³/m³\" }, \"soilMoisture 9-27\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 0.4 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 0.4 }, .... ], \"unit\": \"m³/m³\" }, \"soilMoisture 27-81\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 0.5 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 0.5 }, .... ], \"unit\": \"m³/m³\" }, \"longwaveRadiation\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 563.8 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 642.3 }, .... ], \"unit\": \"W/m²\" }, \"dewpoint\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 22.6 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 22.6 }, .... ], \"unit\": \"ºC\" }, \"windgusts\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 9.4 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 5.8 }, .... ], \"unit\": \"km/h\" }, \"snowfall\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 0.0 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 0.0 }, .... ], \"unit\": \"mm\" }, \"evapotranspiration\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 0.11 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 0.04 }, .... ], \"unit\": \"mm\" }, \"shortwaveRadiation\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 146.0 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 2.0 }, .... ], \"unit\": \"W/m²\" }, \"processedTime\": \"str\", \"cloudcover\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 51.0 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 100.0 }, .... ], \"unit\": \"%\" }, \"precipitation\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 0.0 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 0.0 }, .... ], \"unit\": \"mm\" }, \"relativeHumidity\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 75.0 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 80.0 }, .... ], \"unit\": \"%\" }, \"temperature\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 27.4 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 26.3 }, .... ], \"unit\": \"ºC\" }, \"windspeed\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 3.1 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 5.7 }, .... ], \"unit\": \"km/h\" }, \"windDirection\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 234.0 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 72.0 }, .... ], \"unit\": \"km/h\" } }, \"geometry\": { \"type\": \"Point\", \"coordinates\": [ -89.64355775454169, 39.802794365611476 ] } } "},{"title":"Get Daily Forecast for lat/lon","type":1,"pageTitle":"Weather Endpoints","url":"docs/weather_endpoints#get-daily-forecast-for-latlon","content":" GET /weather/forecast/daily/{lat},{lon} Get daily forecasted weather data for lat/lon by leaf user and field. If dates are not set on the endpoint, the response will return forecast data for the next seven days by default. Parameter (to filter by)\tvaluesendTime\tLocal date. Returns operations until the endTime startTime\tLocal date. Returns operations from the startTime onward model\tWeather model data: icon, gfs, ifs, jma, gem or arpegeArome. The default is gfs units\tSystem of units: imperial or metric. The default is metric Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/weather/api/weather/forecast/daily/{lat},{lon}' Response# Copy { \"type\": \"Feature\", \"properties\": { \"maxTemperature\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 28.8 }, { \"time\": \"2023-07-22T00:00:00\", \"value\": 28.1 }, .... ], \"unit\": \"ºC\" }, \"meanSoilTemperature\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 25.3 }, { \"time\": \"2023-07-22T00:00:00\", \"value\": 25.1 }, .... ], \"unit\": \"°C\" }, \"minSoilTemperature\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 18.7 }, { \"time\": \"2023-07-22T00:00:00\", \"value\": 17.2 }, .... ], \"unit\": \"°C\" }, \"maxSoilTemperature\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 28.9 }, { \"time\": \"2023-07-22T00:00:00\", \"value\": 27.9 }, .... ], \"unit\": \"°C\" }, \"sunrise\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": \"2023-07-21T10:52\" }, { \"time\": \"2023-07-22T00:00:00\", \"value\": \"2023-07-22T10:53\" }, .... ], \"unit\": \"iso8601\" }, \"snowfallSum\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 0.0 }, { \"time\": \"2023-07-22T00:00:00\", \"value\": 0.0 }, .... ], \"unit\": \"cm\" }, \"precipitationSum\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 0.0 }, { \"time\": \"2023-07-22T00:00:00\", \"value\": 0.0 }, .... ], \"unit\": \"cm\" }, \"maxWindspeed\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 15.2 }, { \"time\": \"2023-07-22T00:00:00\", \"value\": 19.9 }, .... ], \"unit\": \"km/h\" }, \"evapotranspiration\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 3.76 }, { \"time\": \"2023-07-22T00:00:00\", \"value\": 4.93 }, .... ], \"unit\": \"mm\" }, \"processedTime\": \"2023-07-21T13:01:11.662397\", \"rainSum\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 0.0 }, { \"time\": \"2023-07-22T00:00:00\", \"value\": 0.0 }, .... ], \"unit\": \"mm\" }, \"maxWindgusts\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 27.0 }, { \"time\": \"2023-07-22T00:00:00\", \"value\": 24.1 }, .... ], \"unit\": \"km/h\" }, \"meanTemperature\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 25.0 }, { \"time\": \"2023-07-22T00:00:00\", \"value\": 23.6 }, .... ], \"unit\": \"ºC\" }, \"minTemperature\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 21.1 }, { \"time\": \"2023-07-22T00:00:00\", \"value\": 18.9 }, .... ], \"unit\": \"ºC\" }, \"sunset\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": \"2023-07-22T01:11\" }, { \"time\": \"2023-07-22T00:00:00\", \"value\": \"2023-07-23T01:10\" }, .... ], \"unit\": \"iso8601\" }, \"windDirection\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 350.0 }, { \"time\": \"2023-07-22T00:00:00\", \"value\": 332.0 }, .... ], \"unit\": \"°\" } }, \"geometry\": { \"type\": \"Point\", \"coordinates\": [ -89.64355775454169, 39.802794365611476 ] } } "},{"title":"Get Hourly Forecast for lat/lon","type":1,"pageTitle":"Weather Endpoints","url":"docs/weather_endpoints#get-hourly-forecast-for-latlon","content":" GET /weather/forecast/hourly/{lat},{lon} Get hourly forecasted weather data for lat/lon by Leaf User and field. If dates are not set on the endpoint, the response will return forecast data for the next seven days by default. Parameter (to filter by)\tvaluesendTime\tLocal date. Returns operations until the endTime startTime\tLocal date. Returns operations from the startTime onward model\tWeather model data: icon, gfs, ifs, jma, gem or arpegeArome. The default is gfs units\tSystem of units: imperial or metric. The default is metric Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/weather/api/weather/forecast/hourly/{lat},{lon}' Response# Copy { \"type\": \"Feature\", \"properties\": { \"rain\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 0.0 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 0.0 }, .... ], \"unit\": \"mm\" }, \"soilTemperature\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 28.7 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 27.9 }, .... ], \"unit\": \"°C\" }, \"soilMoisture 0-1\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 0.1 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 0.1 }, .... ], \"unit\": \"m³/m³\" }, \"soilMoisture 1-3\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 0.2 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 0.2 }, .... ], \"unit\": \"m³/m³\" }, \"soilMoisture 3-9\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 0.3 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 0.3 }, .... ], \"unit\": \"m³/m³\" }, \"soilMoisture 9-27\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 0.4 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 0.4 }, .... ], \"unit\": \"m³/m³\" }, \"soilMoisture 27-81\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 0.5 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 0.5 }, .... ], \"unit\": \"m³/m³\" }, \"longwaveRadiation\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 563.8 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 642.3 }, .... ], \"unit\": \"W/m²\" }, \"dewpoint\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 22.6 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 22.6 }, .... ], \"unit\": \"ºC\" }, \"windgusts\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 9.4 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 5.8 }, .... ], \"unit\": \"km/h\" }, \"snowfall\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 0.0 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 0.0 }, .... ], \"unit\": \"mm\" }, \"evapotranspiration\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 0.11 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 0.04 }, .... ], \"unit\": \"mm\" }, \"shortwaveRadiation\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 146.0 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 2.0 }, .... ], \"unit\": \"W/m²\" }, \"processedTime\": \"str\", \"cloudcover\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 51.0 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 100.0 }, .... ], \"unit\": \"%\" }, \"precipitation\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 0.0 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 0.0 }, .... ], \"unit\": \"mm\" }, \"relativeHumidity\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 75.0 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 80.0 }, .... ], \"unit\": \"%\" }, \"temperature\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 27.4 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 26.3 }, .... ], \"unit\": \"ºC\" }, \"windspeed\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 3.1 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 5.7 }, .... ], \"unit\": \"km/h\" }, \"windDirection\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 234.0 }, { \"time\": \"2023-07-21T01:00:00\", \"value\": 72.0 }, .... ], \"unit\": \"km/h\" } }, \"geometry\": { \"type\": \"Point\", \"coordinates\": [ -89.64355775454169, 39.802794365611476 ] } } "},{"title":"Get Daily Historical","type":1,"pageTitle":"Weather Endpoints","url":"docs/weather_endpoints#get-daily-historical","content":" GET /users/{leafUserId}/weather/historical/field/{fieldId}/daily Get daily historical weather data by Leaf User and field. If the dates are not defined in the endpoint, the response will return data from the last seven days by default. Please note, historical weather data from less than 5 days ago is unavailable. If you’re wanting historical weather data within the last 5 days, you can use the forecast service to get this information. Parameter (to filter by)\tvaluesendTime\tLocal date. Returns operations until the endTime startTime\tLocal date. Returns operations from the startTime onward model\tHistorical model data: era5 or era5Land. The default is era5 units\tSystem of units: imperial or metric. The default is metric Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/weather/api/users/{leafUserId}/weather/historical/field/{fieldId}/daily' Response# Copy { \"type\": \"Feature\", \"properties\": { \"maxTemperature\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 31.9 }, { \"time\": \"2023-07-15T00:00:00\", \"value\": 32.0 }, .... ], \"unit\": \"ºC\" }, \"meanSoilTemperature\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 25.3 }, { \"time\": \"2023-07-22T00:00:00\", \"value\": 25.1 }, .... ], \"unit\": \"°C\" }, \"minSoilTemperature\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 18.7 }, { \"time\": \"2023-07-22T00:00:00\", \"value\": 17.2 }, .... ], \"unit\": \"°C\" }, \"maxSoilTemperature\": { \"values\": [ { \"time\": \"2023-07-21T00:00:00\", \"value\": 28.9 }, { \"time\": \"2023-07-22T00:00:00\", \"value\": 27.9 }, .... ], \"unit\": \"°C\" }, \"sunrise\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": \"2023-07-14T10:47\" }, { \"time\": \"2023-07-15T00:00:00\", \"value\": \"2023-07-15T10:48\" }, .... ], \"unit\": \"iso8601\" }, \"snowfallSum\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 0.0 }, { \"time\": \"2023-07-15T00:00:00\", \"value\": 0.0 }, .... ], \"unit\": \"cm\" }, \"precipitationSum\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 0.3 }, { \"time\": \"2023-07-15T00:00:00\", \"value\": 0.2 }, .... ], \"unit\": \"mm\" }, \"maxWindspeed\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 14.1 }, { \"time\": \"2023-07-15T00:00:00\", \"value\": 13.5 }, .... ], \"unit\": \"km/h\" }, \"evapotranspiration\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 4.51 }, { \"time\": \"2023-07-15T00:00:00\", \"value\": 3.62 }, .... ], \"unit\": \"mm\" }, \"processedTime\": \"2023-07-21T16:50:17.965109\", \"rainSum\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 0.3 }, { \"time\": \"2023-07-15T00:00:00\", \"value\": 0.2 }, .... ], \"unit\": \"mm\" }, \"maxWindgusts\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 26.3 }, { \"time\": \"2023-07-15T00:00:00\", \"value\": 25.8 }, .... ], \"unit\": \"km/h\" }, \"meanTemperature\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 28.1 }, { \"time\": \"2023-07-15T00:00:00\", \"value\": 26.8 }, .... ], \"unit\": \"ºC\" }, \"minTemperature\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 26.1 }, { \"time\": \"2023-07-15T00:00:00\", \"value\": 23.2 }, .... ], \"unit\": \"ºC\" }, \"sunset\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": \"2023-07-15T01:15\" }, { \"time\": \"2023-07-15T00:00:00\", \"value\": \"2023-07-16T01:14\" }, .... ], \"unit\": \"iso8601\" }, \"windDirection\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 206.0 }, { \"time\": \"2023-07-15T00:00:00\", \"value\": 209.0 }, .... ], \"unit\": \"°\" } }, \"geometry\": { \"type\": \"Point\", \"coordinates\": [ -89.64355775454169, 39.802794365611476 ] } } "},{"title":"Get Hourly Historical","type":1,"pageTitle":"Weather Endpoints","url":"docs/weather_endpoints#get-hourly-historical","content":" GET /users/{leafUserId}/weather/historical/field/{fieldId}/hourly Get hourly historical weather data by Leaf User and field. If the dates are not defined in the endpoint, the response will return data from the last seven days by default. Parameter (to filter by)\tvaluesendTime\tLocal date. Returns operations until the endTime startTime\tLocal date. Returns operations from the startTime onward model\tHistorical model data: era5 or era5Land. The default is era5 units\tSystem of units: imperial or metric. The default is metric Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/weather/api/users/{leafUserId}/weather/historical/field/{fieldId}/hourly' Response# Copy { \"type\": \"Feature\", \"properties\": { \"rain\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 0.0 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 0.0 }, .... ], \"unit\": \"mm\" }, \"soilMoisture 0-7\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 0.1 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 0.1 }, .... ], \"unit\": \"m³/m³\" }, \"soilMoisture 7-28\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 0.2 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 0.2 }, .... ], \"unit\": \"m³/m³\" }, \"soilMoisture 28-100\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 0.3 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 0.3 }, .... ], \"unit\": \"m³/m³\" }, \"soilMoisture 100-255\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 0.4 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 0.4 }, .... ], \"unit\": \"m³/m³\" }, \"longwaveRadiation\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 563.8 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 642.3 }, .... ], \"unit\": \"W/m²\" }, \"dewpoint\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 23.4 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 23.3 }, .... ], \"unit\": \"ºC\" }, \"windgusts\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 17.6 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 19.1 }, .... ], \"unit\": \"km/h\" }, \"snowfall\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 0.0 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 0.0 }, .... ], \"unit\": \"mm\" }, \"evapotranspiration\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 0.18 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 0.08 }, .... ], \"unit\": \"mm\" }, \"shortwaveRadiation\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 176.0 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 40.0 }, .... ], \"unit\": \"W/m²\" }, \"processedTime\": \"str\", \"cloudcover\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 9.0 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 5.0 }, .... ], \"unit\": \"%\" }, \"precipitation\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 0.0 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 0.0 }, .... ], \"unit\": \"mm\" }, \"soilTemperature\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 30.2 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 29.8 }, .... ], \"unit\": \"ºC\" }, \"relativeHumidity\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 61.0 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 62.0 }, .... ], \"unit\": \"%\" }, \"temperature\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 31.9 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 31.4 }, .... ], \"unit\": \"ºC\" }, \"windspeed\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 7.7 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 6.4 }, .... ], \"unit\": \"km/h\" }, \"windDirection\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 233.0 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 223.0 }, .... ], \"unit\": \"km/h\" } }, \"geometry\": { \"type\": \"Point\", \"coordinates\": [ -89.64355775454169, 39.802794365611476 ] } } "},{"title":"Get Daily Historical for lat/lon","type":1,"pageTitle":"Weather Endpoints","url":"docs/weather_endpoints#get-daily-historical-for-latlon","content":" GET /weather/historical/daily/{lat},{lon} Get daily historical weather data for lat/lon by Leaf User and field. If the dates are not defined in the endpoint, the response will return data from the last seven days by default. Please note, historical weather data from less than 5 days ago is unavailable. If you’re wanting historical weather data within the last 5 days, you can use the forecast service to get this information. Parameter (to filter by)\tvaluesendTime\tLocal date. Returns operations until the endTime startTime\tLocal date. Returns operations from the startTime onward model\tHistorical model data: era5 or era5Land. The default is era5 units\tSystem of units: imperial or metric. The default is metric Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/weather/api/weather/historical/daily/{lat},{lon}' Response# Copy { \"type\": \"Feature\", \"properties\": { \"maxTemperature\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 31.9 }, { \"time\": \"2023-07-15T00:00:00\", \"value\": 32.0 }, .... ], \"unit\": \"ºC\" }, \"meanSoilTemperature\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 25.3 }, { \"time\": \"2023-07-15T00:00:00\", \"value\": 25.1 }, .... ], \"unit\": \"°C\" }, \"minSoilTemperature\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 18.7 }, { \"time\": \"2023-07-15T00:00:00\", \"value\": 17.2 }, .... ], \"unit\": \"°C\" }, \"maxSoilTemperature\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 28.6 }, { \"time\": \"2023-07-15T00:00:00\", \"value\": 27.9 }, .... ], \"unit\": \"°C\" }, \"sunrise\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": \"2023-07-14T10:47\" }, { \"time\": \"2023-07-15T00:00:00\", \"value\": \"2023-07-15T10:48\" }, .... ], \"unit\": \"iso8601\" }, \"snowfallSum\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 0.0 }, { \"time\": \"2023-07-15T00:00:00\", \"value\": 0.0 }, .... ], \"unit\": \"cm\" }, \"precipitationSum\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 0.3 }, { \"time\": \"2023-07-15T00:00:00\", \"value\": 0.2 }, .... ], \"unit\": \"mm\" }, \"maxWindspeed\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 14.1 }, { \"time\": \"2023-07-15T00:00:00\", \"value\": 13.5 }, .... ], \"unit\": \"km/h\" }, \"evapotranspiration\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 4.51 }, { \"time\": \"2023-07-15T00:00:00\", \"value\": 3.62 }, .... ], \"unit\": \"mm\" }, \"processedTime\": \"2023-07-21T16:50:17.965109\", \"rainSum\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 0.3 }, { \"time\": \"2023-07-15T00:00:00\", \"value\": 0.2 }, .... ], \"unit\": \"mm\" }, \"maxWindgusts\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 26.3 }, { \"time\": \"2023-07-15T00:00:00\", \"value\": 25.8 }, .... ], \"unit\": \"km/h\" }, \"meanTemperature\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 28.1 }, { \"time\": \"2023-07-15T00:00:00\", \"value\": 26.8 }, .... ], \"unit\": \"ºC\" }, \"minTemperature\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 26.1 }, { \"time\": \"2023-07-15T00:00:00\", \"value\": 23.2 }, .... ], \"unit\": \"ºC\" }, \"sunset\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": \"2023-07-15T01:15\" }, { \"time\": \"2023-07-15T00:00:00\", \"value\": \"2023-07-16T01:14\" }, .... ], \"unit\": \"iso8601\" }, \"windDirection\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 206.0 }, { \"time\": \"2023-07-15T00:00:00\", \"value\": 209.0 }, .... ], \"unit\": \"°\" } }, \"geometry\": { \"type\": \"Point\", \"coordinates\": [ -89.64355775454169, 39.802794365611476 ] } } "},{"title":"Get Hourly Historical for lat/lon","type":1,"pageTitle":"Weather Endpoints","url":"docs/weather_endpoints#get-hourly-historical-for-latlon","content":" GET /weather/historical/hourly/{lat},{lon} Get hourly historical weather data for lat/lon by Leaf User and field. If the dates are not defined in the endpoint, the response will return data from the last seven days by default. Parameter (to filter by)\tvaluesendTime\tLocal date. Returns operations until the endTime startTime\tLocal date. Returns operations from the startTime onward model\tHistorical model data: era5 or era5Land. The default is era5 units\tSystem of units: imperial or metric. The default is metric Request examples# cURLPythonJavaScript Copy curl -X GET \\ -H 'Authorization: Bearer YOUR_TOKEN' \\ 'https://api.withleaf.io/services/weather/api/weather/historical/hourly/{lat},{lon}' Response# Copy { \"type\": \"Feature\", \"properties\": { \"rain\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 0.0 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 0.0 }, .... ], \"unit\": \"mm\" }, \"soilMoisture 0-7\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 0.1 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 0.1 }, .... ], \"unit\": \"m³/m³\" }, \"soilMoisture 7-28\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 0.2 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 0.2 }, .... ], \"unit\": \"m³/m³\" }, \"soilMoisture 28-100\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 0.3 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 0.3 }, .... ], \"unit\": \"m³/m³\" }, \"soilMoisture 100-255\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 0.4 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 0.4 }, .... ], \"unit\": \"m³/m³\" }, \"longwaveRadiation\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 563.8 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 642.3 }, .... ], \"unit\": \"W/m²\" }, \"dewpoint\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 23.4 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 23.3 }, .... ], \"unit\": \"ºC\" }, \"windgusts\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 17.6 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 19.1 }, .... ], \"unit\": \"km/h\" }, \"snowfall\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 0.0 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 0.0 }, .... ], \"unit\": \"mm\" }, \"evapotranspiration\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 0.18 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 0.08 }, .... ], \"unit\": \"mm\" }, \"shortwaveRadiation\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 176.0 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 40.0 }, .... ], \"unit\": \"W/m²\" }, \"processedTime\": \"str\", \"cloudcover\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 9.0 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 5.0 }, .... ], \"unit\": \"%\" }, \"precipitation\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 0.0 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 0.0 }, .... ], \"unit\": \"mm\" }, \"soilTemperature\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 30.2 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 29.8 }, .... ], \"unit\": \"ºC\" }, \"relativeHumidity\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 61.0 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 62.0 }, .... ], \"unit\": \"%\" }, \"temperature\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 31.9 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 31.4 }, .... ], \"unit\": \"ºC\" }, \"windspeed\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 7.7 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 6.4 }, .... ], \"unit\": \"km/h\" }, \"windDirection\": { \"values\": [ { \"time\": \"2023-07-14T00:00:00\", \"value\": 233.0 }, { \"time\": \"2023-07-14T01:00:00\", \"value\": 223.0 }, .... ], \"unit\": \"km/h\" } }, \"geometry\": { \"type\": \"Point\", \"coordinates\": [ -89.64355775454169, 39.802794365611476 ] } } Warning If there is no data available at that time/day, the property will be returned as null. "}]